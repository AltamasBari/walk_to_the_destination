{"version":3,"sources":["logo.svg","components/NavBar/NavItem/navitem.jsx","helper/position.js","algorithms/mazeGeneratingAlgorithms/binary_tree.js","algorithms/mazeGeneratingAlgorithms/dfs.js","components/NavBar/navbar.jsx","components/Node/node_state.jsx","components/Node/node.jsx","components/Legend/legend.jsx","components/Grid/grid.jsx","components/Insights/insights.jsx","components/Copyright/copyright.jsx","algorithms/node.js","algorithms/dijkstra.js","helper/initialise.js","components/Loader/loader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavItem","state","description","getSelectedOptionDescription","props","selectedOption","options","handleHover","option","setState","this","onChanged","hasDescription","undefined","optionNamesContainerWidth","selectedOptionObject","getSelectedOption","className","style","width","map","key","id","textAlign","onMouseEnter","onMouseLeave","onClick","speed","name","left","filter","Component","Position","x","y","isEqual","a","b","JSON","stringify","getNeighbours","position","rows","columns","step","neighbours","push","isOnEdge","generateBinaryTreeMaze","source","target","walls","i","j","Math","round","random","sourceNeighbours","targetNeighbours","wall","some","node","visitedNodes","findNextNode","currNode","visitedNode","forEach","neighbour","connectAndMarkAsVisited","floor","length","generateDFSMaze","NavBar","algorithms","href","title","mazes","speeds","selectedMazeId","constructMaze","console","log","setTimeout","nodeDom","document","querySelector","classList","remove","add","stopLoading","onMazeCreated","getSelectedMazeFunction","mazeId","setMazeId","generateMaze","resetMesh","startLoading","wallsInOrder","alert","selectedAlgorithmId","algorithm","maze","selectedSpeedId","onAlgorithmChanged","onSpeedChanged","startWalking","clearPath","destructWalls","Fragment","src","logo","height","alt","showAlgorithmOptionsContainer","getSelectedAlgorithm","showMazeOptionsContainer","getSelectedMaze","showSpeedOptionsContainer","getSelectedSpeed","NodeState","NODE_UNVISITED","NODE_VISITED","NODE_IS_WALL","NODE_IS_SOURCE","NODE_IS_TARGET","NODE_FALLS_IN_PATH","NODE_IS_VISITING","Node","nodeState","onMouseDown","onMouseUp","getNodeStateClass","data-x","data-y","classes","Legend","disabled","Grid","isMousePressed","movingSource","movingTarget","toggleWall","setNodeAsSource","setNodeAsTarget","paddingX","window","innerWidth","paddingY","innerHeight","nodes","decideNodeState","handleMouseDown","handleMouseUp","handleMouseEnter","handleMouseLeave","paddingTop","paddingRight","paddingBottom","paddingLeft","Insights","insights","Copyright","distance","Infinity","mesh","unvisitedNodes","getNonWallNeighbours","neighbourPositions","getPreviousNodeInPath","prevNode","min","performDijkstra","row","initialiseMesh","minDist","getVisitedNodes","path","unshift","getNodesInPath","resetSourceAndTarget","sourceDom","targetDom","Loader","loading","App","setAlgorithmId","setSpeedId","putNodeInPath","contains","getSelectedAlgorithmFunction","k","updateMaze","s","createElement","type","async","crossOrigin","body","appendChild","gridHeight","gridWidth","parseInt","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,4UCiF5BC,E,4MA9EXC,MAAQ,CACJC,YAAa,EAAKC,6BACd,EAAKC,MAAMC,eACX,EAAKD,MAAME,U,EAInBC,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEP,YAAaM,EAAON,e,uDAG9B,IAAD,SAC0CQ,KAAKN,MAA5CE,EADH,EACGA,QAASD,EADZ,EACYA,eAAgBM,EAD5B,EAC4BA,UAC3BC,OACyBC,IAA3BP,EAAQ,GAAGJ,YACTY,EAA4BF,EAAiB,MAAQ,OACvDG,EAAuBL,KAAKM,kBAC5BX,EACAC,GAGJ,OACI,yBAAKW,UAAU,qBACX,yBACIA,UAAU,yBACVC,MAAO,CAAEC,MAAOL,IAEfR,EAAQc,KAAI,SAACZ,GAAD,OACT,4BACIa,IAAKb,EAAOc,GACZJ,MAAO,CACHK,UAAWX,EAAiB,QAAU,UAE1CK,UACIT,EAAOc,KAAOjB,EAAiB,SAAW,GAE9CmB,aAAc,kBAAM,EAAKjB,YAAYC,IACrCiB,aAAc,kBACV,EAAKlB,YAAYQ,IAErBW,QAAS,kBACLf,EACIH,EAAOc,QACUT,IAAjBL,EAAOmB,MACD,KACAnB,EAAOmB,SAIpBnB,EAAOoB,UAInBhB,EACG,yBACIK,UAAU,+BACVC,MAAO,CACHC,MAAO,MACPU,KAAMf,IAGTJ,KAAKT,MAAMC,aAEhB,Q,wCAKEG,EAAgBC,GAE9B,OADeA,EAAQwB,QAAO,SAACtB,GAAD,OAAYA,EAAOc,KAAOjB,KAC1C,K,mDAEWA,EAAgBC,GACzC,IAAME,EAASE,KAAKM,kBAAkBX,EAAgBC,GACtD,YAAkBO,IAAXL,EAAuB,KAAOA,EAAON,gB,GA3E9B6B,aCFhBC,EACF,WAAYC,EAAGC,GAAI,oBACfxB,KAAKuB,EAAIA,EACTvB,KAAKwB,EAAIA,GAIXC,EAAU,SAACC,EAAGC,GAChB,OAAOC,KAAKC,UAAUH,KAAOE,KAAKC,UAAUF,IAG1CG,EAAgB,SAACC,EAAUC,EAAMC,GAAuB,IAAdC,EAAa,uDAAN,EAC7CC,EAAa,GAiCnB,OA/BIJ,EAASR,GAAK,GACdQ,EAASR,GAAKS,GACdD,EAASP,GAAK,GACdO,EAASP,EAAIU,GAAQD,GAErBE,EAAWC,KAAK,IAAId,EAASS,EAASR,EAAGQ,EAASP,EAAIU,IAGtDH,EAASR,GAAK,GACdQ,EAASR,EAAIW,GAAQF,GACrBD,EAASP,GAAK,GACdO,EAASP,GAAKS,GAEdE,EAAWC,KAAK,IAAId,EAASS,EAASR,EAAIW,EAAMH,EAASP,IAGzDO,EAASR,GAAK,GACdQ,EAASR,GAAKS,GACdD,EAASP,EAAIU,GAAQ,GACrBH,EAASP,GAAKS,GAEdE,EAAWC,KAAK,IAAId,EAASS,EAASR,EAAGQ,EAASP,EAAIU,IAGtDH,EAASR,EAAIW,GAAQ,GACrBH,EAASR,GAAKS,GACdD,EAASP,GAAK,GACdO,EAASP,GAAKS,GAEdE,EAAWC,KAAK,IAAId,EAASS,EAASR,EAAIW,EAAMH,EAASP,IAEtDW,GAIIb,IC/CTe,EAAW,SAACN,EAAUC,EAAMC,GAC9B,OACmB,IAAfF,EAASR,GACTQ,EAASR,IAAMS,GACA,IAAfD,EAASP,GACTO,EAASP,IAAMS,GAyCRK,EArCgB,SAACN,EAAMC,EAASM,EAAQC,GAEnD,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,GAAKV,EAAMU,IACvBD,EAAML,KAAK,IAAId,EAASoB,EAAG,IAC3BD,EAAML,KAAK,IAAId,EAASoB,EAAGT,IAG/B,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAASU,IACzBF,EAAML,KAAK,IAAId,EAAS,EAAGqB,IAC3BF,EAAML,KAAK,IAAId,EAASU,EAAMW,IAGlC,IAAK,IAAID,EAAI,EAAGA,EAAIV,EAAO,EAAGU,GAAK,EAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAU,EAAGU,GAAK,EAClCF,EAAML,KAAK,IAAId,EAASoB,EAAGC,IACvBC,KAAKC,MAAMD,KAAKE,UAChBL,EAAML,KAAK,IAAId,EAASoB,EAAI,EAAGC,IAE/BF,EAAML,KAAK,IAAId,EAASoB,EAAGC,EAAI,IAI3C,IAAMI,EAAmBV,EAASE,GAC5BT,EAAcS,EAAQP,EAAMC,GAC5B,GACAe,EAAmBX,EAASG,GAC5BV,EAAcU,EAAQR,EAAMC,GAC5B,GACN,OAAOQ,EAAMrB,QACT,SAAC6B,GAAD,OACKxB,EAAQwB,EAAMV,KACdd,EAAQwB,EAAMT,KACdO,EAAiBG,MAAK,SAACC,GAAD,OAAU1B,EAAQ0B,EAAMF,QAC9CD,EAAiBE,MAAK,SAACC,GAAD,OAAU1B,EAAQ0B,EAAMF,UC1CrDR,EAAQ,GACRW,EAAe,GAEff,EAAW,SAACN,EAAUC,EAAMC,GAC9B,OACmB,IAAfF,EAASR,GACTQ,EAASR,IAAMS,GACA,IAAfD,EAASP,GACTO,EAASP,IAAMS,GAmBjBoB,EAAe,SAAfA,EAAgBC,EAAUtB,EAAMC,GAClCQ,EAAML,KAAKkB,GACX,IAAInB,EAAaL,EAAcwB,EAAUtB,EAAMC,EAAS,GAAGb,QACvD,SAAC+B,GACG,OACKV,EAAMS,MAAK,SAACD,GAAD,OAAUxB,EAAQwB,EAAME,QACnCC,EAAaF,MAAK,SAACK,GAAD,OAAiB9B,EAAQ8B,EAAaJ,UArBzC,SAACA,EAAMhB,EAAYH,EAAMC,GACrDE,EAAWqB,SAAQ,SAACC,GAChB,IAAM1B,EAAW,IAAIT,EAAS6B,EAAK5B,EAAG4B,EAAK3B,GACvCiC,EAAUlC,IAAM4B,EAAK5B,EACjBkC,EAAUjC,EAAI2B,EAAK3B,EAAGO,EAASP,IAC9BO,EAASP,IAEViC,EAAUlC,EAAI4B,EAAK5B,EAAGQ,EAASR,IAC9BQ,EAASR,IAElB6B,EAAahB,KAAKqB,GAClBhB,EAAML,KAAKL,MAcf2B,CAAwBJ,EAAUnB,GAClC,IAX8C,iBAY1C,IAAMmB,EACFnB,EAAWS,KAAKe,MAAMf,KAAKE,SAAWX,EAAWyB,SACrDP,EAAaC,EAAUtB,EAAMC,GAC7BE,EAAaA,EAAWf,QAAO,SAAC+B,GAAD,OAAW1B,EAAQ0B,EAAMG,OAJrDnB,EAAWyB,OAAS,GAAI,KAoCpBC,EA5BS,SAAC7B,EAAMC,EAASM,EAAQC,GAC5C,IAAK,IAAIE,EAAI,EAAGA,GAAKV,EAAMU,IACvBD,EAAML,KAAK,IAAId,EAASoB,EAAG,IAC3BD,EAAML,KAAK,IAAId,EAASoB,EAAGT,IAG/B,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAASU,IACzBF,EAAML,KAAK,IAAId,EAAS,EAAGqB,IAC3BF,EAAML,KAAK,IAAId,EAASU,EAAMW,IAGlCU,EAAa,IAAI/B,EAAS,EAAG,GAAIU,EAAMC,GAEvC,IAAMc,EAAmBV,EAASE,GAC5BT,EAAcS,EAAQP,EAAMC,GAC5B,GACAe,EAAmBX,EAASG,GAC5BV,EAAcU,EAAQR,EAAMC,GAC5B,GACN,OAAOQ,EAAMrB,QACT,SAAC6B,GAAD,OACKxB,EAAQwB,EAAMV,KACdd,EAAQwB,EAAMT,KACdO,EAAiBG,MAAK,SAACC,GAAD,OAAU1B,EAAQ0B,EAAMF,QAC9CD,EAAiBE,MAAK,SAACC,GAAD,OAAU1B,EAAQ0B,EAAMF,UCmW5Ca,E,4MAnaXvE,MAAQ,CACJwE,WAAY,CACR,CACInD,GAAI,gBACJM,KAAM,aACN1B,YACI,6BACI,iFAEI,2CAFJ,YAGI,8CAEI,iCALR,4BAO6B,4CAP7B,KASI,gCATJ,8GAaA,4BACI,2GAGI,4CAHJ,KAKA,0LAMA,iHAGI,wCAHJ,mEAMI,wCANJ,sGAUI,gCAVJ,8EAaI,gCAbJ,qCAeI,gCAfJ,UAiBI,gCAjBJ,gJAsBA,wKAKI,4CALJ,iDAQA,8LAKI,4CALJ,uLAWA,mLAOJ,mTAWZ,CACIoB,GAAI,UACJM,KAAM,KACN1B,YACI,6BACI,yDAC0B,wCAD1B,OAC+C,IAC3C,0CAFJ,kCAKA,yDAEI,6BAFJ,0FAIwC,IACpC,qCALJ,YAMI,6BANJ,uCAOwC,6BAPxC,mCAQoC,qCAEtB,IAVd,iCAWkC,6BAXlC,8BAY+B,6BAZ/B,2DAcS,6BAdT,yBAe0B,6BAf1B,sDAiBI,qCAjBJ,QAiB2B,qCAjB3B,iDAkBsC,qCAAmB,IAlBzD,kKAsBc,qCAtBd,gBAuBI,qCAvBJ,gBAuBmC,qCAC/B,6BAxBJ,0FA0BuC,IACnC,qCA3BJ,wCA4Bc,6BA5Bd,6FA8B4C,IACxC,qCA/BJ,6IAkCiB,OAK7B,CACIoB,GAAI,cACJM,KAAM,SACN1B,YACI,6BACI,+BACK,+CADL,yVAUA,oEAEI,uBACIwE,KAAK,oCACLC,MAAM,+BAFV,+BAFJ,0cAkBI,uBAAGD,KAAK,gBAAgBC,MAAM,WAA9B,YAlBJ,oGA4BhBC,MAAO,CACH,CAAEtD,GAAI,YAAaM,KAAM,UACzB,CAAEN,GAAI,mBAAoBM,KAAM,eAChC,CAAEN,GAAI,WAAYM,KAAM,uBAE5BiD,OAAQ,CACJ,CAAEvD,GAAI,eAAgBM,KAAM,SAAUD,MAAO,IAC7C,CAAEL,GAAI,aAAcM,KAAM,OAAQD,MAAO,IACzC,CAAEL,GAAI,eAAgBM,KAAM,SAAUD,MAAO,IAC7C,CAAEL,GAAI,aAAcM,KAAM,OAAQD,MAAO,IACzC,CAAEL,GAAI,eAAgBM,KAAM,SAAUD,MAAO,KAEjDmD,eAAgB,a,EAGpBC,cAAgB,SAAC5B,GACb6B,QAAQC,IAAI,CAAE9B,UACd,IAFuB,eAEdC,GACL,IAAMO,EAAOR,EAAMC,GACnB8B,YAAW,WACP,IAAMC,EAAUC,SAASC,cAAT,gBACH1B,EAAK1B,EADF,YACO0B,EAAKzB,IAE5BiD,EAAQG,UAAUC,OAAO,kBACzBJ,EAAQG,UAAUE,IAAI,aAClBpC,IAAMD,EAAMmB,OAAS,GACrBY,YAAW,WACP,EAAK9E,MAAMqF,cACX,EAAKrF,MAAMsF,cAAcvC,EAAO,MACjC,EAAK/C,MAAMuB,SAElB,EAAKvB,MAAMuB,MAAQyB,EAAK,IAdvBA,EAAI,EAAGA,EAAID,EAAMmB,OAAQlB,IAAM,EAA/BA,I,EAkBbuC,wBAA0B,SAACC,GACvB,OAAQA,GACJ,IAAK,mBACD,OAAO5C,EACX,IAAK,WACD,OAAOuB,EACX,IAAK,YACD,OAAQ,EACZ,QACI,OAAO,O,EAInBsB,UAAY,SAACf,GACT,IAAMgB,EAAe,EAAKH,wBAAwBb,GAClD,GAAqB,OAAjBgB,GAQJ,GAJYV,SAASC,cAAc,2BAC/BC,UAAUC,OAAO,QACrB,EAAKnF,MAAM2F,YACX,EAAKtF,SAAS,CAAEqE,oBACM,IAAlBgB,EAAJ,CACA,EAAK1F,MAAM4F,eACXhB,QAAQC,IAAI,mBAAoBH,GAChC,IAAMmB,EAAeH,EACjB,EAAK1F,MAAMsC,KACX,EAAKtC,MAAMuC,QACX,EAAKvC,MAAM6C,OACX,EAAK7C,MAAM8C,QAEf,EAAK6B,cAAckB,SAhBfC,MAAM,oB,8EAqBEd,SAASC,cAAc,gCAC/BC,UAAUE,IAAI,U,iDAKNJ,SAASC,cAAc,2BAC/BC,UAAUE,IAAI,U,kDAKNJ,SAASC,cAAc,4BAC/BC,UAAUE,IAAI,U,2CAGDW,GAIjB,OAHkBzF,KAAKT,MAAMwE,WAAW3C,QACpC,SAACsE,GAAD,OAAeA,EAAU9E,KAAO6E,KAEnB,K,sCAGLrB,GAIZ,OAHapE,KAAKT,MAAM2E,MAAM9C,QAC1B,SAACuE,GAAD,OAAUA,EAAK/E,KAAOwD,KAEd,K,uCAGCwB,GAIb,OAHc5F,KAAKT,MAAM4E,OAAO/C,QAC5B,SAACH,GAAD,OAAWA,EAAML,KAAOgF,KAEf,K,+BAGP,IAAD,EAUD5F,KAAKN,MARL+F,EAFC,EAEDA,oBACAG,EAHC,EAGDA,gBACAC,EAJC,EAIDA,mBACAC,EALC,EAKDA,eACAC,EANC,EAMDA,aACAC,EAPC,EAODA,UACAC,EARC,EAQDA,cACAZ,EATC,EASDA,UAEJ,OACI,kBAAC,IAAMa,SAAP,KACI,yBAAK3F,UAAU,iBACX,0BAAMA,UAAU,SACZ,yBACI4F,IAAKC,IACL3F,MAAM,KACN4F,OAAO,KACP9F,UAAU,2BACV+F,IAAI,SAER,0BAAM/F,UAAU,WAAhB,4BAEJ,yBAAKA,UAAU,qBACX,4BAAQK,GAAG,iBAAiBI,QAAS,kBAAMgF,MACvC,4CACA,uBAAGzF,UAAU,mBAEjB,4BACIK,GAAG,sBACHI,QAAS,kBAAMiF,MAEf,gDACA,uBAAG1F,UAAU,qBAEjB,4BAAQK,GAAG,iBAAiBI,QAAS,kBAAMqE,MACvC,4CACA,uBAAG9E,UAAU,0BAEjB,4BACIK,GAAG,oBACHI,QAAS,kBAAM+E,MAEf,+CACA,uBAAGxF,UAAU,yBAGrB,yBAAKA,UAAU,mBACX,4BACI,4BACI,4BACIA,UAAU,gBACVS,QAAShB,KAAKuG,+BAEd,8BAEQvG,KAAKwG,qBACDf,GACFvE,MAEF,IAVZ,YAYI,uBAAGX,UAAU,+BAGrB,4BACI,4BACIA,UAAU,WACVS,QAAShB,KAAKyG,0BAEd,8BAEQzG,KAAK0G,gBACD1G,KAAKT,MAAM6E,gBACblD,MAEF,IAVZ,OAYI,uBAAGX,UAAU,0BAGrB,4BACI,4BACIA,UAAU,YACVS,QAAShB,KAAK2G,2BAFlB,UAIY,IACR,8BAEQ3G,KAAK4G,iBACDhB,GACF1E,MAEF,IACR,uBAAGX,UAAU,+BAMjC,yBAAKA,UAAU,+BACX,kBAAC,EAAD,CACIX,QAASI,KAAKT,MAAMwE,WACpBpE,eAAgB8F,EAChBxF,UAAW4F,KAGnB,yBAAKtF,UAAU,0BACX,kBAAC,EAAD,CACIX,QAASI,KAAKT,MAAM2E,MACpBvE,eAAgBK,KAAKT,MAAM6E,eAC3BnE,UAAWD,KAAKmF,aAGxB,yBAAK5E,UAAU,2BACX,kBAAC,EAAD,CACIX,QAASI,KAAKT,MAAM4E,OACpBxE,eAAgBiG,EAChB3F,UAAW6F,U,GA5ZdzE,aCENwF,G,YATG,CACdC,eAAgB,EAChBC,aAAc,EACdC,cAAe,EACfC,eAAgB,GAChBC,eAAgB,IAChBC,mBAAoB,GACpBC,iBAAkB,ICwDPC,E,uKA3DD,IAAD,EAQDrH,KAAKN,MANL4H,EAFC,EAEDA,UACAvF,EAHC,EAGDA,SACAwF,EAJC,EAIDA,YACAC,EALC,EAKDA,UACA1G,EANC,EAMDA,aACAC,EAPC,EAODA,aAEJ,YAAqBZ,IAAjBW,EAEI,yBAAKP,UAAWP,KAAKyH,kBAAkBH,KAMvC,yBACI/G,UAAWP,KAAKyH,kBAAkBH,GAClC1G,GAAE,eAAUmB,EAASR,EAAnB,YAAwBQ,EAASP,GACnCkG,SAAQ3F,EAASR,EACjBoG,SAAQ5F,EAASP,EACjB+F,YAAa,kBAAMA,EAAYD,EAAWvF,IAC1CyF,UAAW,kBAAMA,EAAUF,EAAWvF,IACtCjB,aAAc,kBAAMA,EAAawG,EAAWvF,IAC5ChB,aAAc,kBAAMA,EAAauG,EAAWvF,Q,wCAQ1CuF,GACd,IAAIM,EAAU,aACd,OAAQN,GACJ,KAAKT,EAAUC,eACXc,GAAW,YACX,MACJ,KAAKf,EAAUE,aACXa,GAAW,UACX,MACJ,KAAKf,EAAUG,aACXY,GAAW,OACX,MACJ,KAAKf,EAAUI,eACXW,GAAW,SACX,MACJ,KAAKf,EAAUK,eACXU,GAAW,SACX,MACJ,QACIA,GAAW,YAGnB,OAAOA,M,GAxDIvG,aC0DJwG,EAvDA,WACX,OACI,6BAAStH,UAAU,oBACf,4BACI,4BACI,6BACI,kBAAC,EAAD,CACI+G,UAAWT,EAAUC,eACrB/E,SAAU,IAAIT,GAAU,GAAI,GAC5BwG,UAAQ,IAEZ,0BAAMvH,UAAU,QAAhB,eAGR,4BACI,6BACI,kBAAC,EAAD,CACI+G,UAAWT,EAAUE,aACrBhF,SAAU,IAAIT,GAAU,GAAI,KAEhC,0BAAMf,UAAU,QAAhB,aAGR,4BACI,6BACI,kBAAC,EAAD,CACI+G,UAAWT,EAAUG,aACrBjF,SAAU,IAAIT,GAAU,GAAI,KAEhC,0BAAMf,UAAU,QAAhB,UAGR,4BACI,6BACI,kBAAC,EAAD,CACI+G,UAAWT,EAAUI,eACrBlF,SAAU,IAAIT,GAAU,GAAI,KAEhC,0BAAMf,UAAU,QAAhB,YAGR,4BACI,6BACI,kBAAC,EAAD,CACI+G,UAAWT,EAAUK,eACrBnF,SAAU,IAAIT,GAAU,GAAI,KAEhC,0BAAMf,UAAU,QAAhB,eCqGTwH,G,kNAnJXxI,MAAQ,CACJyI,gBAAgB,EAChBC,cAAc,EACdC,cAAc,G,4DAGJZ,EAAWvF,GACrB/B,KAAKD,SAAS,CAAEiI,gBAAgB,IAI5BV,IAAcT,EAAUI,eACxBjH,KAAKD,SAAS,CAAEkI,cAAc,IACvBX,IAAcT,EAAUK,gBAC/BlH,KAAKD,SAAS,CAAEmI,cAAc,M,sCAKtBZ,EAAWvF,GACvB/B,KAAKD,SAAS,CAAEiI,gBAAgB,IAI5BV,IAAcT,EAAUI,eACxBjH,KAAKD,SAAS,CAAEkI,cAAc,IACvBX,IAAcT,EAAUK,eAC/BlH,KAAKD,SAAS,CAAEmI,cAAc,IAE9BlI,KAAKN,MAAMyI,WAAWpG,K,uCAGbuF,EAAWvF,GACpB/B,KAAKT,MAAMyI,iBAIPhI,KAAKT,MAAM0I,aAEXjI,KAAKN,MAAM0I,gBAAgBrG,GACpB/B,KAAKT,MAAM2I,aAElBlI,KAAKN,MAAM2I,gBAAgBtG,GAI3B/B,KAAKN,MAAMyI,WAAWpG,M,uCAIjBuF,EAAWvF,M,sCAeZR,EAAGC,EAAGe,EAAQC,EAAQC,EAAOW,GACzC,OAAI7B,IAAMgB,EAAOhB,GAAKC,IAAMe,EAAOf,EACxBqF,EAAUI,eACV1F,IAAMiB,EAAOjB,GAAKC,IAAMgB,EAAOhB,EAC/BqF,EAAUK,eAEjBzE,EAAMS,MAAK,SAACnB,GAAD,OAAcA,EAASR,IAAMA,GAAKQ,EAASP,IAAMA,KAErDqF,EAAUG,aAEjB5D,EAAaF,MACT,SAACnB,GAAD,OAAcA,EAASR,IAAMA,GAAKQ,EAASP,IAAMA,KAG9CqF,EAAUE,aAEdF,EAAUC,iB,+BAgBjB,IAbM,IAAD,SAQD9G,KAAKN,MANLsC,EAFC,EAEDA,KACAC,EAHC,EAGDA,QACAM,EAJC,EAIDA,OACAC,EALC,EAKDA,OACAC,EANC,EAMDA,MACAW,EAPC,EAODA,aAEEkF,GAAYC,OAAOC,WAAuB,GAAVvG,GAAgB,EAChDwG,GAAYF,OAAOG,YAAc,IAAa,GAAP1G,GAAa,EACpD2G,EAAQ,GAELpH,EAAI,EAAGA,GAAKS,EAAMT,IACvB,IAAK,IAAIC,EAAI,EAAGA,GAAKS,EAAST,IAAK,CAC/B,IAAMb,EAAM,QAAUY,EAAI,IAAMC,EAC1B8F,EAAYtH,KAAK4I,gBACnBrH,EACAC,EACAe,EACAC,EACAC,EACAW,GAGJuF,EAAMvG,KACF,kBAAC,EAAD,CACIzB,IAAKA,EACLoB,SAAU,IAAIT,EAASC,EAAGC,GAC1BZ,GAAID,EACJ2G,UAAWA,EACXC,YAAa,SAACD,EAAWvF,GAAZ,OACT,EAAK8G,gBAAgBvB,EAAWvF,IAEpCyF,UAAW,SAACF,EAAWvF,GAAZ,OACP,EAAK+G,cAAcxB,EAAWvF,IAElCjB,aAAc,SAACwG,EAAWvF,GAAZ,OACV,EAAKgH,iBAAiBzB,EAAWvF,IAErChB,aAAc,SAACuG,EAAWvF,GAAZ,OACV,EAAKiH,iBAAiB1B,EAAWvF,OAMrD,OACI,6BACIxB,UAAU,iBACVC,MAAO,CACHyI,WAAYR,EACZS,aAAcZ,EACda,cAAeV,EACfW,YAAad,IAGhBK,O,GA9IEtH,cCQJgI,G,MAXE,SAAC3J,GAAW,IACjB4J,EAAa5J,EAAb4J,SACR,OACI,6BAAS/I,UAAU,sBACf,6BACI,2BAAI+I,OCwBLC,G,MA9BG,WACd,OACI,6BAAShJ,UAAU,uBACf,yBAAKA,UAAU,gBACX,uBAAGyD,KAAK,mCACJ,uBAAGzD,UAAU,2BAGrB,yBAAKA,UAAU,aAAf,aACc,uBAAGA,UAAU,6BAD3B,MAC8D,IAC1D,uBAAGyD,KAAK,kCAAR,sBAEJ,yBAAKzD,UAAU,gBACX,uBAAGyD,KAAK,kDACJ,uBAAGzD,UAAU,qBAEjB,uBAAGyD,KAAK,+CACJ,uBAAGzD,UAAU,4BAEjB,uBAAGyD,KAAK,yCACJ,uBAAGzD,UAAU,2BAEjB,uBAAGyD,KAAK,2CACJ,uBAAGzD,UAAU,iCCvBZ8G,G,YACjB,WACItF,GAGD,IAFCyH,EAEF,uDAFaC,IACXnC,EACF,uDADcT,EAAUC,eACxB,oBACE9G,KAAK+B,SAAWA,EAChB/B,KAAKwJ,SAAWA,EAChBxJ,KAAKsH,UAAYA,ICNnBoC,EAAO,GACTC,EAAiB,GAyBfC,EAAuB,SAACzG,GAC1B,IAAM0G,EAAqB/H,EACvBqB,EAAKpB,SACLwG,OAAOvG,KACPuG,OAAOtG,SAELE,EAAa,GAUnB,OATA0H,EAAmBnJ,KAAI,SAACqB,GACpB,IAAMoB,EAAOuG,EAAK3H,EAASR,GAAGQ,EAASP,GACvC,OAAI2B,EAAKmE,YAAcT,EAAUG,eAC7B7E,EAAWC,KAAKe,IACT,MAKRhB,GAGL2H,EAAwB,SAACxG,GAQ3B,IAPA,IAMIyG,EANE5H,EAAayH,EAAqBtG,GAAUlC,QAC9C,SAAC+B,GAAD,OACIuG,EAAKvG,EAAKpB,SAASR,GAAG4B,EAAKpB,SAASP,GAAG8F,YACvCT,EAAUE,gBAEdiD,EAAMP,IAED/G,EAAI,EAAGA,EAAIP,EAAWyB,OAAQlB,IAAK,CACxC,IAAMS,EAAOhB,EAAWO,GACpBS,EAAKqG,SAAWQ,IAChBA,EAAM7G,EAAKqG,SACXO,EAAW5G,GAGnB,OAAO4G,GA8DIE,EAVS,SAACjI,EAAMC,EAASM,EAAQC,EAAQC,IA7GjC,SAACT,EAAMC,EAASM,EAAQC,EAAQC,GACnD8F,OAAOvG,KAAOA,EACduG,OAAOtG,QAAUA,EACjB,IAAK,IAAIS,EAAI,EAAGA,GAAK6F,OAAOvG,KAAMU,IAAK,CAEnC,IADA,IAAMwH,EAAM,GACHvH,EAAI,EAAGA,GAAK4F,OAAOtG,QAASU,IAAK,CACtC,IAAMQ,EAAO,IAAIkE,EAAK,IAAI/F,EAASoB,EAAGC,IAClClB,EAAQ0B,EAAKpB,SAAUQ,IACvBY,EAAKmE,UAAYT,EAAUI,eAC3B9D,EAAKqG,SAAW,GACT/H,EAAQ0B,EAAKpB,SAAUS,KAC9BW,EAAKmE,UAAYT,EAAUK,gBAE/ByC,EAAevH,KAAKe,GACpB+G,EAAIvH,GAAKQ,EAEbuG,EAAKhH,GAAKwH,EAEdzH,EAAMe,SAAQ,SAACzB,GACX2H,EAAK3H,EAASR,GAAGQ,EAASP,GAAG8F,UAAYT,EAAUG,gBA4FvDmD,CAAenI,EAAMC,EAASM,EAAQC,EAAQC,GAG9C,IAAMW,EA5Cc,SAACZ,GAGrB,IAFA,IAAMY,EAAe,GADW,aAM5B,IAFA,IAAIgH,EAAUX,IACVnG,OAAWnD,EACNuC,EAAI,EAAGA,EAAIiH,EAAe/F,OAAQlB,IACnCiH,EAAejH,GAAG8G,SAAWY,IAC7BA,EAAUT,EAAejH,GAAG8G,SAC5BlG,EAAWqG,EAAejH,IAGlC,YAAiBvC,IAAbmD,GACAgB,QAAQC,IAAI,wBACZ,UAGJnB,EAAahB,KAAKkB,GAClBqG,EAAiBA,EAAevI,QAC5B,SAAC+B,GAAD,OAAW1B,EAAQ0B,EAAKpB,SAAUuB,EAASvB,aAE3CN,EAAQ6B,EAASvB,SAAUS,IAC3B8B,QAAQC,IAAI,kBACZ,UAEJjB,EAASgE,UACLhE,EAASgE,YAAcT,EAAUI,eAC3BJ,EAAUI,eACVJ,EAAUE,kBAEpB6C,EAAqBtG,GAAUE,SAAQ,SAACL,GACpC,IAAMmD,EAAMhD,EAASkG,SAAW,EAChCrG,EAAKqG,SAAWlD,EAAMnD,EAAKqG,SAAWlD,EAAMnD,EAAKqG,eA7BlDG,EAAe/F,OAAS,GAAG,kBAoB1B,MAaR,OAAOR,EAQciH,CAAgB7H,GAErC,MAAO,CAAEY,eAAckH,KAxDJ,SAAClH,GAGpB,IAFA,IAAMkH,EAAO,GACThH,EAAWF,EAAaA,EAAaQ,OAAS,GAC3CN,EAASkG,SAAW,GACvBlG,EAAWwG,EAAsBxG,GACjCgH,EAAKC,QAAQjH,GAEjB,OAAOgH,EAgDME,CAAepH,KC5GjBqH,EAdc,WACzB,IAAMC,EAAYhG,SAASC,cAAc,qBACzC+F,EAAU9F,UAAUC,OAAO,eAC3B6F,EAAU9F,UAAUC,OAAO,iBAC3B6F,EAAU9F,UAAUC,OAAO,kBAC3B6F,EAAU9F,UAAUC,OAAO,gBAE3B,IAAM8F,EAAYjG,SAASC,cAAc,qBACzCgG,EAAU/F,UAAUC,OAAO,eAC3B8F,EAAU/F,UAAUC,OAAO,iBAC3B8F,EAAU/F,UAAUC,OAAO,kBAC3B8F,EAAU/F,UAAUC,OAAO,iBCKhB+F,G,MAdA,SAAClL,GACZ,IAAMkI,EAAUlI,EAAMmL,QAChB,wBACA,wBACN,OACI,yBAAKtK,UAAWqH,GACZ,yBAAKrH,UAAU,YACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,gBCuSZuK,E,4MA1QXvL,MAAQ,CACJkG,oBAAqB,gBACrBG,gBAAiB,aACjB3E,MAAO,GACPe,KAAM,EACNC,QAAS,EACTM,OAAQ,IAAIjB,GAAU,GAAI,GAC1BkB,OAAQ,IAAIlB,GAAU,GAAI,GAC1BmB,MAAO,GACPW,aAAc,GACdyH,SAAS,G,EAGbvF,aAAe,WACX,EAAKvF,SAAS,CAAE8K,SAAS,K,EAG7B9F,YAAc,WACV,EAAKhF,SAAS,CAAE8K,SAAS,K,EAG7BE,eAAiB,SAACtF,GACd,EAAK1F,SAAS,CAAE0F,wBACJf,SAASC,cAAc,gCAC/BC,UAAUC,OAAO,S,EAGzBmG,WAAa,SAACpF,EAAiB3E,GAC3B,EAAKlB,SAAS,CAAE6F,kBAAiB3E,UACrByD,SAASC,cAAc,4BAC/BC,UAAUC,OAAO,S,EAGzBuD,gBAAkB,SAACrG,GAEf,GAEQA,EAASR,IAAM,EAAKhC,MAAMiD,OAAOjB,GACjCQ,EAASP,IAAM,EAAKjC,MAAMiD,OAAOhB,EAEvC,CACE,IAAIiB,EAAQ,EAAKlD,MAAMkD,MAEnBA,EAAMS,MACF,SAACC,GAAD,OAAUA,EAAK5B,IAAMQ,EAASR,GAAK4B,EAAK3B,IAAMO,EAASP,OAG3DiB,EAAQ,EAAKlD,MAAMkD,MAAMrB,QACrB,SAAC+B,GAAD,QAAYA,EAAK5B,IAAMQ,EAASR,GAAK4B,EAAK3B,IAAMO,EAASP,OAGjE,EAAKzB,SAAS,CAAEwC,OAAQR,EAAUU,Y,EAI1C4F,gBAAkB,SAACtG,GAEf,GAEQA,EAASR,IAAM,EAAKhC,MAAMgD,OAAOhB,GACjCQ,EAASP,IAAM,EAAKjC,MAAMgD,OAAOf,EAEvC,CACE,IAAIiB,EAAQ,EAAKlD,MAAMkD,MAEnBA,EAAMS,MACF,SAACC,GAAD,OAAUA,EAAK5B,IAAMQ,EAASR,GAAK4B,EAAK3B,IAAMO,EAASP,OAG3DiB,EAAQ,EAAKlD,MAAMkD,MAAMrB,QACrB,SAAC+B,GAAD,QAAYA,EAAK5B,IAAMQ,EAASR,GAAK4B,EAAK3B,IAAMO,EAASP,OAGjE,EAAKzB,SAAS,CAAEyC,OAAQT,EAAUU,Y,EAI1C0F,WAAa,SAACpG,GAEV,IAAIU,EAAQ,EAAKlD,MAAMkD,MAEnBA,EAAMS,MAAK,SAACC,GAAD,OAAUA,EAAK5B,IAAMQ,EAASR,GAAK4B,EAAK3B,IAAMO,EAASP,KAGlEiB,EAAQA,EAAMrB,QACV,SAAC+B,GAAD,QAAYA,EAAK5B,IAAMQ,EAASR,GAAK4B,EAAK3B,IAAMO,EAASP,MAG7DiB,EAAML,KAAKL,GAEf,EAAKhC,SAAS,CAAE0C,W,EAGpBwI,cAAgB,SAAClJ,EAAUoB,GACvB,OAAI1B,EAAQM,EAAU,IAAIT,EAAS6B,EAAK5B,EAAI,EAAG4B,EAAK3B,IAAY,MAC5DC,EAAQM,EAAU,IAAIT,EAAS6B,EAAK5B,EAAG4B,EAAK3B,EAAI,IAAY,QAC5DC,EAAQM,EAAU,IAAIT,EAAS6B,EAAK5B,EAAI,EAAG4B,EAAK3B,IACzC,SACPC,EAAQM,EAAU,IAAIT,EAAS6B,EAAK5B,EAAG4B,EAAK3B,EAAI,IAAY,OACzD,Q,EAGXwE,UAAY,WACR,EAAKjG,SAAS,CAAEqD,aAAc,KAC9B,IAAK,IAAIV,EAAI,EAAGA,GAAK,EAAKnD,MAAMyC,KAAMU,IAClC,IAAK,IAAIC,EAAI,EAAGA,GAAK,EAAKpD,MAAM0C,QAASU,IAAK,CAC1C,IAAM8B,EAAUC,SAASC,cAAT,gBAAgCjC,EAAhC,YAAqCC,KAEjD8B,EAAQG,UAAUsG,SAAS,iBAC3BzG,EAAQG,UAAUsG,SAAS,gBAE3BzG,EAAQG,UAAUC,OAAO,gBACzBJ,EAAQG,UAAUC,OAAO,aACzBJ,EAAQG,UAAUE,IAAI,mBAIlC2F,K,EAGJxE,cAAgB,WACZ,EAAKlG,SAAS,CAAE0C,MAAO,M,EAG3B4C,UAAY,WACR,EAAKW,YACL,EAAKC,iB,EAGTkF,6BAA+B,WAC3B,OAAQ,EAAK5L,MAAMkG,qBACf,IAAK,gBACD,OAAOwE,EACX,IAAK,UACL,IAAK,cACL,QACI,OAAO,O,EAInBlE,aAAe,WACXvB,YAAW,WACPF,QAAQC,IAAI,iBACZ,IAAMmB,EAAY,EAAKyF,+BACvB,GAAkB,OAAdzF,EAAJ,CAIA,EAAKJ,eACLmF,IACA,EAAKzE,YAQL,IAjBa,MAUkBN,EAC3B,EAAKnG,MAAMyC,KACX,EAAKzC,MAAM0C,QACX,EAAK1C,MAAMgD,OACX,EAAKhD,MAAMiD,OACX,EAAKjD,MAAMkD,OALPW,EAVK,EAULA,aAAckH,EAVT,EAUSA,KAVT,WAiBJ5H,GACL8B,YAAW,WACP,IAAMC,EAAUC,SAASC,cAAT,gBACHvB,EAAaV,GAAGX,SAASR,EADtB,YAC2B6B,EAAaV,GAAGX,SAASP,IAEhEiD,EAAQG,UAAUsG,SAAS,oBAC3BzG,EAAQG,UAAUC,OAAO,kBACzBJ,EAAQG,UAAUE,IAAI,iBAEtBpC,IAAMU,EAAaQ,OAAS,GAC5BY,YAAW,WACP,GACIpB,EAAaV,GAAGX,SAASR,IACrB,EAAKhC,MAAMiD,OAAOjB,GACtB6B,EAAaV,GAAGX,SAASP,IACrB,EAAKjC,MAAMiD,OAAOhB,EACxB,CACEkD,SACKC,cAAc,qBACdC,UAAUE,IAFf,kBAGmB,EAAKmG,cACZX,EAAK,GAAGvI,SACR,EAAKxC,MAAMgD,UAGvB+B,QAAQC,IAAI+F,EAAKA,EAAK1G,OAAS,IAC/B,IAVF,eAUWwH,GACL5G,YAAW,WACP,IAAMrB,EAAOmH,EAAKc,GACZ3G,EAAUC,SAASC,cAAT,gBACHxB,EAAKpB,SAASR,EADX,YACgB4B,EAAKpB,SAASP,IAE9CiD,EAAQG,UAAUC,OACd,gBAEJJ,EAAQG,UAAUE,IAAI,aAClBsG,IAAMd,EAAK1G,OAAS,IACpBc,SACKC,cACG,qBAEHC,UAAUE,IAJf,kBAKmB,EAAKmG,cACZX,EAAKA,EAAK1G,OAAS,GACd7B,SACL,EAAKxC,MAAMiD,UAGvB,EAAKuC,iBAEV,EAAKxF,MAAM0B,MAAQmK,IAxBjBA,EAAI,EAAGA,EAAId,EAAK1G,OAAQwH,IAAM,EAA9BA,QA2BT5F,MAAM,wBACN,EAAKT,gBAEV,EAAKxF,MAAM0B,MAAQ,OAC3B,EAAK1B,MAAM0B,MAAQyB,IAzDjBA,EAAI,EAAGA,EAAIU,EAAaQ,OAAQlB,IAAM,EAAtCA,QAbL8C,MAAM,qBAwEX,M,EAGP6F,WAAa,SAAC5I,EAAOW,GACjB,EAAKrD,SAAS,CAAE0C,QAAOW,kB,kEArPvB,IAAMkI,EAAI5G,SAAS6G,cAAc,UACjCD,EAAEE,KAAO,kBACTF,EAAEG,OAAQ,EACVH,EAAEI,YAAc,YAChBJ,EAAEnF,IAAM,4CACRzB,SAASiH,KAAKC,YAAYN,GAE1B,IAAMO,EAAatD,OAAOG,YAAc,IAClCoD,EAAYvD,OAAOC,WAEnBxG,EAAO+J,UAAUF,EAAa,IAAM,IAEpC5J,EAAU8J,UAAUD,EAAY,IAAM,IACtCvJ,EAAS,IAAIjB,EACfyK,SAAS,GAAM/J,GACf+J,SAAS,GAAM9J,IAEbO,EAAS,IAAIlB,EACfyK,SAAS,GAAM/J,GACf+J,SAAS,GAAM9J,IAEnBjC,KAAKD,SAAS,CAAEiC,OAAMC,UAASM,SAAQC,a,+BAoOvC,OACI,kBAAC,IAAM0D,SAAP,KACI,kBAAC,EAAD,CAAQ2E,QAAS7K,KAAKT,MAAMsL,UAC5B,kBAAC,EAAD,CACIpF,oBAAqBzF,KAAKT,MAAMkG,oBAChCG,gBAAiB5F,KAAKT,MAAMqG,gBAC5BC,mBAAoB7F,KAAK+K,eACzBjF,eAAgB9F,KAAKgL,WACrBjF,aAAc/F,KAAK+F,aACnBC,UAAWhG,KAAKgG,UAChBC,cAAejG,KAAKiG,cACpBZ,UAAWrF,KAAKqF,UAChBrD,KAAMhC,KAAKT,MAAMyC,KACjBC,QAASjC,KAAKT,MAAM0C,QACpBM,OAAQvC,KAAKT,MAAMgD,OACnBC,OAAQxC,KAAKT,MAAMiD,OACnBvB,MAAOjB,KAAKT,MAAM0B,MAClB+D,cAAehF,KAAKqL,WACpB/F,aAActF,KAAKsF,aACnBP,YAAa/E,KAAK+E,cAGtB,kBAAC,EAAD,CACI/C,KAAMhC,KAAKT,MAAMyC,KACjBC,QAASjC,KAAKT,MAAM0C,QACpBM,OAAQvC,KAAKT,MAAMgD,OACnBC,OAAQxC,KAAKT,MAAMiD,OACnBC,MAAOzC,KAAKT,MAAMkD,MAClBW,aAAcpD,KAAKT,MAAM6D,aACzBgF,gBAAiBpI,KAAKoI,gBACtBC,gBAAiBrI,KAAKqI,gBACtBF,WAAYnI,KAAKmI,aAErB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUmB,SAAS,aACnB,kBAAC,EAAD,W,GA/REjI,aCDE2K,QACW,cAA7BzD,OAAO0D,SAASC,UAEe,UAA7B3D,OAAO0D,SAASC,UAEhB3D,OAAO0D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMnG,SAAP,KACI,kBAAC,EAAD,OAEJxB,SAAS4H,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxI,QAAQwI,MAAMA,EAAMC,c","file":"static/js/main.faa76e8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass NavItem extends Component {\n    state = {\n        description: this.getSelectedOptionDescription(\n            this.props.selectedOption,\n            this.props.options\n        ),\n    };\n\n    handleHover = (option) => {\n        this.setState({ description: option.description });\n    };\n\n    render() {\n        const { options, selectedOption, onChanged } = this.props;\n        const hasDescription =\n            options[0].description === undefined ? false : true;\n        const optionNamesContainerWidth = hasDescription ? \"30%\" : \"100%\";\n        let selectedOptionObject = this.getSelectedOption(\n            selectedOption,\n            options\n        );\n\n        return (\n            <div className=\"options-container\">\n                <div\n                    className=\"option-names-container\"\n                    style={{ width: optionNamesContainerWidth }}\n                >\n                    {options.map((option) => (\n                        <button\n                            key={option.id}\n                            style={{\n                                textAlign: hasDescription ? \"right\" : \"center\",\n                            }}\n                            className={\n                                option.id === selectedOption ? \"active\" : \"\"\n                            }\n                            onMouseEnter={() => this.handleHover(option)}\n                            onMouseLeave={() =>\n                                this.handleHover(selectedOptionObject)\n                            }\n                            onClick={() =>\n                                onChanged(\n                                    option.id,\n                                    option.speed === undefined\n                                        ? null\n                                        : option.speed\n                                )\n                            }\n                        >\n                            {option.name}\n                        </button>\n                    ))}\n                </div>\n                {hasDescription ? (\n                    <div\n                        className=\"option-description-container\"\n                        style={{\n                            width: \"60%\",\n                            left: optionNamesContainerWidth,\n                        }}\n                    >\n                        {this.state.description}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getSelectedOption(selectedOption, options) {\n        const option = options.filter((option) => option.id === selectedOption);\n        return option[0];\n    }\n    getSelectedOptionDescription(selectedOption, options) {\n        const option = this.getSelectedOption(selectedOption, options);\n        return option === undefined ? null : option.description;\n    }\n}\n\nexport default NavItem;\n","class Position {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nconst isEqual = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n\nconst getNeighbours = (position, rows, columns, step = 1) => {\n    const neighbours = [];\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y + step <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y + step));\n    }\n    if (\n        position.x >= 1 &&\n        position.x + step <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x + step, position.y));\n    }\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y - step >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y - step));\n    }\n    if (\n        position.x - step >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x - step, position.y));\n    }\n    return neighbours;\n};\n\nexport { isEqual, getNeighbours };\nexport default Position;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst generateBinaryTreeMaze = (rows, columns, source, target) => {\n    const walls = [];\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    for (let i = 3; i < rows - 1; i += 2) {\n        for (let j = 3; j < columns - 1; j += 2) {\n            walls.push(new Position(i, j));\n            if (Math.round(Math.random())) {\n                walls.push(new Position(i - 1, j));\n            } else {\n                walls.push(new Position(i, j - 1));\n            }\n        }\n    }\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateBinaryTreeMaze;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\nconst visitedNodes = [];\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst connectAndMarkAsVisited = (node, neighbours, rows, columns) => {\n    neighbours.forEach((neighbour) => {\n        const position = new Position(node.x, node.y);\n        if (neighbour.x === node.x) {\n            if (neighbour.y > node.y) position.y++;\n            else position.y--;\n        } else {\n            if (neighbour.x > node.x) position.x++;\n            else position.x--;\n        }\n        visitedNodes.push(neighbour);\n        walls.push(position);\n    });\n};\n\nconst findNextNode = (currNode, rows, columns) => {\n    walls.push(currNode);\n    let neighbours = getNeighbours(currNode, rows, columns, 2).filter(\n        (node) => {\n            return (\n                !walls.some((wall) => isEqual(wall, node)) &&\n                !visitedNodes.some((visitedNode) => isEqual(visitedNode, node))\n            );\n        }\n    );\n    connectAndMarkAsVisited(currNode, neighbours, rows, columns);\n    while (neighbours.length > 0) {\n        const currNode =\n            neighbours[Math.floor(Math.random() * neighbours.length)];\n        findNextNode(currNode, rows, columns);\n        neighbours = neighbours.filter((node) => !isEqual(node, currNode));\n    }\n};\n\nconst generateDFSMaze = (rows, columns, source, target) => {\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    findNextNode(new Position(3, 3), rows, columns);\n\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateDFSMaze;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\nimport logo from \"../../logo.svg\";\nimport NavItem from \"./NavItem/navitem\";\nimport generateBinaryTreeMaze from \"../../algorithms/mazeGeneratingAlgorithms/binary_tree\";\nimport generateDFSMaze from \"../../algorithms/mazeGeneratingAlgorithms/dfs\";\n\nclass NavBar extends Component {\n    state = {\n        algorithms: [\n            {\n                id: \"algo-dijkstra\",\n                name: \"Dijkstra's\",\n                description: (\n                    <div>\n                        <p>\n                            Let the node at which we are starting be called the\n                            <b>initial node</b>. Let the\n                            <b>\n                                distance of node\n                                <i>Y</i>\n                            </b>\n                            be the distance from the <b> initial node</b>\n                            to\n                            <i>Y</i>. Dijkstra's algorithm will assign some\n                            initial distance values and will try to improve them\n                            step by step.\n                        </p>\n                        <ol>\n                            <li>\n                                Mark all nodes unvisited. Create a set of all\n                                the unvisited nodes called the\n                                <i>unvisited set</i>.\n                            </li>\n                            <li>\n                                Assign to every node a tentative distance value:\n                                set it to zero for our initial node and to\n                                infinity for all other nodes. Set the initial\n                                node as current.\n                            </li>\n                            <li>\n                                For the current node, consider all of its\n                                unvisited neighbours and calculate their\n                                <i>tentative</i>\n                                distances through the current node. Compare the\n                                newly calculated\n                                <i>tentative</i>\n                                distance to the current assigned value and\n                                assign the smaller one. For example, if the\n                                current node\n                                <i>A</i>\n                                is marked with a distance of 6, and the edge\n                                connecting it with a neighbour\n                                <i>B</i>\n                                has length 2, then the distance to\n                                <i>B</i>\n                                through\n                                <i>A</i>\n                                will be 6 + 2 = 8. If B was previously marked\n                                with a distance greater than 8 then change it to\n                                8. Otherwise, the current value will be kept.\n                            </li>\n                            <li>\n                                When we are done considering all of the\n                                unvisited neighbours of the current node, mark\n                                the current node as visited and remove it from\n                                the\n                                <i>unvisited set</i>. A visited node will never\n                                be checked again.\n                            </li>\n                            <li>\n                                If the destination node has been marked visited\n                                (when planning a route between two specific\n                                nodes) or if the smallest tentative distance\n                                among the nodes in the\n                                <i>unvisited set</i>\n                                is infinity (when planning a complete traversal;\n                                occurs when there is no connection between the\n                                initial node and remaining unvisited nodes),\n                                then stop. The algorithm has finished.\n                            </li>\n                            <li>\n                                Otherwise, select the unvisited node that is\n                                marked with the smallest tentative distance, set\n                                it as the new \"current node\", and go back to\n                                step 3.\n                            </li>\n                        </ol>\n                        <p>\n                            When planning a route, it is actually not necessary\n                            to wait until the destination node is \"visited\" as\n                            above: the algorithm can stop once the destination\n                            node has the smallest tentative distance among all\n                            \"unvisited\" nodes (and thus could be selected as the\n                            next \"current\").\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-a*\",\n                name: \"A*\",\n                description: (\n                    <div>\n                        <p>\n                            We create two lists – <i>Open List</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <p>\n                            1. Initialize the open list\n                            <br />\n                            2. Initialize the closed list put the starting node\n                            on the open list (you can leave its{\" \"}\n                            <strong>f</strong> at zero)\n                            <br />\n                            3. while the open list is not empty <br />\n                            a. find the node with the least <strong>\n                                f\n                            </strong>{\" \"}\n                            on the open list, call it \"q\" <br />\n                            b. pop q off the open list <br />\n                            c. generate q's 8 successors and set their parents\n                            to q <br />\n                            d. for each successor <br />\n                            i. if successor is the goal, stop search successor.\n                            <strong>g</strong> = q.<strong>g</strong> + distance\n                            between successor and q successor.<strong>h</strong>{\" \"}\n                            = distance from goal to successor (This can be done\n                            using many ways, we will discuss three heuristics-\n                            Manhattan, Diagonal and Euclidean Heuristics)\n                            successor.<strong>f</strong> = successor.\n                            <strong>g</strong> + successor.<strong>h</strong>\n                            <br />\n                            ii. if a node with the same position as successor is\n                            in the OPEN list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor <br />\n                            iii. if a node with the same position as successor\n                            is in the CLOSED list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor otherwise, add the node to the open list\n                            end (for loop) e. push q on the closed list end\n                            (while loop){\" \"}\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-greedy\",\n                name: \"Greedy\",\n                description: (\n                    <div>\n                        <p>\n                            A<b>greedy algorithm</b>\n                            is any algorithm that follows the problem-solving\n                            heuristic of making the locally optimal choice at\n                            each stage. In many problems, a greedy strategy does\n                            not usually produce an optimal solution, but\n                            nonetheless a greedy heuristic may yield locally\n                            optimal solutions that approximate a globally\n                            optimal solution in a reasonable amount of time.\n                        </p>\n                        <p>\n                            For example, a greedy strategy for the\n                            <a\n                                href=\"/wiki/Travelling_salesman_problem\"\n                                title=\"Travelling salesman problem\"\n                            >\n                                travelling salesman problem\n                            </a>\n                            (which is of a high computational complexity) is the\n                            following heuristic: \"At each step of the journey,\n                            visit the nearest unvisited city.\" This heuristic\n                            does not intend to find a best solution, but it\n                            terminates in a reasonable number of steps; finding\n                            an optimal solution to such a complex problem\n                            typically requires unreasonably many steps. In\n                            mathematical optimization, greedy algorithms\n                            optimally solve combinatorial problems having the\n                            properties of\n                            <a href=\"/wiki/Matroid\" title=\"Matroid\">\n                                matroids\n                            </a>\n                            , and give constant-factor approximations to\n                            optimization problems with submodular structure.\n                        </p>\n                    </div>\n                ),\n            },\n        ],\n        mazes: [\n            { id: \"maze-none\", name: \"Create\" },\n            { id: \"maze-binary-tree\", name: \"Binary Tree\" },\n            { id: \"maze-dfs\", name: \"Depth First Search\" },\n        ],\n        speeds: [\n            { id: \"speed-faster\", name: \"Faster\", speed: 10 },\n            { id: \"speed-fast\", name: \"Fast\", speed: 15 },\n            { id: \"speed-normal\", name: \"Normal\", speed: 20 },\n            { id: \"speed-slow\", name: \"Slow\", speed: 30 },\n            { id: \"speed-slower\", name: \"Slower\", speed: 40 },\n        ],\n        selectedMazeId: \"maze-none\",\n    };\n\n    constructMaze = (walls) => {\n        console.log({ walls });\n        for (let i = 0; i < walls.length; i++) {\n            const wall = walls[i];\n            setTimeout(() => {\n                const nodeDom = document.querySelector(\n                    `#node-${wall.x}-${wall.y}`\n                );\n                nodeDom.classList.remove(\"node-unvisited\");\n                nodeDom.classList.add(\"node-wall\");\n                if (i === walls.length - 1) {\n                    setTimeout(() => {\n                        this.props.stopLoading();\n                        this.props.onMazeCreated(walls, []);\n                    }, this.props.speed);\n                }\n            }, (this.props.speed * i) / 2);\n        }\n    };\n\n    getSelectedMazeFunction = (mazeId) => {\n        switch (mazeId) {\n            case \"maze-binary-tree\":\n                return generateBinaryTreeMaze;\n            case \"maze-dfs\":\n                return generateDFSMaze;\n            case \"maze-none\":\n                return -1;\n            default:\n                return null;\n        }\n    };\n\n    setMazeId = (selectedMazeId) => {\n        const generateMaze = this.getSelectedMazeFunction(selectedMazeId);\n        if (generateMaze === null) {\n            alert(\"Coming Soon !!!\");\n            return;\n        }\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.remove(\"show\");\n        this.props.resetMesh(); // clear the maze\n        this.setState({ selectedMazeId });\n        if (generateMaze === -1) return;\n        this.props.startLoading();\n        console.log(\"Generate Maze : \", selectedMazeId);\n        const wallsInOrder = generateMaze(\n            this.props.rows,\n            this.props.columns,\n            this.props.source,\n            this.props.target\n        );\n        this.constructMaze(wallsInOrder);\n    };\n\n    showAlgorithmOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showMazeOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showSpeedOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    getSelectedAlgorithm(selectedAlgorithmId) {\n        const algorithm = this.state.algorithms.filter(\n            (algorithm) => algorithm.id === selectedAlgorithmId\n        );\n        return algorithm[0];\n    }\n\n    getSelectedMaze(selectedMazeId) {\n        const maze = this.state.mazes.filter(\n            (maze) => maze.id === selectedMazeId\n        );\n        return maze[0];\n    }\n\n    getSelectedSpeed(selectedSpeedId) {\n        const speed = this.state.speeds.filter(\n            (speed) => speed.id === selectedSpeedId\n        );\n        return speed[0];\n    }\n\n    render() {\n        const {\n            selectedAlgorithmId,\n            selectedSpeedId,\n            onAlgorithmChanged,\n            onSpeedChanged,\n            startWalking,\n            clearPath,\n            destructWalls,\n            resetMesh,\n        } = this.props;\n        return (\n            <React.Fragment>\n                <nav className=\"navbar-custom\">\n                    <span className=\"brand\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"logo\"\n                        />\n                        <span className=\"my-auto\">Walk to the Destination</span>\n                    </span>\n                    <div className=\"actions-container\">\n                        <button id=\"btn-clear-path\" onClick={() => clearPath()}>\n                            <span>Clear Path</span>\n                            <i className=\"fas fa-eraser\"></i>\n                        </button>\n                        <button\n                            id=\"btn-desctruct-walls\"\n                            onClick={() => destructWalls()}\n                        >\n                            <span>Destruct Walls</span>\n                            <i className=\"fas fa-snowplow\"></i>\n                        </button>\n                        <button id=\"btn-reset-mesh\" onClick={() => resetMesh()}>\n                            <span>Reset Mesh</span>\n                            <i className=\"fas fa-trash-restore\"></i>\n                        </button>\n                        <button\n                            id=\"btn-start-walking\"\n                            onClick={() => startWalking()}\n                        >\n                            <span>Start Walking</span>\n                            <i className=\"fas fa-play-circle\"></i>\n                        </button>\n                    </div>\n                    <div className=\"walking-options\">\n                        <ul>\n                            <li>\n                                <button\n                                    className=\"btn-algorithm\"\n                                    onClick={this.showAlgorithmOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedAlgorithm(\n                                                selectedAlgorithmId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Algorithm\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-maze\"\n                                    onClick={this.showMazeOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedMaze(\n                                                this.state.selectedMazeId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Maze\n                                    <i className=\"fab fa-magento ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-speed\"\n                                    onClick={this.showSpeedOptionsContainer}\n                                >\n                                    Speed :{\" \"}\n                                    <span>\n                                        {\n                                            this.getSelectedSpeed(\n                                                selectedSpeedId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    <i className=\"fas fa-tachometer-alt\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"algorithm-options-container\">\n                    <NavItem\n                        options={this.state.algorithms}\n                        selectedOption={selectedAlgorithmId}\n                        onChanged={onAlgorithmChanged}\n                    />\n                </div>\n                <div className=\"maze-options-container\">\n                    <NavItem\n                        options={this.state.mazes}\n                        selectedOption={this.state.selectedMazeId}\n                        onChanged={this.setMazeId}\n                    />\n                </div>\n                <div className=\"speed-options-container\">\n                    <NavItem\n                        options={this.state.speeds}\n                        selectedOption={selectedSpeedId}\n                        onChanged={onSpeedChanged}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default NavBar;\n","const NodeState = {\n    NODE_UNVISITED: 0,\n    NODE_VISITED: 1,\n    NODE_IS_WALL: -1,\n    NODE_IS_SOURCE: 10,\n    NODE_IS_TARGET: 100,\n    NODE_FALLS_IN_PATH: 50,\n    NODE_IS_VISITING: 2,\n};\nexport default NodeState;\n","import React, { Component } from \"react\";\nimport \"./node.css\";\nimport NodeState from \"./node_state\";\nclass Node extends Component {\n    render() {\n        const {\n            nodeState,\n            position,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onMouseLeave,\n        } = this.props;\n        if (onMouseEnter === undefined) {\n            return (\n                <div className={this.getNodeStateClass(nodeState)}>\n                    {/* <div></div> */}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    className={this.getNodeStateClass(nodeState)}\n                    id={`node-${position.x}-${position.y}`}\n                    data-x={position.x}\n                    data-y={position.y}\n                    onMouseDown={() => onMouseDown(nodeState, position)}\n                    onMouseUp={() => onMouseUp(nodeState, position)}\n                    onMouseEnter={() => onMouseEnter(nodeState, position)}\n                    onMouseLeave={() => onMouseLeave(nodeState, position)}\n                >\n                    {/* <div></div> */}\n                </div>\n            );\n        }\n    }\n\n    getNodeStateClass(nodeState) {\n        let classes = \"node node-\";\n        switch (nodeState) {\n            case NodeState.NODE_UNVISITED:\n                classes += \"unvisited\";\n                break;\n            case NodeState.NODE_VISITED:\n                classes += \"visited\";\n                break;\n            case NodeState.NODE_IS_WALL:\n                classes += \"wall\";\n                break;\n            case NodeState.NODE_IS_SOURCE:\n                classes += \"source\";\n                break;\n            case NodeState.NODE_IS_TARGET:\n                classes += \"target\";\n                break;\n            default:\n                classes += \"unvisited\";\n                break;\n        }\n        return classes;\n    }\n}\n\nexport default Node;\n","import React from \"react\";\nimport \"./legend.css\";\nimport Node from \"../Node/node\";\nimport Position from \"../../helper/position\";\nimport NodeState from \"../Node/node_state\";\n\nconst Legend = () => {\n    return (\n        <section className=\"legend-container\">\n            <ul>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_UNVISITED}\n                            position={new Position(-1, -1)}\n                            disabled\n                        />\n                        <span className=\"ml-1\">Unvisited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_VISITED}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Visited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_WALL}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Wall</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_SOURCE}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Source</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_TARGET}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Target</span>\n                    </div>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default Legend;\n","import React, { Component } from \"react\";\nimport Node from \"../Node/node\";\nimport NodeState from \"../Node/node_state\";\nimport Position from \"../../helper/position\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n    state = {\n        isMousePressed: false,\n        movingSource: false,\n        movingTarget: false,\n    };\n\n    handleMouseUp(nodeState, position) {\n        this.setState({ isMousePressed: false });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseUp | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: false });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: false });\n        } else {\n            // do nothing\n        }\n    }\n    handleMouseDown(nodeState, position) {\n        this.setState({ isMousePressed: true });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseDown | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: true });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: true });\n        } else {\n            this.props.toggleWall(position);\n        }\n    }\n    handleMouseEnter(nodeState, position) {\n        if (this.state.isMousePressed) {\n            // console.log(\n            //     `(${position.x}, ${position.y}) : mouseEnter | pressed=${this.state.isMousePressed}`\n            // );\n            if (this.state.movingSource) {\n                // TODO: change nodeState to source\n                this.props.setNodeAsSource(position);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to target\n                this.props.setNodeAsTarget(position);\n            } else {\n                // TODO: toggleWall()\n                // console.log(position);\n                this.props.toggleWall(position);\n            }\n        }\n    }\n    handleMouseLeave(nodeState, position) {\n        // if (this.state.isMousePressed) {\n        //     console.log(\n        //         `(${position.x}, ${position.y}) : mouseLeave | pressed=${this.state.isMousePressed}`\n        //     );\n        //     if (nodeState === NodeState.NODE_IS_SOURCE) {\n        //         // TODO: change nodeState to unvisited\n        //     } else if (nodeState === NodeState.NODE_IS_TARGET) {\n        //         // TODO: change nodestate to unvisited\n        //     } else {\n        //         // do nothing\n        //     }\n        // }\n    }\n\n    decideNodeState(x, y, source, target, walls, visitedNodes) {\n        if (x === source.x && y === source.y) {\n            return NodeState.NODE_IS_SOURCE;\n        } else if (x === target.x && y === target.y) {\n            return NodeState.NODE_IS_TARGET;\n        } else if (\n            walls.some((position) => position.x === x && position.y === y)\n        ) {\n            return NodeState.NODE_IS_WALL;\n        } else if (\n            visitedNodes.some(\n                (position) => position.x === x && position.y === y\n            )\n        ) {\n            return NodeState.NODE_VISITED;\n        }\n        return NodeState.NODE_UNVISITED;\n    }\n\n    render() {\n        const {\n            rows,\n            columns,\n            source,\n            target,\n            walls,\n            visitedNodes,\n        } = this.props;\n        const paddingX = (window.innerWidth - columns * 20) / 2;\n        const paddingY = (window.innerHeight - 190 - rows * 20) / 2;\n        const nodes = [];\n\n        for (var x = 1; x <= rows; x++) {\n            for (var y = 1; y <= columns; y++) {\n                const key = \"node-\" + x + \"-\" + y;\n                const nodeState = this.decideNodeState(\n                    x,\n                    y,\n                    source,\n                    target,\n                    walls,\n                    visitedNodes\n                );\n\n                nodes.push(\n                    <Node\n                        key={key}\n                        position={new Position(x, y)}\n                        id={key}\n                        nodeState={nodeState}\n                        onMouseDown={(nodeState, position) =>\n                            this.handleMouseDown(nodeState, position)\n                        }\n                        onMouseUp={(nodeState, position) =>\n                            this.handleMouseUp(nodeState, position)\n                        }\n                        onMouseEnter={(nodeState, position) =>\n                            this.handleMouseEnter(nodeState, position)\n                        }\n                        onMouseLeave={(nodeState, position) =>\n                            this.handleMouseLeave(nodeState, position)\n                        }\n                    />\n                );\n            }\n        }\n        return (\n            <section\n                className=\"grid-container\"\n                style={{\n                    paddingTop: paddingY,\n                    paddingRight: paddingX,\n                    paddingBottom: paddingY,\n                    paddingLeft: paddingX,\n                }}\n            >\n                {nodes}\n            </section>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./insights.css\";\n\nconst Insights = (props) => {\n    const { insights } = props;\n    return (\n        <section className=\"insights-container\">\n            <div>\n                <p>{insights}</p>\n            </div>\n        </section>\n    );\n};\n\nexport default Insights;\n","import React from \"react\";\nimport \"./copyright.css\";\nconst Copyright = () => {\n    return (\n        <section className=\"copyright-container\">\n            <div className=\"github-links\">\n                <a href=\"https://github.com/shantanu0323\">\n                    <i className=\"fab fa-github-square\"></i>\n                </a>\n            </div>\n            <div className=\"copyright\">\n                Made with <i className=\"fas fa-heart text-danger\"></i> by{\" \"}\n                <a href=\"https://shantanu0323.github.io\">Shantanu Pramanik</a>\n            </div>\n            <div className=\"social-links\">\n                <a href=\"https://www.linkedin.com/in/shantanu-pramanik/\">\n                    <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"https://www.facebook.com/shantanu.pramanik1\">\n                    <i className=\"fab fa-facebook-square\"></i>\n                </a>\n                <a href=\"https://www.twitter.com/shantanu0323/\">\n                    <i className=\"fab fa-twitter-square\"></i>\n                </a>\n                <a href=\"https://www.instagram.com/shantanu0323/\">\n                    <i className=\"fab fa-instagram-square\"></i>\n                </a>\n            </div>\n        </section>\n    );\n};\n\nexport default Copyright;\n","import NodeState from \"../components/Node/node_state\";\n\nexport default class Node {\n    constructor(\n        position,\n        distance = Infinity,\n        nodeState = NodeState.NODE_UNVISITED\n    ) {\n        this.position = position;\n        this.distance = distance;\n        this.nodeState = nodeState;\n    }\n}\n","import Node from \"./node\";\nimport NodeState from \"../components/Node/node_state\";\nimport Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nconst mesh = [];\nlet unvisitedNodes = [];\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    for (let i = 1; i <= window.rows; i++) {\n        const row = [];\n        for (let j = 1; j <= window.columns; j++) {\n            const node = new Node(new Position(i, j));\n            if (isEqual(node.position, source)) {\n                node.nodeState = NodeState.NODE_IS_SOURCE;\n                node.distance = 0;\n            } else if (isEqual(node.position, target)) {\n                node.nodeState = NodeState.NODE_IS_TARGET;\n            }\n            unvisitedNodes.push(node);\n            row[j] = node;\n        }\n        mesh[i] = row;\n    }\n    walls.forEach((position) => {\n        mesh[position.x][position.y].nodeState = NodeState.NODE_IS_WALL;\n    });\n};\n\nconst getNonWallNeighbours = (node) => {\n    const neighbourPositions = getNeighbours(\n        node.position,\n        window.rows,\n        window.columns\n    );\n    const neighbours = [];\n    neighbourPositions.map((position) => {\n        const node = mesh[position.x][position.y];\n        if (node.nodeState !== NodeState.NODE_IS_WALL) {\n            neighbours.push(node);\n            return true;\n        }\n        return false;\n    });\n\n    return neighbours;\n};\n\nconst getPreviousNodeInPath = (currNode) => {\n    const neighbours = getNonWallNeighbours(currNode).filter(\n        (node) =>\n            mesh[node.position.x][node.position.y].nodeState ===\n            NodeState.NODE_VISITED\n    );\n    let min = Infinity;\n    let prevNode;\n    for (let i = 0; i < neighbours.length; i++) {\n        const node = neighbours[i];\n        if (node.distance < min) {\n            min = node.distance;\n            prevNode = node;\n        }\n    }\n    return prevNode;\n};\n\nconst getNodesInPath = (visitedNodes) => {\n    const path = [];\n    let currNode = visitedNodes[visitedNodes.length - 1]; // target\n    while (currNode.distance > 1) {\n        currNode = getPreviousNodeInPath(currNode);\n        path.unshift(currNode);\n    }\n    return path;\n};\n\nconst getVisitedNodes = (target) => {\n    const visitedNodes = [];\n\n    while (unvisitedNodes.length > 0) {\n        let minDist = Infinity;\n        let currNode = undefined;\n        for (let i = 0; i < unvisitedNodes.length; i++) {\n            if (unvisitedNodes[i].distance < minDist) {\n                minDist = unvisitedNodes[i].distance;\n                currNode = unvisitedNodes[i];\n            }\n        }\n        if (currNode === undefined) {\n            console.log(\"Target NOT Reachable\");\n            break;\n        }\n\n        visitedNodes.push(currNode);\n        unvisitedNodes = unvisitedNodes.filter(\n            (node) => !isEqual(node.position, currNode.position)\n        );\n        if (isEqual(currNode.position, target)) {\n            console.log(\"TARGET REACHED\");\n            break;\n        }\n        currNode.nodeState =\n            currNode.nodeState === NodeState.NODE_IS_SOURCE\n                ? NodeState.NODE_IS_SOURCE\n                : NodeState.NODE_VISITED;\n\n        getNonWallNeighbours(currNode).forEach((node) => {\n            const alt = currNode.distance + 1;\n            node.distance = alt < node.distance ? alt : node.distance;\n        });\n    }\n\n    return visitedNodes;\n};\n\nconst performDijkstra = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    // perform dijkstra(graph, source, target) on the graph and get the visited nodes in order\n    const visitedNodes = getVisitedNodes(target);\n    const path = getNodesInPath(visitedNodes);\n    return { visitedNodes, path };\n};\n\nexport default performDijkstra;\n","const resetSourceAndTarget = () => {\n    const sourceDom = document.querySelector(\".node.node-source\");\n    sourceDom.classList.remove(\"path-to-top\");\n    sourceDom.classList.remove(\"path-to-right\");\n    sourceDom.classList.remove(\"path-to-bottom\");\n    sourceDom.classList.remove(\"path-to-left\");\n\n    const targetDom = document.querySelector(\".node.node-target\");\n    targetDom.classList.remove(\"path-to-top\");\n    targetDom.classList.remove(\"path-to-right\");\n    targetDom.classList.remove(\"path-to-bottom\");\n    targetDom.classList.remove(\"path-to-left\");\n};\n\nexport default resetSourceAndTarget;\n","import React from \"react\";\nimport \"./loader.css\";\nconst Loader = (props) => {\n    const classes = props.loading\n        ? \"loader-container show\"\n        : \"loader-container hide\";\n    return (\n        <div className={classes}>\n            <div className=\"top-bar\"></div>\n            <div className=\"right-bar\"></div>\n            <div className=\"bottom-bar\"></div>\n            <div className=\"left-bar\"></div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar/navbar\";\nimport Legend from \"./components/Legend/legend\";\nimport Grid from \"./components/Grid/grid\";\nimport Position, { isEqual } from \"./helper/position\";\nimport Insights from \"./components/Insights/insights\";\nimport Copyright from \"./components/Copyright/copyright\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport performDijkstra from \"./algorithms/dijkstra\";\nimport resetSourceAndTarget from \"./helper/initialise\";\nimport Loader from \"./components/Loader/loader\";\n\nclass App extends Component {\n    componentDidMount() {\n        // Include the FontAwesome Library\n        const s = document.createElement(\"script\");\n        s.type = \"text/javascript\";\n        s.async = true;\n        s.crossOrigin = \"anonymous\";\n        s.src = \"https://kit.fontawesome.com/f7fe82406d.js\";\n        document.body.appendChild(s);\n\n        const gridHeight = window.innerHeight - 190;\n        const gridWidth = window.innerWidth;\n\n        const rows = parseInt((gridHeight - 40) / 20);\n\n        const columns = parseInt((gridWidth - 40) / 20);\n        const source = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.3 * columns)\n        );\n        const target = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.7 * columns)\n        );\n        this.setState({ rows, columns, source, target });\n    }\n\n    state = {\n        selectedAlgorithmId: \"algo-dijkstra\",\n        selectedSpeedId: \"speed-fast\",\n        speed: 15,\n        rows: 0,\n        columns: 0,\n        source: new Position(-1, -1),\n        target: new Position(-1, -1),\n        walls: [],\n        visitedNodes: [],\n        loading: false,\n    };\n\n    startLoading = () => {\n        this.setState({ loading: true });\n    };\n\n    stopLoading = () => {\n        this.setState({ loading: false });\n    };\n\n    setAlgorithmId = (selectedAlgorithmId) => {\n        this.setState({ selectedAlgorithmId });\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setSpeedId = (selectedSpeedId, speed) => {\n        this.setState({ selectedSpeedId, speed });\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setNodeAsSource = (position) => {\n        // console.log(`SOURCE: ${position}`);\n        if (\n            !(\n                position.x === this.state.target.x &&\n                position.y === this.state.target.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ source: position, walls });\n        }\n    };\n\n    setNodeAsTarget = (position) => {\n        // console.log(`TARGET: ${position}`);\n        if (\n            !(\n                position.x === this.state.source.x &&\n                position.y === this.state.source.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ target: position, walls });\n        }\n    };\n\n    toggleWall = (position) => {\n        // console.log(position);\n        let walls = this.state.walls;\n        if (\n            walls.some((node) => node.x === position.x && node.y === position.y)\n        ) {\n            // Node is a wall -> change to unvisited\n            walls = walls.filter(\n                (node) => !(node.x === position.x && node.y === position.y)\n            );\n        } else {\n            walls.push(position);\n        }\n        this.setState({ walls });\n    };\n\n    putNodeInPath = (position, node) => {\n        if (isEqual(position, new Position(node.x - 1, node.y))) return \"top\";\n        if (isEqual(position, new Position(node.x, node.y + 1))) return \"right\";\n        if (isEqual(position, new Position(node.x + 1, node.y)))\n            return \"bottom\";\n        if (isEqual(position, new Position(node.x, node.y - 1))) return \"left\";\n        return \"null\";\n    };\n\n    clearPath = () => {\n        this.setState({ visitedNodes: [] });\n        for (let i = 1; i <= this.state.rows; i++) {\n            for (let j = 1; j <= this.state.columns; j++) {\n                const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                if (\n                    nodeDom.classList.contains(\"node-visited\") ||\n                    nodeDom.classList.contains(\"node-path\")\n                ) {\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                }\n            }\n        }\n        resetSourceAndTarget();\n    };\n\n    destructWalls = () => {\n        this.setState({ walls: [] });\n    };\n\n    resetMesh = () => {\n        this.clearPath();\n        this.destructWalls();\n    };\n\n    getSelectedAlgorithmFunction = () => {\n        switch (this.state.selectedAlgorithmId) {\n            case \"algo-dijkstra\":\n                return performDijkstra;\n            case \"algo-a*\":\n            case \"algo-greedy\":\n            default:\n                return null;\n        }\n    };\n\n    startWalking = () => {\n        setTimeout(() => {\n            console.log(\"START WALKING\");\n            const algorithm = this.getSelectedAlgorithmFunction();\n            if (algorithm === null) {\n                alert(\"Coming Soon !!!\");\n                return;\n            }\n            this.startLoading();\n            resetSourceAndTarget();\n            this.clearPath();\n            const { visitedNodes, path } = algorithm(\n                this.state.rows,\n                this.state.columns,\n                this.state.source,\n                this.state.target,\n                this.state.walls\n            );\n            for (let i = 0; i < visitedNodes.length; i++) {\n                setTimeout(() => {\n                    const nodeDom = document.querySelector(\n                        `#node-${visitedNodes[i].position.x}-${visitedNodes[i].position.y}`\n                    );\n                    if (nodeDom.classList.contains(\"node-unvisited\")) {\n                        nodeDom.classList.remove(\"node-unvisited\");\n                        nodeDom.classList.add(\"node-visited\");\n                    }\n                    if (i === visitedNodes.length - 1)\n                        setTimeout(() => {\n                            if (\n                                visitedNodes[i].position.x ===\n                                    this.state.target.x &&\n                                visitedNodes[i].position.y ===\n                                    this.state.target.y\n                            ) {\n                                document\n                                    .querySelector(\".node.node-source\")\n                                    .classList.add(\n                                        `path-to-${this.putNodeInPath(\n                                            path[0].position,\n                                            this.state.source\n                                        )}`\n                                    );\n                                console.log(path[path.length - 1]);\n                                for (let k = 0; k < path.length; k++) {\n                                    setTimeout(() => {\n                                        const node = path[k];\n                                        const nodeDom = document.querySelector(\n                                            `#node-${node.position.x}-${node.position.y}`\n                                        );\n                                        nodeDom.classList.remove(\n                                            \"node-visited\"\n                                        );\n                                        nodeDom.classList.add(\"node-path\");\n                                        if (k === path.length - 1) {\n                                            document\n                                                .querySelector(\n                                                    \".node.node-target\"\n                                                )\n                                                .classList.add(\n                                                    `path-to-${this.putNodeInPath(\n                                                        path[path.length - 1]\n                                                            .position,\n                                                        this.state.target\n                                                    )}`\n                                                );\n                                            this.stopLoading();\n                                        }\n                                    }, this.state.speed * k);\n                                }\n                            } else {\n                                alert(\"Target NOT Reachable\");\n                                this.stopLoading();\n                            }\n                        }, this.state.speed + 500);\n                }, this.state.speed * i);\n            }\n        }, 500);\n    };\n\n    updateMaze = (walls, visitedNodes) => {\n        this.setState({ walls, visitedNodes });\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Loader loading={this.state.loading} />\n                <NavBar\n                    selectedAlgorithmId={this.state.selectedAlgorithmId}\n                    selectedSpeedId={this.state.selectedSpeedId}\n                    onAlgorithmChanged={this.setAlgorithmId}\n                    onSpeedChanged={this.setSpeedId}\n                    startWalking={this.startWalking}\n                    clearPath={this.clearPath}\n                    destructWalls={this.destructWalls}\n                    resetMesh={this.resetMesh}\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    speed={this.state.speed}\n                    onMazeCreated={this.updateMaze}\n                    startLoading={this.startLoading}\n                    stopLoading={this.stopLoading}\n                />\n\n                <Grid\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    walls={this.state.walls}\n                    visitedNodes={this.state.visitedNodes}\n                    setNodeAsSource={this.setNodeAsSource}\n                    setNodeAsTarget={this.setNodeAsTarget}\n                    toggleWall={this.toggleWall}\n                />\n                <Legend />\n                <Insights insights=\"Insights\" />\n                <Copyright />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.Fragment>\n        <App />\n    </React.Fragment>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}