{"version":3,"sources":["logo.svg","algorithms/mazeGeneratingAlgorithms/recursive_division.js","components/NavBar/NavItem/navitem.jsx","helper/position.js","algorithms/mazeGeneratingAlgorithms/binary_tree.js","algorithms/mazeGeneratingAlgorithms/dfs.js","algorithms/mazeGeneratingAlgorithms/random.js","components/NavBar/navbar.jsx","components/Node/node_state.jsx","components/Node/node.jsx","components/Legend/legend.jsx","components/Grid/grid.jsx","components/Insights/insights.jsx","components/Copyright/copyright.jsx","algorithms/dijkstra.js","helper/initialise.js","components/Loader/loader.jsx","algorithms/a_star.js","algorithms/greedy.js","algorithms/bfs.js","algorithms/dfs.js","helper/letters.js","components/Interact/interact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","orientation","NavItem","state","description","getSelectedOptionDescription","props","selectedOption","options","handleHover","option","setState","this","onChanged","hasDescription","undefined","optionNamesContainerWidth","selectedOptionObject","getSelectedOption","className","style","width","map","key","id","textAlign","onMouseEnter","onMouseLeave","onClick","speed","name","left","filter","Component","Position","x","y","isEqual","a","b","JSON","stringify","getNeighbours","position","rows","columns","step","neighbours","push","isOnEdge","generateBinaryTreeMaze","source","target","walls","i","j","Math","round","random","sourceNeighbours","targetNeighbours","wall","some","node","visitedNodes","findNextNode","currNode","visitedNode","forEach","neighbour","connectAndMarkAsVisited","floor","length","generateDFSMaze","generateRecursiveDivisionMaze","window","buildWalls","startRow","endRow","startColumn","endColumn","wallIndex","pathIndex","index","generateRandomMaze","generateRandomWalls","sort","NavBar","algorithms","href","title","mazes","speeds","selectedMazeId","constructMaze","setTimeout","nodeDom","document","querySelector","classList","remove","add","stopLoading","onMazeCreated","getSelectedMazeFunction","mazeId","setMazeId","generateMaze","resetMesh","startLoading","console","log","wallsInOrder","alert","selectedAlgorithmId","algorithm","maze","selectedSpeedId","onAlgorithmChanged","onSpeedChanged","startWalking","clearPath","destructWalls","Fragment","src","logo","height","alt","showAlgorithmOptionsContainer","getSelectedAlgorithm","showMazeOptionsContainer","getSelectedMaze","showSpeedOptionsContainer","getSelectedSpeed","NodeState","NODE_UNVISITED","NODE_VISITED","NODE_IS_WALL","NODE_IS_SOURCE","NODE_IS_TARGET","NODE_FALLS_IN_PATH","NODE_IS_VISITING","Node","nodeState","onMouseDown","onMouseUp","interactionDone","getNodeStateClass","data-x","data-y","classes","legend","innerWidth","Legend","disabled","Grid","isMousePressed","movingSource","movingTarget","toggleWall","setNodeAsSource","setNodeAsTarget","paddingX","paddingY","innerHeight","nodes","decideNodeState","handleMouseDown","handleMouseUp","handleMouseEnter","handleMouseLeave","paddingTop","paddingRight","paddingBottom","paddingLeft","Insights","totalNodes","numberOfVisitedNodes","pathLength","timeTaken","targetReached","Copyright","distance","Infinity","mesh","unvisitedNodes","getNonWallNeighbours","neighbourPositions","getPreviousNodeInPath","prevNode","min","performDijkstra","row","initialiseMesh","visitedNodesObjects","minDist","getVisitedNodes","pathObjects","path","unshift","getNodesInPath","resetSourceAndTarget","sourceDom","targetDom","Loader","loading","parent","f","g","h","openList","closedList","abs","performAstar","sourceNode","shift","getTraversableNeighbours","found","performGreedy","queue","parents","getKey","getNonWallUnvisitedNeighbours","performBFS","runBFS","getPath","targetFound","runDFS","performDFS","letterWidth","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","lengthOfWord","word","len","Array","from","ch","toUpperCase","ltow","start","nextStart","Align","currIndex","Interact","transition","skipInteraction","getElementById","display","nextInteraction","showInteractions","startIntro","skipDom","top","offsetTop","offsetLeft","nextDom","total","parseInt","lines","alignment","getCenter","statement","words","split","currentLine","trim","k","slice","getLines","covered","line","getStartPosition","delay","querySelectorAll","timeout","zIndex","animationName","clearBoard","data","writeOnCanvas","enableSkip","writeOnCanvasDelay","enableNext","initialAnimationDelay","initialAnimation","App","animationDuration","changeInteraction","setAlgorithmId","setSpeedId","putNodeInPath","contains","getSelectedAlgorithmFunction","startTime","Date","getTime","endTime","updateMaze","s","createElement","type","async","crossOrigin","body","appendChild","gridHeight","gridWidth","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.78c47edc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\nconst visitedNodes = [];\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nlet orientation;\nconst buildWalls = (startRow, endRow, startColumn, endColumn) => {\n    orientation = !orientation;\n    if (orientation) {\n        if (startColumn >= endColumn) return;\n        const wallIndex =\n            2 *\n                (Math.floor((Math.random() * (endColumn - startColumn)) / 2) +\n                    startColumn / 2) +\n            1;\n        const pathIndex =\n            Math.floor(Math.random() * (endRow - startRow + 1)) + startRow;\n        getNeighbours(\n            new Position(pathIndex, wallIndex),\n            window.rows,\n            window.columns\n        )\n            .filter((node) => node.x === pathIndex)\n            .map((node) => visitedNodes.push(node));\n        for (let index = startRow; index <= endRow; index++) {\n            if (\n                index === pathIndex ||\n                visitedNodes.some((node) =>\n                    isEqual(node, new Position(index, wallIndex))\n                )\n            )\n                continue;\n            walls.push(new Position(index, wallIndex));\n        }\n        buildWalls(startRow, endRow, startColumn, wallIndex - 1);\n        buildWalls(startRow, endRow, wallIndex + 1, endColumn);\n    } else {\n        if (startRow >= endRow) return;\n        const wallIndex =\n            2 *\n                (Math.floor((Math.random() * (endRow - startRow)) / 2) +\n                    startRow / 2) +\n            1;\n        const pathIndex =\n            Math.floor(Math.random() * (endColumn - startColumn + 1)) +\n            startColumn;\n        getNeighbours(\n            new Position(wallIndex, pathIndex),\n            window.rows,\n            window.columns\n        )\n            .filter((node) => node.y === pathIndex)\n            .map((node) => visitedNodes.push(node));\n        for (let index = startColumn; index <= endColumn; index++) {\n            if (\n                index === pathIndex ||\n                visitedNodes.some((node) =>\n                    isEqual(node, new Position(wallIndex, index))\n                )\n            )\n                continue;\n            walls.push(new Position(wallIndex, index));\n        }\n        buildWalls(startRow, wallIndex - 1, startColumn, endColumn);\n        buildWalls(wallIndex + 1, endRow, startColumn, endColumn);\n    }\n};\n\nconst generateRecursiveDivisionMaze = (rows, columns, source, target) => {\n    walls.length = 0;\n    visitedNodes.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n    orientation = Math.random() >= 0.5;\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    buildWalls(2, rows - 1, 2, columns - 1);\n\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            (wall.y !== columns - 1 || wall.x === 1 || wall.x === rows) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateRecursiveDivisionMaze;\n","import React, { Component } from \"react\";\n\nclass NavItem extends Component {\n    state = {\n        description: this.getSelectedOptionDescription(\n            this.props.selectedOption,\n            this.props.options\n        ),\n    };\n\n    handleHover = (option) => {\n        this.setState({ description: option.description });\n    };\n\n    render() {\n        const { options, selectedOption, onChanged } = this.props;\n        const hasDescription =\n            options[0].description === undefined ? false : true;\n        const optionNamesContainerWidth = hasDescription ? \"30%\" : \"100%\";\n        let selectedOptionObject = this.getSelectedOption(\n            selectedOption,\n            options\n        );\n\n        return (\n            <div className=\"options-container\">\n                <div\n                    className=\"option-names-container\"\n                    style={{ width: optionNamesContainerWidth }}\n                >\n                    {options.map((option) => (\n                        <button\n                            key={option.id}\n                            style={{\n                                textAlign: hasDescription ? \"right\" : \"center\",\n                            }}\n                            className={\n                                option.id === selectedOption ? \"active\" : \"\"\n                            }\n                            onMouseEnter={() => this.handleHover(option)}\n                            onMouseLeave={() =>\n                                this.handleHover(selectedOptionObject)\n                            }\n                            onClick={() =>\n                                onChanged(\n                                    option.id,\n                                    option.speed === undefined\n                                        ? null\n                                        : option.speed\n                                )\n                            }\n                        >\n                            {option.name}\n                        </button>\n                    ))}\n                </div>\n                {hasDescription ? (\n                    <div\n                        className=\"option-description-container\"\n                        style={{\n                            width: \"60%\",\n                            left: optionNamesContainerWidth,\n                        }}\n                    >\n                        {this.state.description}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getSelectedOption(selectedOption, options) {\n        const option = options.filter((option) => option.id === selectedOption);\n        return option[0];\n    }\n    getSelectedOptionDescription(selectedOption, options) {\n        const option = this.getSelectedOption(selectedOption, options);\n        return option === undefined ? null : option.description;\n    }\n}\n\nexport default NavItem;\n","class Position {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nconst isEqual = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n\nconst getNeighbours = (position, rows, columns, step = 1) => {\n    const neighbours = [];\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y + step <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y + step));\n    }\n    if (\n        position.x >= 1 &&\n        position.x + step <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x + step, position.y));\n    }\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y - step >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y - step));\n    }\n    if (\n        position.x - step >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x - step, position.y));\n    }\n    return neighbours;\n};\n\nexport { isEqual, getNeighbours };\nexport default Position;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst generateBinaryTreeMaze = (rows, columns, source, target) => {\n    const walls = [];\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    for (let i = 3; i < rows - 1; i += 2) {\n        for (let j = 3; j < columns - 1; j += 2) {\n            walls.push(new Position(i, j));\n            if (Math.round(Math.random())) {\n                walls.push(new Position(i - 1, j));\n            } else {\n                walls.push(new Position(i, j - 1));\n            }\n        }\n    }\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            (wall.y !== columns - 1 || wall.x === 1 || wall.x === rows) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateBinaryTreeMaze;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\nconst visitedNodes = [];\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst connectAndMarkAsVisited = (node, neighbours, rows, columns) => {\n    neighbours.forEach((neighbour) => {\n        const position = new Position(node.x, node.y);\n        if (neighbour.x === node.x) {\n            if (neighbour.y > node.y) position.y++;\n            else position.y--;\n        } else {\n            if (neighbour.x > node.x) position.x++;\n            else position.x--;\n        }\n        visitedNodes.push(neighbour);\n        walls.push(position);\n    });\n};\n\nconst findNextNode = (currNode, rows, columns) => {\n    walls.push(currNode);\n    let neighbours = getNeighbours(currNode, rows, columns, 2).filter(\n        (node) => {\n            return (\n                !walls.some((wall) => isEqual(wall, node)) &&\n                !visitedNodes.some((visitedNode) => isEqual(visitedNode, node))\n            );\n        }\n    );\n    connectAndMarkAsVisited(currNode, neighbours, rows, columns);\n    while (neighbours.length > 0) {\n        const currNode =\n            neighbours[Math.floor(Math.random() * neighbours.length)];\n        findNextNode(currNode, rows, columns);\n        neighbours = neighbours.filter((node) => !isEqual(node, currNode));\n    }\n};\n\nconst generateDFSMaze = (rows, columns, source, target) => {\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    findNextNode(new Position(3, 3), rows, columns);\n\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            (wall.y !== columns - 1 || wall.x === 1 || wall.x === rows) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateDFSMaze;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst generateRandomWalls = (rows, columns) => {\n    for (let i = 3; i < rows - 1; i++) {\n        for (let j = 3; j < columns - 1; j++) {\n            if (Math.random() >= 0.8) walls.push(new Position(i, j));\n        }\n    }\n};\n\nconst generateRandomMaze = (rows, columns, source, target) => {\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    generateRandomWalls(rows, columns);\n    walls.sort(function () {\n        return 0.5 - Math.random();\n    });\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            (wall.y !== columns - 1 || wall.x === 1 || wall.x === rows) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateRandomMaze;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\nimport logo from \"../../logo.svg\";\nimport NavItem from \"./NavItem/navitem\";\nimport generateBinaryTreeMaze from \"../../algorithms/mazeGeneratingAlgorithms/binary_tree\";\nimport generateDFSMaze from \"../../algorithms/mazeGeneratingAlgorithms/dfs\";\nimport generateRecursiveDivisionMaze from \"../../algorithms/mazeGeneratingAlgorithms/recursive_division\";\nimport generateRandomMaze from \"../../algorithms/mazeGeneratingAlgorithms/random\";\n\nclass NavBar extends Component {\n    state = {\n        algorithms: [\n            {\n                id: \"algo-dijkstra\",\n                name: \"Dijkstra's\",\n                description: (\n                    <div>\n                        <p>\n                            Let the node at which we are starting be called the\n                            <b>initial node</b>. Let the\n                            <b>\n                                distance of node\n                                <i>Y</i>\n                            </b>\n                            be the distance from the <b> initial node</b>\n                            to\n                            <i>Y</i>. Dijkstra's algorithm will assign some\n                            initial distance values and will try to improve them\n                            step by step.\n                        </p>\n                        <ol>\n                            <li>\n                                Mark all nodes unvisited. Create a set of all\n                                the unvisited nodes called the\n                                <i>unvisited set</i>.\n                            </li>\n                            <li>\n                                Assign to every node a tentative distance value:\n                                set it to zero for our initial node and to\n                                infinity for all other nodes. Set the initial\n                                node as current.\n                            </li>\n                            <li>\n                                For the current node, consider all of its\n                                unvisited neighbours and calculate their\n                                <i>tentative</i>\n                                distances through the current node. Compare the\n                                newly calculated\n                                <i>tentative</i>\n                                distance to the current assigned value and\n                                assign the smaller one. For example, if the\n                                current node\n                                <i>A</i>\n                                is marked with a distance of 6, and the edge\n                                connecting it with a neighbour\n                                <i>B</i>\n                                has length 2, then the distance to\n                                <i>B</i>\n                                through\n                                <i>A</i>\n                                will be 6 + 2 = 8. If B was previously marked\n                                with a distance greater than 8 then change it to\n                                8. Otherwise, the current value will be kept.\n                            </li>\n                            <li>\n                                When we are done considering all of the\n                                unvisited neighbours of the current node, mark\n                                the current node as visited and remove it from\n                                the\n                                <i>unvisited set</i>. A visited node will never\n                                be checked again.\n                            </li>\n                            <li>\n                                If the destination node has been marked visited\n                                (when planning a route between two specific\n                                nodes) or if the smallest tentative distance\n                                among the nodes in the\n                                <i>unvisited set</i>\n                                is infinity (when planning a complete traversal;\n                                occurs when there is no connection between the\n                                initial node and remaining unvisited nodes),\n                                then stop. The algorithm has finished.\n                            </li>\n                            <li>\n                                Otherwise, select the unvisited node that is\n                                marked with the smallest tentative distance, set\n                                it as the new \"current node\", and go back to\n                                step 3.\n                            </li>\n                        </ol>\n                        <p>\n                            When planning a route, it is actually not necessary\n                            to wait until the destination node is \"visited\" as\n                            above: the algorithm can stop once the destination\n                            node has the smallest tentative distance among all\n                            \"unvisited\" nodes (and thus could be selected as the\n                            next \"current\").\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-a*\",\n                name: \"A*\",\n                description: (\n                    <div>\n                        <p>\n                            We create two lists – <i>Open List</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <p>\n                            1. Initialize the open list\n                            <br />\n                            2. Initialize the closed list put the starting node\n                            on the open list (you can leave its{\" \"}\n                            <strong>f</strong> at zero)\n                            <br />\n                            3. while the open list is not empty <br />\n                            a. find the node with the least <strong>\n                                f\n                            </strong>{\" \"}\n                            on the open list, call it \"q\" <br />\n                            b. pop q off the open list <br />\n                            c. generate q's 8 successors and set their parents\n                            to q <br />\n                            d. for each successor <br />\n                            i. if successor is the goal, stop search successor.\n                            <strong>g</strong> = q.<strong>g</strong> + distance\n                            between successor and q successor.<strong>h</strong>{\" \"}\n                            = distance from goal to successor (This can be done\n                            using many ways, we will discuss three heuristics-\n                            Manhattan, Diagonal and Euclidean Heuristics)\n                            successor.<strong>f</strong> = successor.\n                            <strong>g</strong> + successor.<strong>h</strong>\n                            <br />\n                            ii. if a node with the same position as successor is\n                            in the OPEN list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor <br />\n                            iii. if a node with the same position as successor\n                            is in the CLOSED list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor otherwise, add the node to the open list\n                            end (for loop) e. push q on the closed list end\n                            (while loop){\" \"}\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-greedy\",\n                name: \"Greedy\",\n                description: (\n                    <div>\n                        <p>\n                            A<b>greedy algorithm</b>\n                            is any algorithm that follows the problem-solving\n                            heuristic of making the locally optimal choice at\n                            each stage. In many problems, a greedy strategy does\n                            not usually produce an optimal solution, but\n                            nonetheless a greedy heuristic may yield locally\n                            optimal solutions that approximate a globally\n                            optimal solution in a reasonable amount of time.\n                        </p>\n                        <p>\n                            For example, a greedy strategy for the\n                            <a\n                                href=\"/wiki/Travelling_salesman_problem\"\n                                title=\"Travelling salesman problem\"\n                            >\n                                travelling salesman problem\n                            </a>\n                            (which is of a high computational complexity) is the\n                            following heuristic: \"At each step of the journey,\n                            visit the nearest unvisited city.\" This heuristic\n                            does not intend to find a best solution, but it\n                            terminates in a reasonable number of steps; finding\n                            an optimal solution to such a complex problem\n                            typically requires unreasonably many steps. In\n                            mathematical optimization, greedy algorithms\n                            optimally solve combinatorial problems having the\n                            properties of\n                            <a href=\"/wiki/Matroid\" title=\"Matroid\">\n                                matroids\n                            </a>\n                            , and give constant-factor approximations to\n                            optimization problems with submodular structure.\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-bfs\",\n                name: \"Breadth-First-Search\",\n                description: (\n                    <div>\n                        <p>\n                            Visit all the siblings before exploring the children\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-dfs\",\n                name: \"Depth-First-Search\",\n                description: (\n                    <div>\n                        <p>\n                            Visit all the children before exploring the siblings\n                        </p>\n                    </div>\n                ),\n            },\n        ],\n        mazes: [\n            { id: \"maze-none\", name: \"Create\" },\n            { id: \"maze-binary-tree\", name: \"Binary Tree\" },\n            { id: \"maze-dfs\", name: \"Depth First Search\" },\n            { id: \"maze-recursive-division\", name: \"Recursive Division\" },\n            { id: \"maze-random\", name: \"Random Maze\" },\n        ],\n        speeds: [\n            { id: \"speed-faster\", name: \"Faster\", speed: 10 },\n            { id: \"speed-fast\", name: \"Fast\", speed: 15 },\n            { id: \"speed-normal\", name: \"Normal\", speed: 20 },\n            { id: \"speed-slow\", name: \"Slow\", speed: 30 },\n            { id: \"speed-slower\", name: \"Slower\", speed: 40 },\n        ],\n        selectedMazeId: \"maze-none\",\n    };\n\n    constructMaze = (walls) => {\n        for (let i = 0; i < walls.length; i++) {\n            const wall = walls[i];\n            setTimeout(() => {\n                const nodeDom = document.querySelector(\n                    `#node-${wall.x}-${wall.y}`\n                );\n                nodeDom.classList.remove(\"node-unvisited\");\n                nodeDom.classList.add(\"node-wall\");\n                if (i === walls.length - 1) {\n                    setTimeout(() => {\n                        this.props.stopLoading();\n                        this.props.onMazeCreated(walls, []);\n                    }, this.props.speed);\n                }\n            }, (this.props.speed * i) / 2);\n        }\n    };\n\n    getSelectedMazeFunction = (mazeId) => {\n        switch (mazeId) {\n            case \"maze-binary-tree\":\n                return generateBinaryTreeMaze;\n            case \"maze-dfs\":\n                return generateDFSMaze;\n            case \"maze-recursive-division\":\n                return generateRecursiveDivisionMaze;\n            case \"maze-random\":\n                return generateRandomMaze;\n            case \"maze-none\":\n                return -1;\n            default:\n                return null;\n        }\n    };\n\n    setMazeId = (selectedMazeId) => {\n        const generateMaze = this.getSelectedMazeFunction(selectedMazeId);\n        if (generateMaze === null) {\n            alert(\"Coming Soon !!!\");\n            return;\n        }\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.remove(\"show\");\n        this.props.resetMesh(); // clear the maze\n        this.setState({ selectedMazeId });\n        if (generateMaze === -1) return;\n        this.props.startLoading();\n        console.log(\"Generate Maze : \", selectedMazeId);\n        const wallsInOrder = generateMaze(\n            this.props.rows,\n            this.props.columns,\n            this.props.source,\n            this.props.target\n        );\n        this.constructMaze(wallsInOrder);\n    };\n\n    showAlgorithmOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showMazeOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showSpeedOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    getSelectedAlgorithm(selectedAlgorithmId) {\n        const algorithm = this.state.algorithms.filter(\n            (algorithm) => algorithm.id === selectedAlgorithmId\n        );\n        return algorithm[0];\n    }\n\n    getSelectedMaze(selectedMazeId) {\n        const maze = this.state.mazes.filter(\n            (maze) => maze.id === selectedMazeId\n        );\n        return maze[0];\n    }\n\n    getSelectedSpeed(selectedSpeedId) {\n        const speed = this.state.speeds.filter(\n            (speed) => speed.id === selectedSpeedId\n        );\n        return speed[0];\n    }\n\n    render() {\n        const {\n            selectedAlgorithmId,\n            selectedSpeedId,\n            onAlgorithmChanged,\n            onSpeedChanged,\n            startWalking,\n            clearPath,\n            destructWalls,\n            resetMesh,\n        } = this.props;\n        return (\n            <React.Fragment>\n                <nav className=\"navbar-custom\">\n                    <span className=\"brand\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"logo\"\n                        />\n                        <span className=\"my-auto\">Walk to the Destination</span>\n                    </span>\n                    <div className=\"actions-container\">\n                        <button id=\"btn-clear-path\" onClick={() => clearPath()}>\n                            <span>Clear Path</span>\n                            <i className=\"fas fa-eraser\"></i>\n                        </button>\n                        <button\n                            id=\"btn-desctruct-walls\"\n                            onClick={() => destructWalls()}\n                        >\n                            <span>Destruct Walls</span>\n                            <i className=\"fas fa-snowplow\"></i>\n                        </button>\n                        <button id=\"btn-reset-mesh\" onClick={() => resetMesh()}>\n                            <span>Reset Mesh</span>\n                            <i className=\"fas fa-trash-restore\"></i>\n                        </button>\n                        <button\n                            id=\"btn-start-walking\"\n                            onClick={() => startWalking()}\n                        >\n                            <span>Start Walking</span>\n                            <i className=\"fas fa-play-circle\"></i>\n                        </button>\n                    </div>\n                    <div className=\"walking-options\">\n                        <ul>\n                            <li>\n                                <button\n                                    className=\"btn-algorithm\"\n                                    onClick={this.showAlgorithmOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedAlgorithm(\n                                                selectedAlgorithmId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Algorithm\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-maze\"\n                                    onClick={this.showMazeOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedMaze(\n                                                this.state.selectedMazeId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Maze\n                                    <i className=\"fab fa-magento ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-speed\"\n                                    onClick={this.showSpeedOptionsContainer}\n                                >\n                                    Speed :{\" \"}\n                                    <span>\n                                        {\n                                            this.getSelectedSpeed(\n                                                selectedSpeedId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    <i className=\"fas fa-tachometer-alt\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"algorithm-options-container\">\n                    <NavItem\n                        options={this.state.algorithms}\n                        selectedOption={selectedAlgorithmId}\n                        onChanged={onAlgorithmChanged}\n                    />\n                </div>\n                <div className=\"maze-options-container\">\n                    <NavItem\n                        options={this.state.mazes}\n                        selectedOption={this.state.selectedMazeId}\n                        onChanged={this.setMazeId}\n                    />\n                </div>\n                <div className=\"speed-options-container\">\n                    <NavItem\n                        options={this.state.speeds}\n                        selectedOption={selectedSpeedId}\n                        onChanged={onSpeedChanged}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default NavBar;\n","const NodeState = {\n    NODE_UNVISITED: 0,\n    NODE_VISITED: 1,\n    NODE_IS_WALL: -1,\n    NODE_IS_SOURCE: 10,\n    NODE_IS_TARGET: 100,\n    NODE_FALLS_IN_PATH: 50,\n    NODE_IS_VISITING: 2,\n};\nexport default NodeState;\n","import React, { Component } from \"react\";\nimport \"./node.css\";\nimport NodeState from \"./node_state\";\nclass Node extends Component {\n    render() {\n        const {\n            nodeState,\n            position,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onMouseLeave,\n            interactionDone,\n        } = this.props;\n        if (onMouseEnter === undefined) {\n            return (\n                <div className={this.getNodeStateClass(nodeState)}>\n                    {/* <div></div> */}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    className={this.getNodeStateClass(\n                        nodeState,\n                        interactionDone\n                    )}\n                    id={`node-${position.x}-${position.y}`}\n                    data-x={position.x}\n                    data-y={position.y}\n                    onMouseDown={() => onMouseDown(nodeState, position)}\n                    onMouseUp={() => onMouseUp(nodeState, position)}\n                    onMouseEnter={() => onMouseEnter(nodeState, position)}\n                    onMouseLeave={() => onMouseLeave(nodeState, position)}\n                >\n                    {/* <div></div> */}\n                </div>\n            );\n        }\n    }\n\n    getNodeStateClass(nodeState, interactionDone) {\n        let classes = \"\";\n        if (!interactionDone && !this.props.legend && window.innerWidth > 950)\n            classes += \"node-circle \";\n        classes += \"node node-\";\n        switch (nodeState) {\n            case NodeState.NODE_UNVISITED:\n                classes += \"unvisited\";\n                break;\n            case NodeState.NODE_VISITED:\n                classes += \"visited\";\n                break;\n            case NodeState.NODE_IS_WALL:\n                classes += \"wall\";\n                break;\n            case NodeState.NODE_IS_SOURCE:\n                classes += \"source\";\n                break;\n            case NodeState.NODE_IS_TARGET:\n                classes += \"target\";\n                break;\n            default:\n                classes += \"unvisited\";\n                break;\n        }\n        return classes;\n    }\n}\n\nexport default Node;\n","import React from \"react\";\nimport \"./legend.css\";\nimport Node from \"../Node/node\";\nimport Position from \"../../helper/position\";\nimport NodeState from \"../Node/node_state\";\n\nconst Legend = () => {\n    return (\n        <section className=\"legend-container\">\n            <ul>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_UNVISITED}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                            disabled\n                        />\n                        <span className=\"ml-1\">Unvisited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_VISITED}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Visited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_WALL}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Wall</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_SOURCE}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Source</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_TARGET}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Target</span>\n                    </div>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default Legend;\n","import React, { Component } from \"react\";\nimport Node from \"../Node/node\";\nimport NodeState from \"../Node/node_state\";\nimport Position from \"../../helper/position\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n    state = {\n        isMousePressed: false,\n        movingSource: false,\n        movingTarget: false,\n    };\n\n    handleMouseUp(nodeState, position) {\n        this.setState({ isMousePressed: false });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseUp | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: false });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: false });\n        } else {\n            // do nothing\n        }\n    }\n    handleMouseDown(nodeState, position) {\n        this.setState({ isMousePressed: true });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseDown | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: true });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: true });\n        } else {\n            this.props.toggleWall(position);\n        }\n    }\n    handleMouseEnter(nodeState, position) {\n        if (this.state.isMousePressed) {\n            // console.log(\n            //     `(${position.x}, ${position.y}) : mouseEnter | pressed=${this.state.isMousePressed}`\n            // );\n            if (this.state.movingSource) {\n                // TODO: change nodeState to source\n                this.props.setNodeAsSource(position);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to target\n                this.props.setNodeAsTarget(position);\n            } else {\n                // TODO: toggleWall()\n                // console.log(position);\n                this.props.toggleWall(position);\n            }\n        }\n    }\n    handleMouseLeave(nodeState, position) {\n        // if (this.state.isMousePressed) {\n        //     console.log(\n        //         `(${position.x}, ${position.y}) : mouseLeave | pressed=${this.state.isMousePressed}`\n        //     );\n        //     if (nodeState === NodeState.NODE_IS_SOURCE) {\n        //         // TODO: change nodeState to unvisited\n        //     } else if (nodeState === NodeState.NODE_IS_TARGET) {\n        //         // TODO: change nodestate to unvisited\n        //     } else {\n        //         // do nothing\n        //     }\n        // }\n    }\n\n    decideNodeState(x, y, source, target, walls, visitedNodes) {\n        if (x === source.x && y === source.y) {\n            return NodeState.NODE_IS_SOURCE;\n        } else if (x === target.x && y === target.y) {\n            return NodeState.NODE_IS_TARGET;\n        } else if (\n            walls.some((position) => position.x === x && position.y === y)\n        ) {\n            return NodeState.NODE_IS_WALL;\n        } else if (\n            visitedNodes.some(\n                (position) => position.x === x && position.y === y\n            )\n        ) {\n            return NodeState.NODE_VISITED;\n        }\n        return NodeState.NODE_UNVISITED;\n    }\n\n    render() {\n        const {\n            rows,\n            columns,\n            source,\n            target,\n            walls,\n            visitedNodes,\n            interactionDone,\n        } = this.props;\n        const paddingX = (window.innerWidth - columns * 20) / 2;\n        const paddingY = (window.innerHeight - 190 - rows * 20) / 2;\n        const nodes = [];\n\n        for (var x = 1; x <= rows; x++) {\n            for (var y = 1; y <= columns; y++) {\n                const key = \"node-\" + x + \"-\" + y;\n                const nodeState = this.decideNodeState(\n                    x,\n                    y,\n                    source,\n                    target,\n                    walls,\n                    visitedNodes\n                );\n\n                nodes.push(\n                    <Node\n                        key={key}\n                        position={new Position(x, y)}\n                        id={key}\n                        nodeState={nodeState}\n                        interactionDone={interactionDone}\n                        onMouseDown={(nodeState, position) =>\n                            this.handleMouseDown(nodeState, position)\n                        }\n                        onMouseUp={(nodeState, position) =>\n                            this.handleMouseUp(nodeState, position)\n                        }\n                        onMouseEnter={(nodeState, position) =>\n                            this.handleMouseEnter(nodeState, position)\n                        }\n                        onMouseLeave={(nodeState, position) =>\n                            this.handleMouseLeave(nodeState, position)\n                        }\n                    />\n                );\n            }\n        }\n        return (\n            <section\n                className=\"grid-container\"\n                style={{\n                    paddingTop: paddingY,\n                    paddingRight: paddingX,\n                    paddingBottom: paddingY,\n                    paddingLeft: paddingX,\n                }}\n            >\n                {nodes}\n            </section>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./insights.css\";\n\nconst Insights = (props) => {\n    const {\n        totalNodes,\n        walls,\n        numberOfVisitedNodes,\n        pathLength,\n        timeTaken,\n        targetReached,\n    } = props;\n    return (\n        <section className=\"insights-container\">\n            <div>\n                {totalNodes ? (\n                    <span className=\"insights insights-total\">\n                        Total Nodes: <strong>{totalNodes}</strong>\n                    </span>\n                ) : null}\n                {walls ? (\n                    <span className=\"insights insights-walls\">\n                        Walls: <strong>{walls}</strong>\n                    </span>\n                ) : null}\n                {numberOfVisitedNodes ? (\n                    <span className=\"insights insights-visited\">\n                        Visited Nodes: <strong>{numberOfVisitedNodes}</strong>\n                    </span>\n                ) : null}\n                {pathLength && targetReached ? (\n                    <span className=\"insights insights-path\">\n                        Length of Path: <strong>{pathLength}</strong>\n                    </span>\n                ) : null}\n                {timeTaken ? (\n                    <span className=\"insights insights-time\">\n                        Time Taken:{\" \"}\n                        <strong>\n                            {timeTaken >= 1000 ? (\n                                <React.Fragment>\n                                    {timeTaken / 1000} s\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>{timeTaken} ms</React.Fragment>\n                            )}\n                        </strong>\n                    </span>\n                ) : null}\n                {!targetReached && numberOfVisitedNodes ? (\n                    <span className=\"insights insights-target-not-reached\">\n                        <strong>Target NOT Reachable</strong>\n                    </span>\n                ) : null}\n            </div>\n        </section>\n    );\n};\n\nexport default Insights;\n","import React from \"react\";\nimport \"./copyright.css\";\nconst Copyright = () => {\n    return (\n        <section className=\"copyright-container\">\n            <div className=\"github-links\">\n                <a href=\"https://github.com/shantanu0323\">\n                    <i className=\"fab fa-github-square\"></i>\n                </a>\n            </div>\n            <div className=\"copyright\">\n                Made with <i className=\"fas fa-heart\"></i> by{\" \"}\n                <a href=\"https://shantanu0323.github.io\">Shantanu Pramanik</a>\n            </div>\n            <div className=\"social-links\">\n                <a href=\"https://www.linkedin.com/in/shantanu-pramanik/\">\n                    <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"https://www.facebook.com/shantanu.pramanik1\">\n                    <i className=\"fab fa-facebook-square\"></i>\n                </a>\n                <a href=\"https://www.twitter.com/shantanu0323/\">\n                    <i className=\"fab fa-twitter-square\"></i>\n                </a>\n                <a href=\"https://www.instagram.com/shantanu0323/\">\n                    <i className=\"fab fa-instagram-square\"></i>\n                </a>\n            </div>\n        </section>\n    );\n};\n\nexport default Copyright;\n","import NodeState from \"../components/Node/node_state\";\nimport Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nclass Node {\n    constructor(\n        position,\n        distance = Infinity,\n        nodeState = NodeState.NODE_UNVISITED\n    ) {\n        this.position = position;\n        this.distance = distance;\n        this.nodeState = nodeState;\n    }\n}\n\nconst mesh = [];\nlet unvisitedNodes = [];\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    mesh.length = 0;\n    unvisitedNodes.length = 0;\n    for (let i = 1; i <= window.rows; i++) {\n        const row = [];\n        for (let j = 1; j <= window.columns; j++) {\n            const node = new Node(new Position(i, j));\n            if (isEqual(node.position, source)) {\n                node.nodeState = NodeState.NODE_IS_SOURCE;\n                node.distance = 0;\n            } else if (isEqual(node.position, target)) {\n                node.nodeState = NodeState.NODE_IS_TARGET;\n            }\n            unvisitedNodes.push(node);\n            row[j] = node;\n        }\n        mesh[i] = row;\n    }\n    walls.forEach((position) => {\n        mesh[position.x][position.y].nodeState = NodeState.NODE_IS_WALL;\n    });\n};\n\nconst getNonWallNeighbours = (node) => {\n    const neighbourPositions = getNeighbours(\n        node.position,\n        window.rows,\n        window.columns\n    );\n    const neighbours = [];\n    neighbourPositions.map((position) => {\n        const node = mesh[position.x][position.y];\n        if (node.nodeState !== NodeState.NODE_IS_WALL) {\n            neighbours.push(node);\n            return true;\n        }\n        return false;\n    });\n\n    return neighbours;\n};\n\nconst getPreviousNodeInPath = (currNode) => {\n    const neighbours = getNonWallNeighbours(currNode).filter(\n        (node) =>\n            mesh[node.position.x][node.position.y].nodeState ===\n            NodeState.NODE_VISITED\n    );\n    let min = Infinity;\n    let prevNode;\n    for (let i = 0; i < neighbours.length; i++) {\n        const node = neighbours[i];\n        if (node.distance < min) {\n            min = node.distance;\n            prevNode = node;\n        }\n    }\n    return prevNode;\n};\n\nconst getNodesInPath = (visitedNodes) => {\n    const path = [];\n    let currNode = visitedNodes[visitedNodes.length - 1]; // target\n    while (currNode.distance > 1) {\n        currNode = getPreviousNodeInPath(currNode);\n        path.unshift(currNode);\n    }\n    return path;\n};\n\nconst getVisitedNodes = (target) => {\n    const visitedNodes = [];\n\n    while (unvisitedNodes.length > 0) {\n        let minDist = Infinity;\n        let currNode = undefined;\n        for (let i = 0; i < unvisitedNodes.length; i++) {\n            if (unvisitedNodes[i].distance < minDist) {\n                minDist = unvisitedNodes[i].distance;\n                currNode = unvisitedNodes[i];\n            }\n        }\n        if (currNode === undefined) {\n            console.log(\"Target NOT Reachable\");\n            break;\n        }\n\n        visitedNodes.push(currNode);\n        unvisitedNodes = unvisitedNodes.filter(\n            (node) => !isEqual(node.position, currNode.position)\n        );\n        if (isEqual(currNode.position, target)) {\n            console.log(\"TARGET REACHED\");\n            break;\n        }\n        currNode.nodeState =\n            currNode.nodeState === NodeState.NODE_IS_SOURCE\n                ? NodeState.NODE_IS_SOURCE\n                : NodeState.NODE_VISITED;\n\n        getNonWallNeighbours(currNode).forEach((node) => {\n            const alt = currNode.distance + 1;\n            node.distance = alt < node.distance ? alt : node.distance;\n        });\n    }\n\n    return visitedNodes;\n};\n\nconst performDijkstra = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    // perform dijkstra(graph, source, target) on the graph and get the visited nodes in order\n    const visitedNodesObjects = getVisitedNodes(target);\n    const pathObjects = getNodesInPath(visitedNodesObjects);\n    const visitedNodes = [];\n    const path = [];\n    visitedNodesObjects.map((node) => visitedNodes.push(node.position));\n    pathObjects.map((node) => path.push(node.position));\n    return { visitedNodes, path };\n};\n\nexport default performDijkstra;\n","const resetSourceAndTarget = () => {\n    const sourceDom = document.querySelector(\".node.node-source\");\n    sourceDom.classList.remove(\"path-to-top\");\n    sourceDom.classList.remove(\"path-to-right\");\n    sourceDom.classList.remove(\"path-to-bottom\");\n    sourceDom.classList.remove(\"path-to-left\");\n\n    const targetDom = document.querySelector(\".node.node-target\");\n    targetDom.classList.remove(\"path-to-top\");\n    targetDom.classList.remove(\"path-to-right\");\n    targetDom.classList.remove(\"path-to-bottom\");\n    targetDom.classList.remove(\"path-to-left\");\n};\n\nexport default resetSourceAndTarget;\n","import React from \"react\";\nimport \"./loader.css\";\nconst Loader = (props) => {\n    const classes = props.loading\n        ? \"loader-container show\"\n        : \"loader-container hide\";\n    return (\n        <div className={classes}>\n            {props.interactionDone ? (\n                <React.Fragment>\n                    <div className=\"top-bar\"></div>\n                    <div className=\"right-bar\"></div>\n                    <div className=\"bottom-bar\"></div>\n                    <div className=\"left-bar\"></div>\n                </React.Fragment>\n            ) : null}\n        </div>\n    );\n};\n\nexport default Loader;\n","import NodeState from \"../components/Node/node_state\";\nimport Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nclass Node {\n    constructor(position, nodeState = NodeState.NODE_UNVISITED) {\n        this.position = position;\n        this.parent = null;\n        this.f = Infinity;\n        this.g = Infinity;\n        this.h = Infinity;\n        this.nodeState = nodeState;\n    }\n}\n\nlet openList = [];\nconst closedList = [];\n\nconst distance = (a, b) => {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n    // return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    openList.length = 0;\n    closedList.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n\n    const sourceNode = new Node(source, NodeState.NODE_IS_SOURCE);\n    sourceNode.g = 0;\n    sourceNode.h = distance(source, target);\n    sourceNode.f = sourceNode.h;\n    openList.push(sourceNode);\n};\n\nconst getTraversableNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (position) =>\n                !(\n                    walls.some((wall) => isEqual(wall, position)) ||\n                    closedList.some((node) => isEqual(node.position, position))\n                )\n        )\n        .map((position) => {\n            neighbours.push(new Node(new Position(position.x, position.y)));\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst nodeWithLeastF = () => {\n    openList.sort((a, b) => {\n        return a.f === b.f ? a.h > b.h : a.f > b.f;\n    });\n    return openList[0];\n};\n\nconst performAstar = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    // add source to the openList\n    initialiseMesh(rows, columns, source, target, walls);\n    // START LOOP\n    // let k = 2000;\n    while (\n        openList.length > 0 &&\n        closedList.length < rows * columns - walls.length\n    ) {\n        // k--;\n        // console.log(closedList.length);\n        // CURRENT = node in the openList with the least f_cost\n        const currNode = nodeWithLeastF();\n        // console.log(\"CURRENT: \", JSON.parse(JSON.stringify(currNode)));\n        // remove current from the openList\n        openList.shift();\n        // add current to the closedList\n        closedList.push(currNode);\n        // console.log(\"OPEN: \", JSON.parse(JSON.stringify(openList)));\n        // console.log(\"CLOSED: \", JSON.parse(JSON.stringify(closedList)));\n\n        // if current = target then return\n        if (isEqual(currNode.position, target)) break;\n\n        // FOREACH neighbour of the CURRENT\n        getTraversableNeighbours(currNode.position, walls).map((neighbour) => {\n            // if neighbour is not traversable or neighbour in the closedList\n            // then skip to the next neighbour\n            // set the f_cost of the neighbour\n            neighbour.g =\n                currNode.g + distance(neighbour.position, currNode.position);\n            neighbour.h = distance(neighbour.position, target);\n            neighbour.f = neighbour.g + neighbour.h;\n            // set parent of the neighbour to the current\n            neighbour.parent = currNode;\n            // console.log(\n            //     `Neighbour(${neighbour.position.x},${neighbour.position.y}): `,\n            //     JSON.parse(JSON.stringify(neighbour))\n            // );\n            // if new path to neighbour is shorter or if the neighbour is NOT in openList\n            let found = false;\n            for (let i = 0; i < openList.length; i++) {\n                if (\n                    isEqual(openList[i].position, neighbour.position) &&\n                    neighbour.f < openList[i].f\n                ) {\n                    openList[i] = neighbour;\n                    found = true;\n                    break;\n                }\n            }\n            // if neighbour is not in openlist then add it to openList\n            if (!found) {\n                openList.push(neighbour);\n            }\n            return true;\n        });\n\n        // END LOOP\n    }\n    // console.log(\"CLOSED: \", JSON.parse(JSON.stringify(closedList)));\n    const visitedNodes = [];\n    closedList\n        .filter(\n            (node) =>\n                node.nodeState !== NodeState.NODE_IS_SOURCE &&\n                node.nodeState !== NodeState.NODE_IS_TARGET\n        )\n        .map((node) => visitedNodes.push(node.position));\n    const path = [];\n    let node = closedList[closedList.length - 1];\n    while (node !== null) {\n        if (!isEqual(node.position, source) && !isEqual(node.position, target))\n            path.unshift(node.position);\n        node = node.parent;\n    }\n    return { visitedNodes, path };\n};\n\nexport default performAstar;\n","import NodeState from \"../components/Node/node_state\";\nimport Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nclass Node {\n    constructor(position, nodeState = NodeState.NODE_UNVISITED) {\n        this.position = position;\n        this.parent = null;\n        this.f = Infinity;\n        this.nodeState = nodeState;\n    }\n}\n\nlet openList = [];\nconst closedList = [];\n\nconst distance = (a, b) => {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n    // return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    openList.length = 0;\n    closedList.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n\n    const sourceNode = new Node(source, NodeState.NODE_IS_SOURCE);\n    sourceNode.f = distance(source, target);\n    openList.push(sourceNode);\n};\n\nconst getTraversableNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (position) =>\n                !(\n                    walls.some((wall) => isEqual(wall, position)) ||\n                    closedList.some((node) => isEqual(node.position, position))\n                )\n        )\n        .map((position) => {\n            neighbours.push(new Node(new Position(position.x, position.y)));\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst nodeWithLeastF = () => {\n    openList.sort((a, b) => {\n        return a.f > b.f;\n    });\n    return openList[0];\n};\n\nconst performGreedy = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    // add source to the openList\n    initialiseMesh(rows, columns, source, target, walls);\n    // START LOOP\n    // let k = 2000;\n    while (\n        openList.length > 0 &&\n        closedList.length < rows * columns - walls.length\n    ) {\n        // k--;\n        // console.log(closedList.length);\n        // CURRENT = node in the openList with the least f_cost\n        const currNode = nodeWithLeastF();\n        // console.log(\"CURRENT: \", JSON.parse(JSON.stringify(currNode)));\n        // remove current from the openList\n        openList.shift();\n        // add current to the closedList\n        closedList.push(currNode);\n        // console.log(\"OPEN: \", JSON.parse(JSON.stringify(openList)));\n        // console.log(\"CLOSED: \", JSON.parse(JSON.stringify(closedList)));\n\n        // if current = target then return\n        if (isEqual(currNode.position, target)) break;\n\n        // FOREACH neighbour of the CURRENT\n        getTraversableNeighbours(currNode.position, walls).map((neighbour) => {\n            // if neighbour is not traversable or neighbour in the closedList\n            // then skip to the next neighbour\n            // set the f_cost of the neighbour\n            neighbour.f = distance(neighbour.position, target);\n            // set parent of the neighbour to the current\n            neighbour.parent = currNode;\n            // console.log(\n            //     `Neighbour(${neighbour.position.x},${neighbour.position.y}): `,\n            //     JSON.parse(JSON.stringify(neighbour))\n            // );\n            // if new path to neighbour is shorter or if the neighbour is NOT in openList\n            let found = false;\n            for (let i = 0; i < openList.length; i++) {\n                if (\n                    isEqual(openList[i].position, neighbour.position) &&\n                    neighbour.f < openList[i].f\n                ) {\n                    openList[i] = neighbour;\n                    found = true;\n                    break;\n                }\n            }\n            // if neighbour is not in openlist then add it to openList\n            if (!found) {\n                openList.push(neighbour);\n            }\n            return true;\n        });\n\n        // END LOOP\n    }\n    // console.log(\"CLOSED: \", JSON.parse(JSON.stringify(closedList)));\n    const visitedNodes = [];\n    closedList\n        .filter(\n            (node) =>\n                node.nodeState !== NodeState.NODE_IS_SOURCE &&\n                node.nodeState !== NodeState.NODE_IS_TARGET\n        )\n        .map((node) => visitedNodes.push(node.position));\n    const path = [];\n    let node = closedList[closedList.length - 1];\n    while (node !== null) {\n        if (!isEqual(node.position, source) && !isEqual(node.position, target))\n            path.unshift(node.position);\n        node = node.parent;\n    }\n    return { visitedNodes, path };\n};\n\nexport default performGreedy;\n","import { isEqual, getNeighbours } from \"../helper/position\";\n\nlet visitedNodes = [];\nconst queue = [];\nconst parents = {};\n\nconst getKey = (position) => {\n    return `node-${position.x}-${position.y}`;\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    window.source = source;\n    window.target = target;\n    visitedNodes.length = 0;\n    queue.length = 0;\n    queue.push(source);\n    parents[getKey(source)] = null;\n};\n\nconst getNonWallUnvisitedNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (neighbour) =>\n                !walls.some((wall) => isEqual(wall, neighbour)) &&\n                !queue.some((queue) => isEqual(queue, neighbour)) &&\n                !visitedNodes.some((visitedNode) =>\n                    isEqual(visitedNode, neighbour)\n                ) &&\n                !isEqual(neighbour, window.source)\n        )\n        .map((neighbour) => {\n            parents[getKey(neighbour)] = node;\n            neighbours.push(neighbour);\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst runBFS = (target, walls) => {\n    while (queue.length > 0) {\n        const currNode = queue[0];\n        visitedNodes.push(currNode);\n\n        if (isEqual(currNode, target)) return;\n\n        queue.shift();\n        getNonWallUnvisitedNeighbours(currNode, walls).map((neighbour) =>\n            queue.push(neighbour)\n        );\n    }\n};\n\nconst getPath = () => {\n    const path = [];\n    let currNode = window.target;\n    if (!isEqual(visitedNodes[visitedNodes.length - 1], currNode)) return [];\n    while (parents[getKey(currNode)] !== null) {\n        path.unshift(parents[getKey(currNode)]);\n        currNode = parents[getKey(currNode)];\n    }\n    path.shift(); // to remove source\n    return path;\n};\n\nconst performBFS = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    runBFS(target, walls);\n    const path = getPath();\n    return { visitedNodes, path };\n};\n\nexport default performBFS;\n","import { isEqual, getNeighbours } from \"../helper/position\";\n\nlet visitedNodes = [];\nlet parents = {};\nlet targetFound = false;\n\nconst getKey = (position) => {\n    return `node-${position.x}-${position.y}`;\n};\n\nconst initialiseMesh = (rows, columns, source, target) => {\n    window.rows = rows;\n    window.columns = columns;\n    window.source = source;\n    window.target = target;\n    visitedNodes.length = 0;\n    parents = {};\n    targetFound = false;\n    parents[getKey(source)] = null;\n};\n\nconst getNonWallUnvisitedNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (neighbour) =>\n                !walls.some((wall) => isEqual(wall, neighbour)) &&\n                !visitedNodes.some((visitedNode) =>\n                    isEqual(visitedNode, neighbour)\n                ) &&\n                !isEqual(neighbour, window.source)\n        )\n        .map((neighbour) => {\n            parents[getKey(neighbour)] = node;\n            neighbours.push(neighbour);\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst runDFS = (currNode, walls) => {\n    if (targetFound) return;\n    if (isEqual(currNode, window.target)) {\n        visitedNodes.push(currNode);\n        targetFound = true;\n        return;\n    }\n    visitedNodes.push(currNode);\n    const neighbours = getNonWallUnvisitedNeighbours(currNode, walls);\n    while (neighbours.length > 0 && !targetFound) {\n        runDFS(neighbours[0], walls);\n        neighbours.shift();\n    }\n};\n\nconst getPath = () => {\n    const path = [];\n    let currNode = window.target;\n    if (!isEqual(visitedNodes[visitedNodes.length - 1], currNode)) return [];\n    while (parents[getKey(currNode)] !== null) {\n        path.unshift(parents[getKey(currNode)]);\n        currNode = parents[getKey(currNode)];\n    }\n    path.shift(); // to remove source\n    return path;\n};\n\nconst performDFS = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    runDFS(source, walls);\n    const path = getPath();\n    return { visitedNodes, path };\n};\n\nexport default performDFS;\n","import Position from \"./position\";\nconst letterWidth = {\n    A: 5,\n    B: 5,\n    C: 4,\n    D: 5,\n    E: 4,\n    F: 4,\n    G: 5,\n    H: 5,\n    I: 4,\n    J: 5,\n    K: 5,\n    L: 4,\n    M: 6,\n    N: 6,\n    O: 5,\n    P: 5,\n    Q: 6,\n    R: 5,\n    S: 5,\n    T: 4,\n    U: 5,\n    V: 6,\n    W: 6,\n    X: 6,\n    Y: 6,\n    Z: 5,\n    \" \": 3,\n    \"\": 0,\n    \"^\": 4,\n    \"!\": 4,\n    \"-\": 8,\n    \"+\": 11,\n    \"|\": 31,\n};\n\nconst lengthOfWord = (word) => {\n    let len = 0;\n    Array.from(word).forEach((ch) => {\n        len += letterWidth[ch.toUpperCase()];\n    });\n    len--;\n    return len;\n};\n\nconst ltow = (ch, start = new Position(1, 1)) => {\n    const walls = [];\n    walls.length = 0;\n    let i;\n    let nextStart = start;\n    switch (ch) {\n        case \"A\":\n            for (i = 4; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x, start.y + 1));\n            walls.push(new Position(start.x, start.y + 2));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            walls.push(new Position(start.x + 2, start.y + 1));\n            walls.push(new Position(start.x + 2, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"A\"];\n            break;\n        case \"B\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 2, start.y + i));\n            walls.push(new Position(start.x + 3, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"B\"];\n            break;\n        case \"C\":\n            walls.push(new Position(start.x, start.y + 1));\n            walls.push(new Position(start.x, start.y + 2));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"C\"];\n            break;\n        case \"D\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"D\"];\n            break;\n        case \"E\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 2, start.y + 1));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"E\"];\n            break;\n        case \"F\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 2, start.y + 1));\n            nextStart.y = start.y + letterWidth[\"F\"];\n            break;\n        case \"G\":\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            for (i = 3; i > 1; i--)\n                walls.push(new Position(start.x + i, start.y + 3));\n            walls.push(new Position(start.x + 2, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"G\"];\n            break;\n        case \"H\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 2, start.y + i));\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            nextStart.y = start.y + letterWidth[\"H\"];\n            break;\n        case \"I\":\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + 1));\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"I\"];\n            break;\n        case \"J\":\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            walls.push(new Position(start.x + 3, start.y));\n            nextStart.y = start.y + letterWidth[\"J\"];\n            break;\n        case \"K\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 0; i < 3; i++) {\n                walls.push(new Position(start.x + 2 + i, start.y + 1 + i));\n                walls.push(new Position(start.x + 2 - i, start.y + 1 + i));\n            }\n            nextStart.y = start.y + letterWidth[\"K\"];\n            break;\n        case \"L\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            i--;\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"L\"];\n            break;\n        case \"M\":\n            for (i = 4; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x, start.y + 1));\n            walls.push(new Position(start.x + 1, start.y + 2));\n            walls.push(new Position(start.x + 2, start.y + 2));\n            walls.push(new Position(start.x, start.y + 3));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"M\"];\n            break;\n        case \"N\":\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + i));\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"N\"];\n            break;\n        case \"O\":\n            walls.push(new Position(start.x, start.y + 2));\n            walls.push(new Position(start.x, start.y + 1));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            for (i = 3; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y + 3));\n            nextStart.y = start.y + letterWidth[\"O\"];\n            break;\n        case \"P\":\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 2, start.y + i));\n            nextStart.y = start.y + letterWidth[\"P\"];\n            break;\n        case \"Q\":\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            for (i = 3; i > 0; i--)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            for (i = 2; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + i));\n            nextStart.y = start.y + letterWidth[\"Q\"];\n            break;\n        case \"R\":\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 2, start.y + i));\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x + 2 + i, start.y + 1 + i));\n            nextStart.y = start.y + letterWidth[\"R\"];\n            break;\n        case \"S\":\n            for (i = 3; i > 0; i--)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 2, start.y + i));\n            walls.push(new Position(start.x + 3, start.y + 3));\n            for (i = 2; i >= 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"S\"];\n            break;\n        case \"T\":\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 1));\n            nextStart.y = start.y + letterWidth[\"T\"];\n            break;\n        case \"U\":\n            for (i = 0; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            for (i = 3; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 3));\n            nextStart.y = start.y + letterWidth[\"U\"];\n            break;\n        case \"V\":\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++) {\n                walls.push(new Position(start.x + 2 + i, start.y + i));\n                walls.push(new Position(start.x + 2 + i, start.y + 4 - i));\n            }\n            for (i = 2; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"V\"];\n            break;\n        case \"W\":\n            for (i = 0; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i - 1, start.y + 2));\n            walls.push(new Position(start.x + i - 2, start.y + 2));\n            walls.push(new Position(start.x + i, start.y + 3));\n            for (i = 3; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"W\"];\n            break;\n        case \"X\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + i));\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 4 - i));\n            nextStart.y = start.y + letterWidth[\"X\"];\n            break;\n        case \"Y\":\n            for (i = 0; i < 3; i++) {\n                walls.push(new Position(start.x + i, start.y + i));\n                walls.push(new Position(start.x + i, start.y + 4 - i));\n            }\n            for (i = 3; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"Y\"];\n            break;\n        case \"Z\":\n            for (i = 0; i < 4; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 4 - i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"Z\"];\n            break;\n        case \" \":\n            nextStart.y = start.y + letterWidth[\" \"];\n            break;\n        case \"^\":\n            for (i = start.x + 6; i > 1; i--)\n                walls.push(new Position(i, start.y));\n            for (i = 1; i <= start.x + 2; i++) {\n                walls.push(new Position(i, start.y - i + 1));\n                walls.push(new Position(i, start.y + i - 1));\n            }\n            nextStart.y = start.y + letterWidth[\"^\"];\n            break;\n        case \"-\":\n            for (i = 0; i < 7; i++) {\n                walls.push(new Position(start.x, start.y + i));\n                walls.push(new Position(start.x + i, start.y + 6));\n                walls.push(new Position(start.x + 6, start.y + i));\n                walls.push(new Position(start.x + i, start.y));\n            }\n            for (i = 1; i < 6; i++) {\n                for (let j = 1; j < 6; j++) {\n                    if (i === j || i + j === 6) continue;\n                    walls.push(new Position(start.x + i, start.y + j));\n                }\n            }\n            nextStart.y = start.y + letterWidth[\"-\"];\n            break;\n        case \"+\":\n            for (i = 0; i < 10; i++) {\n                walls.push(new Position(start.x, start.y + i));\n                walls.push(new Position(start.x + i, start.y + 9));\n                walls.push(new Position(start.x + 6, start.y + i));\n                walls.push(new Position(start.x + i, start.y));\n            }\n            for (i = 1; i < 6; i++) {\n                for (let j = 1; j < 9; j++) {\n                    if (i === 3 || j === 6 || ((i === 2 || i === 4) && j === 7))\n                        continue;\n                    walls.push(new Position(start.x + i, start.y + j));\n                }\n            }\n            nextStart.y = start.y + letterWidth[\"+\"];\n            break;\n        case \"!\":\n            for (i = 6; i > 0; i--)\n                walls.push(new Position(start.x - i, start.y));\n            for (i = 3; i > 0; i--) {\n                walls.push(new Position(start.x - i + 1, start.y - i + 1));\n                walls.push(new Position(start.x - i + 1, start.y + i - 1));\n            }\n            nextStart.y = start.y + letterWidth[\"!\"];\n            break;\n        case \"|\":\n            for (i = 0; i < 30; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 0; i < 30; i += 3) {\n                for (let j = 1; j < 4; j++) {\n                    if (i % 2)\n                        walls.push(new Position(start.x + j, start.y + i));\n                    else walls.push(new Position(start.x - j, start.y + i));\n                }\n            }\n            nextStart.y = start.y + letterWidth[\"!\"];\n            break;\n        default:\n            break;\n    }\n    return { walls, nextStart };\n};\n\nexport { ltow, lengthOfWord };\n","import React, { Component } from \"react\";\nimport \"./interact.css\";\nimport { ltow, lengthOfWord } from \"../../helper/letters\";\nimport Position from \"../../helper/position\";\nconst Align = {\n    TOP_LEFT: 0,\n    TOP_CENTER: 1,\n    TOP_RIGHT: 2,\n    MIDDLE_LEFT: 3,\n    MIDDLE_CENTER: 4,\n    MIDDLE_RIGHT: 5,\n    BOTTOM_LEFT: 6,\n    BOTTOM_CENTER: 7,\n    BOTTOM_RIGHT: 8,\n    CUSTOM: 9,\n};\nlet currIndex = 1;\nclass Interact extends Component {\n    state = {\n        transition: 7,\n    };\n\n    componentDidMount() {\n        this.startIntro();\n        const skipDom = document.getElementById(\n            `node-${this.props.rows - 6}-${this.props.columns - 6}`\n        );\n        document.getElementById(\n            `btn-skip-interaction`\n        ).style.top = `${skipDom.offsetTop}px`;\n        document.getElementById(\n            `btn-skip-interaction`\n        ).style.left = `${skipDom.offsetLeft}px`;\n        const nextDom = document.getElementById(\n            `node-${this.props.rows - 6}-${this.props.columns - 18}`\n        );\n        document.getElementById(\n            `btn-next-interaction`\n        ).style.top = `${nextDom.offsetTop}px`;\n        document.getElementById(\n            `btn-next-interaction`\n        ).style.left = `${nextDom.offsetLeft}px`;\n    }\n\n    getCenter(total, len) {\n        return parseInt((total - len + 1) / 2) + 1;\n    }\n\n    getStartPosition(\n        word,\n        row,\n        lines,\n        alignment = Align.TOP_CENTER,\n        position = new Position(1, 1)\n    ) {\n        const len = lengthOfWord(word);\n        let start = new Position(1, 1);\n        switch (alignment) {\n            case Align.TOP_LEFT:\n                start.x = 1 + row * 7;\n                break;\n            case Align.TOP_CENTER:\n                start.x = 1 + row * 7;\n                start.y = this.getCenter(this.props.columns, len);\n                break;\n            case Align.TOP_RIGHT:\n                start.x = 1 + row * 7;\n                start.y = this.props.columns - len + 1;\n                break;\n            case Align.MIDDLE_LEFT:\n                start.x =\n                    this.getCenter(this.props.rows, lines * 6 - 1) +\n                    row * 7 -\n                    1;\n                break;\n            case Align.MIDDLE_CENTER:\n                start.x =\n                    this.getCenter(this.props.rows, lines * 6 - 1) +\n                    row * 7 -\n                    1;\n                start.y = this.getCenter(this.props.columns, len);\n                break;\n            case Align.MIDDLE_RIGHT:\n                start.x =\n                    this.getCenter(this.props.rows, lines * 6 - 1) +\n                    row * 7 -\n                    1;\n                start.y = this.props.columns - len + 1;\n                break;\n            case Align.BOTTOM_LEFT:\n                start.x = this.props.rows - lines * 6 + row * 7 + 1;\n                break;\n            case Align.BOTTOM_CENTER:\n                start.x = this.props.rows - lines * 6 + row * 7 + 1;\n                start.y = this.getCenter(this.props.columns, len);\n                break;\n            case Align.BOTTOM_RIGHT:\n                start.x = this.props.rows - lines * 6 + row * 7 + 1;\n                start.y = this.props.columns - len + 1;\n                break;\n            case Align.CUSTOM:\n                start.x = position.x;\n                start.y = position.y;\n                break;\n            default:\n                break;\n        }\n        return start;\n        // return new Position(1, 1);\n    }\n\n    getLines(statement) {\n        const words = statement.split(\" \");\n        const lines = [];\n        let currentLine = \"\";\n        while (words.length > 0) {\n            const word = words[0];\n            if (lengthOfWord(currentLine + \" \" + word) < this.props.columns) {\n                currentLine += \" \" + word;\n            } else {\n                lines.push(currentLine.trim());\n                currentLine = word;\n            }\n            words.shift();\n        }\n        let start = 0;\n        let k = 0;\n        while (k < currentLine.length) {\n            while (\n                lengthOfWord(currentLine.slice(start, k)) <\n                    this.props.columns &&\n                k < currentLine.length\n            ) {\n                k++;\n            }\n            lines.push(currentLine.slice(start, k - 1).trim());\n            start = k - 1;\n        }\n        lines[lines.length - 1] += currentLine[currentLine.length - 1];\n        return lines;\n    }\n\n    writeOnCanvasDelay(statement, lines) {\n        return (\n            this.state.transition *\n                10 *\n                (statement.length + lines.length + 10) +\n            1000\n        );\n    }\n\n    writeOnCanvas(\n        statement,\n        alignment = Align.TOP_CENTER,\n        position = new Position(1, 1)\n    ) {\n        // Find the lines\n        const lines = this.getLines(statement);\n        //Iterate the lines and print the same\n        let covered = \"\";\n        for (let x = 0; x < lines.length; x++) {\n            const line = lines[x];\n            covered += line;\n            setTimeout(() => {\n                const start = this.getStartPosition(\n                    line,\n                    x,\n                    lines.length,\n                    alignment,\n                    position\n                );\n                for (let i = 0; i < line.length; i++) {\n                    setTimeout(() => {\n                        const ch = line[i].toUpperCase();\n                        const { walls, nextStart } = ltow(ch, start);\n                        for (let k = 0; k < walls.length; k++) {\n                            const wall = walls[k];\n                            setTimeout(() => {\n                                const nodeDom = document.getElementById(\n                                    `node-${wall.x}-${wall.y}`\n                                );\n                                if (nodeDom === null) return;\n                                nodeDom.classList.add(\"node-wall\");\n                                // if (\n                                //     i === line.length - 1 &&\n                                //     k === walls.length - 1 &&\n                                //     x === lines.length - 1\n                                // )\n                                // this.props.stopLoading();\n                            }, this.state.transition * k);\n                        }\n                        if (walls.length !== 0) {\n                            start.x = nextStart.x;\n                            start.y = nextStart.y;\n                        }\n                    }, this.state.transition * i * 10);\n                }\n            }, this.state.transition * covered.length * 10);\n        }\n        return { statement, lines };\n    }\n\n    initialAnimation(start) {\n        let delay = 0;\n        for (let i = start.y + 1; i <= this.props.columns; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${1}-${i}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay += this.props.columns * this.state.transition;\n        for (let i = 2; i <= this.props.rows; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(\n                    `node-${i}-${this.props.columns}`\n                );\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay += this.props.rows * this.state.transition;\n        for (let i = this.props.columns - 1; i >= 0; i--) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(\n                    `node-${this.props.rows}-${i}`\n                );\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + (this.props.columns - i) * this.state.transition);\n        }\n        delay += this.props.columns * this.state.transition;\n        for (let i = this.props.rows - 1; i >= 0; i--) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${i}-${1}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + (this.props.rows - i) * this.state.transition);\n        }\n        delay += this.props.rows * this.state.transition;\n        for (let i = 2; i <= start.y; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${1}-${i}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay += start.y * this.state.transition;\n        for (let i = 2; i < start.x; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${i}-${start.y}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay -= start.y * this.state.transition;\n        delay -= start.y * this.state.transition;\n        return delay;\n    }\n\n    clearBoard() {\n        document.querySelectorAll(\".node\").forEach((nodeDom) => {\n            nodeDom.classList.remove(\"node-wall\");\n        });\n    }\n\n    enableSkip(timeout) {\n        setTimeout(() => {\n            document.getElementById(\n                `btn-skip-interaction`\n            ).style.display = `block`;\n            document.getElementById(\n                `btn-skip-interaction`\n            ).style.zIndex = `600`;\n            document.getElementById(\n                `btn-skip-interaction`\n            ).style.animationName = `anim-skip`;\n        }, timeout - 1500);\n    }\n\n    enableNext(timeout) {\n        setTimeout(() => {\n            document.getElementById(\n                `btn-next-interaction`\n            ).style.display = `block`;\n            document.getElementById(\n                `btn-next-interaction`\n            ).style.zIndex = `600`;\n            document.getElementById(\n                `btn-next-interaction`\n            ).style.animationName = `anim-next`;\n        }, timeout - 1500);\n    }\n\n    showInteractions(index) {\n        this.clearBoard();\n        document.getElementById(`btn-next-interaction`).style.display = `none`;\n        document.getElementById(`btn-skip-interaction`).style.display = `none`;\n        let statement = null;\n        let lines = null;\n        let data = null;\n        switch (index) {\n            case 2:\n                this.writeOnCanvas(\"^\", Align.CUSTOM, new Position(1, 21));\n                data = this.writeOnCanvas(\n                    \"Try Creating a Maze\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                this.writeOnCanvas(\n                    \"+\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 18)\n                );\n                this.enableNext(this.writeOnCanvasDelay(statement, lines));\n                break;\n            case 3:\n                this.writeOnCanvas(\"^\", Align.CUSTOM, new Position(1, 28));\n                data = this.writeOnCanvas(\n                    \"Choose the Speed\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                this.writeOnCanvas(\n                    \"+\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 18)\n                );\n                this.enableNext(this.writeOnCanvasDelay(statement, lines));\n                break;\n            case 4:\n                this.writeOnCanvas(\n                    \"^\",\n                    Align.CUSTOM,\n                    new Position(1, this.props.columns - 3)\n                );\n                data = this.writeOnCanvas(\"Start Walking\", Align.MIDDLE_CENTER);\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                this.writeOnCanvas(\n                    \"+\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 18)\n                );\n                this.enableNext(this.writeOnCanvasDelay(statement, lines));\n                break;\n            case 5:\n                this.writeOnCanvas(\n                    \"|\",\n                    Align.CUSTOM,\n                    new Position(4, parseInt((this.props.columns - 30) / 2))\n                );\n                data = this.writeOnCanvas(\n                    \"Drag to Construct Walls\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                this.writeOnCanvas(\n                    \"+\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 18)\n                );\n                this.enableNext(this.writeOnCanvasDelay(statement, lines));\n                break;\n\n            case 6:\n                this.writeOnCanvas(\n                    \"!\",\n                    Align.CUSTOM,\n                    new Position(\n                        this.props.rows,\n                        parseInt(this.props.columns / 2) + 1\n                    )\n                );\n                data = this.writeOnCanvas(\n                    \"Insights Available Below\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                this.writeOnCanvas(\n                    \"+\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 18)\n                );\n                this.enableNext(this.writeOnCanvasDelay(statement, lines));\n                break;\n            case 7:\n                data = this.writeOnCanvas(\n                    \"Lets Get Started\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                break;\n            case 8:\n                this.skipInteraction();\n                break;\n            case 1:\n            default:\n                this.writeOnCanvas(\"^\", Align.CUSTOM, new Position(1, 14));\n                data = this.writeOnCanvas(\n                    \"Select the Algorithm\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeOnCanvas(\n                    \"-\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 6)\n                );\n                this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n                this.writeOnCanvas(\n                    \"+\",\n                    Align.CUSTOM,\n                    new Position(this.props.rows - 6, this.props.columns - 18)\n                );\n                this.enableNext(this.writeOnCanvasDelay(statement, lines));\n                break;\n        }\n    }\n\n    startIntro() {\n        this.props.startLoading();\n        const statement = \"Walk to Destination\";\n        const alignment = Align.MIDDLE_CENTER;\n        const lines = this.getLines(statement);\n        const start = this.getStartPosition(\n            lines[0],\n            0,\n            lines.length,\n            alignment\n        );\n        const initialAnimationDelay = this.initialAnimation(start);\n        const writeOnCanvasDelay =\n            initialAnimationDelay + this.writeOnCanvasDelay(statement, lines);\n        setTimeout(() => {\n            this.writeOnCanvas(statement, alignment);\n        }, initialAnimationDelay);\n        setTimeout(() => {\n            this.showInteractions(currIndex);\n        }, writeOnCanvasDelay);\n    }\n\n    skipInteraction = () => {\n        document.getElementById(`btn-next-interaction`).style.display = `none`;\n        document.getElementById(`btn-skip-interaction`).style.display = `none`;\n        this.props.stopLoading();\n    };\n\n    nextInteraction = () => {\n        this.showInteractions(++currIndex);\n    };\n\n    render() {\n        return (\n            <div className=\"interaction-container\">\n                <button\n                    id=\"btn-next-interaction\"\n                    onClick={this.nextInteraction}\n                ></button>\n                <button\n                    id=\"btn-skip-interaction\"\n                    onClick={this.skipInteraction}\n                ></button>\n            </div>\n        );\n    }\n}\n\nexport default Interact;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar/navbar\";\nimport Legend from \"./components/Legend/legend\";\nimport Grid from \"./components/Grid/grid\";\nimport Position, { isEqual } from \"./helper/position\";\nimport Insights from \"./components/Insights/insights\";\nimport Copyright from \"./components/Copyright/copyright\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport performDijkstra from \"./algorithms/dijkstra\";\nimport resetSourceAndTarget from \"./helper/initialise\";\nimport Loader from \"./components/Loader/loader\";\nimport performAstar from \"./algorithms/a_star\";\nimport performGreedy from \"./algorithms/greedy\";\nimport performBFS from \"./algorithms/bfs\";\nimport performDFS from \"./algorithms/dfs\";\nimport Interact from \"./components/Interact/interact\";\n\nclass App extends Component {\n    componentDidMount() {\n        // Include the FontAwesome Library\n        const s = document.createElement(\"script\");\n        s.type = \"text/javascript\";\n        s.async = true;\n        s.crossOrigin = \"anonymous\";\n        s.src = \"https://kit.fontawesome.com/f7fe82406d.js\";\n        document.body.appendChild(s);\n\n        const gridHeight = window.innerHeight - 190;\n        const gridWidth = window.innerWidth;\n\n        const rows = parseInt((gridHeight - 40) / 20);\n\n        const columns = parseInt((gridWidth - 40) / 20);\n        const source = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.3 * columns)\n        );\n        // const source = new Position(2, 2);\n        const target = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.7 * columns)\n        );\n        // const target = new Position(4, 5);\n        this.setState({ rows, columns, source, target });\n    }\n\n    state = {\n        selectedAlgorithmId: \"algo-dijkstra\",\n        selectedSpeedId: \"speed-fast\",\n        speed: 15,\n        rows: 0,\n        columns: 0,\n        source: new Position(-1, -1),\n        target: new Position(-1, -1),\n        walls: [],\n        visitedNodes: [],\n        loading: false,\n        numberOfVisitedNodes: null,\n        pathLength: null,\n        timeTaken: null,\n        targetReached: true,\n        interactionDone: false,\n    };\n\n    startLoading = () => {\n        document\n            .querySelectorAll(\".node\")\n            .forEach((nodeDom) => (nodeDom.style.animationDuration = `4s`));\n        this.setState({ loading: true });\n    };\n\n    stopLoading = (delay = 4, changeInteraction = true) => {\n        document\n            .querySelectorAll(\".node.node-path\")\n            .forEach(\n                (nodeDom) =>\n                    (nodeDom.style.animationDuration = `${delay / 1000 + 4}s`)\n            );\n        this.setState({ loading: false, interactionDone: changeInteraction });\n    };\n\n    setAlgorithmId = (selectedAlgorithmId) => {\n        this.setState({ selectedAlgorithmId });\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setSpeedId = (selectedSpeedId, speed) => {\n        this.setState({ selectedSpeedId, speed });\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setNodeAsSource = (position) => {\n        // console.log(`SOURCE: ${position}`);\n        if (\n            !(\n                position.x === this.state.target.x &&\n                position.y === this.state.target.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ source: position, walls });\n        }\n    };\n\n    setNodeAsTarget = (position) => {\n        // console.log(`TARGET: ${position}`);\n        if (\n            !(\n                position.x === this.state.source.x &&\n                position.y === this.state.source.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ target: position, walls });\n        }\n    };\n\n    toggleWall = (position) => {\n        // console.log(position);\n        let walls = this.state.walls;\n        if (\n            walls.some((node) => node.x === position.x && node.y === position.y)\n        ) {\n            // Node is a wall -> change to unvisited\n            walls = walls.filter(\n                (node) => !(node.x === position.x && node.y === position.y)\n            );\n        } else {\n            walls.push(position);\n        }\n        this.setState({ walls });\n    };\n\n    putNodeInPath = (position, node) => {\n        if (isEqual(position, new Position(node.x - 1, node.y))) return \"top\";\n        if (isEqual(position, new Position(node.x, node.y + 1))) return \"right\";\n        if (isEqual(position, new Position(node.x + 1, node.y)))\n            return \"bottom\";\n        if (isEqual(position, new Position(node.x, node.y - 1))) return \"left\";\n        return \"null\";\n    };\n\n    clearPath = () => {\n        this.setState({\n            visitedNodes: [],\n            numberOfVisitedNodes: null,\n            pathLength: null,\n            timeTaken: null,\n        });\n        for (let i = 1; i <= this.state.rows; i++) {\n            for (let j = 1; j <= this.state.columns; j++) {\n                const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                if (\n                    nodeDom.classList.contains(\"node-visited\") ||\n                    nodeDom.classList.contains(\"node-path\")\n                ) {\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                }\n            }\n        }\n        resetSourceAndTarget();\n    };\n\n    destructWalls = () => {\n        this.setState({ walls: [] });\n    };\n\n    resetMesh = () => {\n        this.clearPath();\n        this.destructWalls();\n    };\n\n    getSelectedAlgorithmFunction = () => {\n        switch (this.state.selectedAlgorithmId) {\n            case \"algo-dijkstra\":\n                return performDijkstra;\n            case \"algo-a*\":\n                return performAstar;\n            case \"algo-greedy\":\n                return performGreedy;\n            case \"algo-bfs\":\n                return performBFS;\n            case \"algo-dfs\":\n                return performDFS;\n            default:\n                return null;\n        }\n    };\n\n    startWalking = () => {\n        setTimeout(() => {\n            console.log(\"START WALKING\");\n            const algorithm = this.getSelectedAlgorithmFunction();\n            if (algorithm === null) {\n                alert(\"Coming Soon !!!\");\n                return;\n            }\n            this.startLoading();\n            resetSourceAndTarget();\n            this.clearPath();\n            const startTime = new Date().getTime();\n            const { visitedNodes, path } = algorithm(\n                this.state.rows,\n                this.state.columns,\n                this.state.source,\n                this.state.target,\n                this.state.walls\n            );\n            const endTime = new Date().getTime();\n            this.setState({\n                numberOfVisitedNodes: visitedNodes.length,\n                pathLength: path.length + 1,\n                timeTaken: endTime - startTime,\n            });\n            // this.stopLoading();\n            // return;\n            for (let i = 0; i < visitedNodes.length; i++) {\n                setTimeout(() => {\n                    const nodeDom = document.querySelector(\n                        `#node-${visitedNodes[i].x}-${visitedNodes[i].y}`\n                    );\n                    if (nodeDom.classList.contains(\"node-unvisited\")) {\n                        nodeDom.classList.remove(\"node-unvisited\");\n                        nodeDom.classList.add(\"node-visited\");\n                    }\n                    if (i === visitedNodes.length - 1)\n                        setTimeout(() => {\n                            if (\n                                visitedNodes[i].x === this.state.target.x &&\n                                visitedNodes[i].y === this.state.target.y\n                            ) {\n                                this.setState({ targetReached: true });\n                                document\n                                    .querySelector(\".node.node-source\")\n                                    .classList.add(\n                                        `path-to-${this.putNodeInPath(\n                                            path[0],\n                                            this.state.source\n                                        )}`\n                                    );\n                                for (let k = 0; k < path.length; k++) {\n                                    setTimeout(() => {\n                                        const node = path[k];\n                                        const nodeDom = document.querySelector(\n                                            `#node-${node.x}-${node.y}`\n                                        );\n                                        nodeDom.classList.remove(\n                                            \"node-visited\"\n                                        );\n                                        nodeDom.classList.add(\"node-path\");\n                                        if (k === path.length - 1) {\n                                            document\n                                                .querySelector(\n                                                    \".node.node-target\"\n                                                )\n                                                .classList.add(\n                                                    `path-to-${this.putNodeInPath(\n                                                        path[path.length - 1],\n                                                        this.state.target\n                                                    )}`\n                                                );\n                                            this.stopLoading(\n                                                this.state.speed * k * 2\n                                            );\n                                        }\n                                    }, this.state.speed * k * 2);\n                                }\n                            } else {\n                                this.setState({ targetReached: false });\n                                console.log(\"Target NOT Reachable\");\n                                this.stopLoading();\n                            }\n                        }, this.state.speed + 500);\n                }, this.state.speed * i);\n            }\n        }, 500);\n    };\n\n    updateMaze = (walls, visitedNodes) => {\n        this.setState({ walls, visitedNodes });\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Loader\n                    loading={this.state.loading}\n                    interactionDone={this.state.interactionDone}\n                />\n                <NavBar\n                    selectedAlgorithmId={this.state.selectedAlgorithmId}\n                    selectedSpeedId={this.state.selectedSpeedId}\n                    onAlgorithmChanged={this.setAlgorithmId}\n                    onSpeedChanged={this.setSpeedId}\n                    startWalking={this.startWalking}\n                    clearPath={this.clearPath}\n                    destructWalls={this.destructWalls}\n                    resetMesh={this.resetMesh}\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    speed={this.state.speed}\n                    onMazeCreated={this.updateMaze}\n                    startLoading={this.startLoading}\n                    stopLoading={this.stopLoading}\n                />\n\n                <Grid\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    walls={this.state.walls}\n                    visitedNodes={this.state.visitedNodes}\n                    interactionDone={this.state.interactionDone}\n                    setNodeAsSource={this.setNodeAsSource}\n                    setNodeAsTarget={this.setNodeAsTarget}\n                    toggleWall={this.toggleWall}\n                />\n                <Legend />\n                <Insights\n                    totalNodes={this.state.rows * this.state.columns}\n                    walls={this.state.walls.length}\n                    numberOfVisitedNodes={this.state.numberOfVisitedNodes}\n                    pathLength={this.state.pathLength}\n                    timeTaken={this.state.timeTaken}\n                    targetReached={this.state.targetReached}\n                />\n                <Copyright />\n                {this.state.rows !== 0 && this.state.columns !== 0 ? (\n                    window.innerWidth > 950 ? (\n                        <Interact\n                            startLoading={this.startLoading}\n                            stopLoading={this.stopLoading}\n                            rows={this.state.rows}\n                            columns={this.state.columns}\n                        />\n                    ) : null\n                ) : null}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.Fragment>\n        <App />\n    </React.Fragment>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}