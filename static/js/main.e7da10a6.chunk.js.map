{"version":3,"sources":["logo.svg","components/NavBar/NavItem/navitem.jsx","helper/position.js","algorithms/mazeGeneratingAlgorithms/binary_tree.js","components/NavBar/navbar.jsx","components/Node/node_state.jsx","components/Node/node.jsx","components/Legend/legend.jsx","components/Grid/grid.jsx","components/Insights/insights.jsx","components/Copyright/copyright.jsx","algorithms/node.js","algorithms/dijkstra.js","helper/initialise.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavItem","state","description","getSelectedOptionDescription","props","selectedOption","options","handleHover","option","setState","this","onChanged","hasDescription","undefined","optionNamesContainerWidth","selectedOptionObject","getSelectedOption","className","style","width","map","key","id","textAlign","onMouseEnter","onMouseLeave","onClick","speed","name","left","filter","Component","Position","x","y","isEqual","a","b","JSON","stringify","getNeighbours","position","rows","columns","neighbours","push","isOnEdge","generateBinaryTreeMaze","source","target","walls","i","j","Math","round","random","sourceNeighbours","targetNeighbours","wall","some","node","NavBar","algorithms","href","title","mazes","speeds","selectedMazeId","constructMaze","console","log","setTimeout","nodeDom","document","querySelector","classList","remove","add","length","onMazeCreated","generateMaze","type","resetMesh","wallsInOrder","setMazeId","selectedAlgorithmId","algorithm","maze","selectedSpeedId","onAlgorithmChanged","onSpeedChanged","startWalking","clearPath","destructWalls","Fragment","src","logo","height","alt","showAlgorithmOptionsContainer","getSelectedAlgorithm","showMazeOptionsContainer","getSelectedMaze","showSpeedOptionsContainer","getSelectedSpeed","NodeState","NODE_UNVISITED","NODE_VISITED","NODE_IS_WALL","NODE_IS_SOURCE","NODE_IS_TARGET","NODE_FALLS_IN_PATH","NODE_IS_VISITING","Node","nodeState","onMouseDown","onMouseUp","getNodeStateClass","data-x","data-y","classes","Legend","disabled","Grid","isMousePressed","movingSource","movingTarget","toggleWall","setNodeAsSource","setNodeAsTarget","visitedNodes","paddingX","window","innerWidth","paddingY","innerHeight","nodes","decideNodeState","handleMouseDown","handleMouseUp","handleMouseEnter","handleMouseLeave","paddingTop","paddingRight","paddingBottom","paddingLeft","Insights","insights","Copyright","distance","Infinity","mesh","unvisitedNodes","getNonWallNeighbours","neighbourPositions","getPreviousNodeInPath","currNode","prevNode","min","performDijkstra","row","forEach","initialiseMesh","minDist","getVisitedNodes","path","unshift","getNodesInPath","resetSourceAndTarget","sourceDom","targetDom","App","setAlgorithmId","setSpeedId","putNodeInPath","contains","k","alert","updateMaze","s","createElement","async","crossOrigin","body","appendChild","gridHeight","gridWidth","parseInt","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e7da10a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass NavItem extends Component {\n    state = {\n        description: this.getSelectedOptionDescription(\n            this.props.selectedOption,\n            this.props.options\n        ),\n    };\n\n    handleHover = (option) => {\n        this.setState({ description: option.description });\n    };\n\n    render() {\n        const { options, selectedOption, onChanged } = this.props;\n        const hasDescription =\n            options[0].description === undefined ? false : true;\n        const optionNamesContainerWidth = hasDescription ? \"30%\" : \"100%\";\n        let selectedOptionObject = this.getSelectedOption(\n            selectedOption,\n            options\n        );\n\n        return (\n            <div className=\"options-container\">\n                <div\n                    className=\"option-names-container\"\n                    style={{ width: optionNamesContainerWidth }}\n                >\n                    {options.map((option) => (\n                        <button\n                            key={option.id}\n                            style={{\n                                textAlign: hasDescription ? \"right\" : \"center\",\n                            }}\n                            className={\n                                option.id === selectedOption ? \"active\" : \"\"\n                            }\n                            onMouseEnter={() => this.handleHover(option)}\n                            onMouseLeave={() =>\n                                this.handleHover(selectedOptionObject)\n                            }\n                            onClick={() =>\n                                onChanged(\n                                    option.id,\n                                    option.speed === undefined\n                                        ? null\n                                        : option.speed\n                                )\n                            }\n                        >\n                            {option.name}\n                        </button>\n                    ))}\n                </div>\n                {hasDescription ? (\n                    <div\n                        className=\"option-description-container\"\n                        style={{\n                            width: \"60%\",\n                            left: optionNamesContainerWidth,\n                        }}\n                    >\n                        {this.state.description}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getSelectedOption(selectedOption, options) {\n        const option = options.filter((option) => option.id === selectedOption);\n        return option[0];\n    }\n    getSelectedOptionDescription(selectedOption, options) {\n        const option = this.getSelectedOption(selectedOption, options);\n        return option === undefined ? null : option.description;\n    }\n}\n\nexport default NavItem;\n","class Position {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nconst isEqual = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n\nconst getNeighbours = (position, rows, columns) => {\n    const neighbours = [];\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y + 1 <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y + 1));\n    }\n    if (\n        position.x >= 1 &&\n        position.x + 1 <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x + 1, position.y));\n    }\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y - 1 >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y - 1));\n    }\n    if (\n        position.x - 1 >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x - 1, position.y));\n    }\n    return neighbours;\n};\n\nexport { isEqual, getNeighbours };\nexport default Position;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst generateBinaryTreeMaze = (rows, columns, source, target) => {\n    const walls = [];\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    for (let i = 3; i < rows - 1; i += 2) {\n        for (let j = 3; j < columns - 1; j += 2) {\n            walls.push(new Position(i, j));\n            if (Math.round(Math.random())) {\n                walls.push(new Position(i - 1, j));\n            } else {\n                walls.push(new Position(i, j - 1));\n            }\n        }\n    }\n    const sourceNeighbours = isOnEdge(source)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateBinaryTreeMaze;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\nimport logo from \"../../logo.svg\";\nimport NavItem from \"./NavItem/navitem\";\nimport generateBinaryTreeMaze from \"../../algorithms/mazeGeneratingAlgorithms/binary_tree\";\n\nclass NavBar extends Component {\n    state = {\n        algorithms: [\n            {\n                id: \"algo-dijkstra\",\n                name: \"Dijkstra's\",\n                description: (\n                    <div>\n                        <p>\n                            Let the node at which we are starting be called the\n                            <b>initial node</b>. Let the\n                            <b>\n                                distance of node\n                                <i>Y</i>\n                            </b>\n                            be the distance from the <b> initial node</b>\n                            to\n                            <i>Y</i>. Dijkstra's algorithm will assign some\n                            initial distance values and will try to improve them\n                            step by step.\n                        </p>\n                        <ol>\n                            <li>\n                                Mark all nodes unvisited. Create a set of all\n                                the unvisited nodes called the\n                                <i>unvisited set</i>.\n                            </li>\n                            <li>\n                                Assign to every node a tentative distance value:\n                                set it to zero for our initial node and to\n                                infinity for all other nodes. Set the initial\n                                node as current.\n                            </li>\n                            <li>\n                                For the current node, consider all of its\n                                unvisited neighbours and calculate their\n                                <i>tentative</i>\n                                distances through the current node. Compare the\n                                newly calculated\n                                <i>tentative</i>\n                                distance to the current assigned value and\n                                assign the smaller one. For example, if the\n                                current node\n                                <i>A</i>\n                                is marked with a distance of 6, and the edge\n                                connecting it with a neighbour\n                                <i>B</i>\n                                has length 2, then the distance to\n                                <i>B</i>\n                                through\n                                <i>A</i>\n                                will be 6 + 2 = 8. If B was previously marked\n                                with a distance greater than 8 then change it to\n                                8. Otherwise, the current value will be kept.\n                            </li>\n                            <li>\n                                When we are done considering all of the\n                                unvisited neighbours of the current node, mark\n                                the current node as visited and remove it from\n                                the\n                                <i>unvisited set</i>. A visited node will never\n                                be checked again.\n                            </li>\n                            <li>\n                                If the destination node has been marked visited\n                                (when planning a route between two specific\n                                nodes) or if the smallest tentative distance\n                                among the nodes in the\n                                <i>unvisited set</i>\n                                is infinity (when planning a complete traversal;\n                                occurs when there is no connection between the\n                                initial node and remaining unvisited nodes),\n                                then stop. The algorithm has finished.\n                            </li>\n                            <li>\n                                Otherwise, select the unvisited node that is\n                                marked with the smallest tentative distance, set\n                                it as the new \"current node\", and go back to\n                                step 3.\n                            </li>\n                        </ol>\n                        <p>\n                            When planning a route, it is actually not necessary\n                            to wait until the destination node is \"visited\" as\n                            above: the algorithm can stop once the destination\n                            node has the smallest tentative distance among all\n                            \"unvisited\" nodes (and thus could be selected as the\n                            next \"current\").\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-a*\",\n                name: \"A*\",\n                description: (\n                    <div>\n                        <p>\n                            We create two lists – <i>Open List</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <p>\n                            1. Initialize the open list\n                            <br />\n                            2. Initialize the closed list put the starting node\n                            on the open list (you can leave its{\" \"}\n                            <strong>f</strong> at zero)\n                            <br />\n                            3. while the open list is not empty <br />\n                            a) find the node with the least <strong>\n                                f\n                            </strong>{\" \"}\n                            on the open list, call it \"q\" <br />\n                            b) pop q off the open list <br />\n                            c) generate q's 8 successors and set their parents\n                            to q <br />\n                            d) for each successor <br />\n                            i) if successor is the goal, stop search successor.\n                            <strong>g</strong> = q.<strong>g</strong> + distance\n                            between successor and q successor.<strong>h</strong>{\" \"}\n                            = distance from goal to successor (This can be done\n                            using many ways, we will discuss three heuristics-\n                            Manhattan, Diagonal and Euclidean Heuristics)\n                            successor.<strong>f</strong> = successor.\n                            <strong>g</strong> + successor.<strong>h</strong>\n                            <br />\n                            ii) if a node with the same position as successor is\n                            in the OPEN list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor <br />\n                            iii) if a node with the same position as successor\n                            is in the CLOSED list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor otherwise, add the node to the open list\n                            end (for loop) e) push q on the closed list end\n                            (while loop){\" \"}\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-greedy\",\n                name: \"Greedy\",\n                description: (\n                    <div>\n                        <p>\n                            A<b>greedy algorithm</b>\n                            is any algorithm that follows the problem-solving\n                            heuristic of making the locally optimal choice at\n                            each stage. In many problems, a greedy strategy does\n                            not usually produce an optimal solution, but\n                            nonetheless a greedy heuristic may yield locally\n                            optimal solutions that approximate a globally\n                            optimal solution in a reasonable amount of time.\n                        </p>\n                        <p>\n                            For example, a greedy strategy for the\n                            <a\n                                href=\"/wiki/Travelling_salesman_problem\"\n                                title=\"Travelling salesman problem\"\n                            >\n                                travelling salesman problem\n                            </a>\n                            (which is of a high computational complexity) is the\n                            following heuristic: \"At each step of the journey,\n                            visit the nearest unvisited city.\" This heuristic\n                            does not intend to find a best solution, but it\n                            terminates in a reasonable number of steps; finding\n                            an optimal solution to such a complex problem\n                            typically requires unreasonably many steps. In\n                            mathematical optimization, greedy algorithms\n                            optimally solve combinatorial problems having the\n                            properties of\n                            <a href=\"/wiki/Matroid\" title=\"Matroid\">\n                                matroids\n                            </a>\n                            , and give constant-factor approximations to\n                            optimization problems with submodular structure.\n                        </p>\n                    </div>\n                ),\n            },\n        ],\n        mazes: [\n            { id: \"maze-none\", name: \"Create\" },\n            { id: \"maze-binary-tree\", name: \"Binary Tree\" },\n        ],\n        speeds: [\n            { id: \"speed-faster\", name: \"Faster\", speed: 15 },\n            { id: \"speed-fast\", name: \"Fast\", speed: 30 },\n            { id: \"speed-normal\", name: \"Normal\", speed: 45 },\n            { id: \"speed-slow\", name: \"Slow\", speed: 60 },\n            { id: \"speed-slower\", name: \"Slower\", speed: 75 },\n        ],\n        selectedMazeId: \"maze-none\",\n    };\n\n    constructMaze = (walls) => {\n        console.log({ walls });\n        for (let i = 0; i < walls.length; i++) {\n            const wall = walls[i];\n            setTimeout(() => {\n                const nodeDom = document.querySelector(\n                    `#node-${wall.x}-${wall.y}`\n                );\n                nodeDom.classList.remove(\"node-unvisited\");\n                nodeDom.classList.add(\"node-wall\");\n                if (i === walls.length - 1) {\n                    setTimeout(() => {\n                        this.props.onMazeCreated(walls, []);\n                    }, this.props.speed);\n                }\n            }, (this.props.speed * i) / 2);\n        }\n    };\n\n    // resetMesh = () => {\n    //     for (let i = 1; i <= this.props.rows; i++) {\n    //         for (let j = 1; j <= this.props.columns; j++) {\n    //             const nodeDom = document.querySelector(`#node-${i}-${j}`);\n    //             if (\n    //                 !(\n    //                     nodeDom.classList.contains(\"node-source\") ||\n    //                     nodeDom.classList.contains(\"node-target\")\n    //                 )\n    //             )\n    //                 nodeDom.setAttribute(\"class\", \"node node-unvisited\");\n    //             else {\n    //                 resetSourceAndTarget();\n    //             }\n    //         }\n    //     }\n    //     this.props.onMazeCreated([], []);\n    // };\n\n    generateMaze = (type) => {\n        switch (type) {\n            case \"maze-binary-tree\":\n                this.props.resetMesh(); // clear the maze\n                console.log(\"Generate Maze : \", type);\n                const wallsInOrder = generateBinaryTreeMaze(\n                    this.props.rows,\n                    this.props.columns,\n                    this.props.source,\n                    this.props.target\n                );\n                this.constructMaze(wallsInOrder);\n                break;\n            case \"maze-none\":\n            default:\n                this.resetMesh(); // clear the maze\n                break;\n        }\n    };\n\n    setMazeId = (selectedMazeId) => {\n        this.setState({ selectedMazeId });\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.remove(\"show\");\n        this.generateMaze(selectedMazeId);\n    };\n\n    showAlgorithmOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showMazeOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showSpeedOptionsContainer() {\n        // $(\".navbar-collapse\").collapse(\"hide\");\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    getSelectedAlgorithm(selectedAlgorithmId) {\n        const algorithm = this.state.algorithms.filter(\n            (algorithm) => algorithm.id === selectedAlgorithmId\n        );\n        return algorithm[0];\n    }\n\n    getSelectedMaze(selectedMazeId) {\n        const maze = this.state.mazes.filter(\n            (maze) => maze.id === selectedMazeId\n        );\n        return maze[0];\n    }\n\n    getSelectedSpeed(selectedSpeedId) {\n        const speed = this.state.speeds.filter(\n            (speed) => speed.id === selectedSpeedId\n        );\n        return speed[0];\n    }\n\n    render() {\n        const {\n            selectedAlgorithmId,\n            selectedSpeedId,\n            onAlgorithmChanged,\n            onSpeedChanged,\n            startWalking,\n            clearPath,\n            destructWalls,\n            resetMesh,\n        } = this.props;\n        return (\n            <React.Fragment>\n                <nav className=\"navbar-custom\">\n                    <span className=\"brand\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"logo\"\n                        />\n                        <span className=\"my-auto\">Walk to the Destination</span>\n                    </span>\n                    <div className=\"actions-container\">\n                        <button id=\"btn-clear-path\" onClick={() => clearPath()}>\n                            <span>Clear Path</span>\n                            <i className=\"fas fa-eraser\"></i>\n                        </button>\n                        <button\n                            id=\"btn-desctruct-walls\"\n                            onClick={() => destructWalls()}\n                        >\n                            <span>Destruct Walls</span>\n                            <i className=\"fas fa-snowplow\"></i>\n                        </button>\n                        <button id=\"btn-reset-mesh\" onClick={() => resetMesh()}>\n                            <span>Reset Mesh</span>\n                            <i className=\"fas fa-trash-restore\"></i>\n                        </button>\n                        <button\n                            id=\"btn-start-walking\"\n                            onClick={() => startWalking()}\n                        >\n                            <span>Start Walking</span>\n                            <i className=\"fas fa-play-circle\"></i>\n                        </button>\n                    </div>\n                    <div className=\"walking-options\">\n                        <ul>\n                            <li>\n                                <button\n                                    className=\"btn-algorithm\"\n                                    onClick={this.showAlgorithmOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedAlgorithm(\n                                                selectedAlgorithmId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Algorithm\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-maze\"\n                                    onClick={this.showMazeOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedMaze(\n                                                this.state.selectedMazeId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Maze\n                                    <i className=\"fab fa-magento ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-speed\"\n                                    onClick={this.showSpeedOptionsContainer}\n                                >\n                                    Speed :{\" \"}\n                                    <span>\n                                        {\n                                            this.getSelectedSpeed(\n                                                selectedSpeedId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    <i className=\"fas fa-tachometer-alt\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"algorithm-options-container\">\n                    <NavItem\n                        options={this.state.algorithms}\n                        selectedOption={selectedAlgorithmId}\n                        onChanged={onAlgorithmChanged}\n                    />\n                </div>\n                <div className=\"maze-options-container\">\n                    <NavItem\n                        options={this.state.mazes}\n                        selectedOption={this.state.selectedMazeId}\n                        onChanged={this.setMazeId}\n                    />\n                </div>\n                <div className=\"speed-options-container\">\n                    <NavItem\n                        options={this.state.speeds}\n                        selectedOption={selectedSpeedId}\n                        onChanged={onSpeedChanged}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default NavBar;\n","const NodeState = {\n    NODE_UNVISITED: 0,\n    NODE_VISITED: 1,\n    NODE_IS_WALL: -1,\n    NODE_IS_SOURCE: 10,\n    NODE_IS_TARGET: 100,\n    NODE_FALLS_IN_PATH: 50,\n    NODE_IS_VISITING: 2,\n};\nexport default NodeState;\n","import React, { Component } from \"react\";\nimport \"./node.css\";\nimport NodeState from \"./node_state\";\nclass Node extends Component {\n    render() {\n        const {\n            nodeState,\n            position,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onMouseLeave,\n        } = this.props;\n        if (onMouseEnter === undefined) {\n            return (\n                <div className={this.getNodeStateClass(nodeState)}>\n                    {/* <div></div> */}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    className={this.getNodeStateClass(nodeState)}\n                    id={`node-${position.x}-${position.y}`}\n                    data-x={position.x}\n                    data-y={position.y}\n                    onMouseDown={() => onMouseDown(nodeState, position)}\n                    onMouseUp={() => onMouseUp(nodeState, position)}\n                    onMouseEnter={() => onMouseEnter(nodeState, position)}\n                    onMouseLeave={() => onMouseLeave(nodeState, position)}\n                >\n                    {/* <div></div> */}\n                </div>\n            );\n        }\n    }\n\n    getNodeStateClass(nodeState) {\n        let classes = \"node node-\";\n        switch (nodeState) {\n            case NodeState.NODE_UNVISITED:\n                classes += \"unvisited\";\n                break;\n            case NodeState.NODE_VISITED:\n                classes += \"visited\";\n                break;\n            case NodeState.NODE_IS_WALL:\n                classes += \"wall\";\n                break;\n            case NodeState.NODE_IS_SOURCE:\n                classes += \"source\";\n                break;\n            case NodeState.NODE_IS_TARGET:\n                classes += \"target\";\n                break;\n            default:\n                classes += \"unvisited\";\n                break;\n        }\n        return classes;\n    }\n}\n\nexport default Node;\n","import React from \"react\";\nimport \"./legend.css\";\nimport Node from \"../Node/node\";\nimport Position from \"../../helper/position\";\nimport NodeState from \"../Node/node_state\";\n\nconst Legend = () => {\n    return (\n        <section className=\"legend-container\">\n            <ul>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_UNVISITED}\n                            position={new Position(-1, -1)}\n                            disabled\n                        />\n                        <span className=\"ml-1\">Unvisited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_VISITED}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Visited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_WALL}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Wall</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_SOURCE}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Source</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_TARGET}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-1\">Target</span>\n                    </div>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default Legend;\n","import React, { Component } from \"react\";\nimport Node from \"../Node/node\";\nimport NodeState from \"../Node/node_state\";\nimport Position from \"../../helper/position\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n    state = {\n        isMousePressed: false,\n        movingSource: false,\n        movingTarget: false,\n    };\n\n    handleMouseUp(nodeState, position) {\n        this.setState({ isMousePressed: false });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseUp | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: false });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: false });\n        } else {\n            // do nothing\n        }\n    }\n    handleMouseDown(nodeState, position) {\n        this.setState({ isMousePressed: true });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseDown | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: true });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: true });\n        } else {\n            this.props.toggleWall(position);\n        }\n    }\n    handleMouseEnter(nodeState, position) {\n        if (this.state.isMousePressed) {\n            // console.log(\n            //     `(${position.x}, ${position.y}) : mouseEnter | pressed=${this.state.isMousePressed}`\n            // );\n            if (this.state.movingSource) {\n                // TODO: change nodeState to source\n                this.props.setNodeAsSource(position);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to target\n                this.props.setNodeAsTarget(position);\n            } else {\n                // TODO: toggleWall()\n                // console.log(position);\n                this.props.toggleWall(position);\n            }\n        }\n    }\n    handleMouseLeave(nodeState, position) {\n        // if (this.state.isMousePressed) {\n        //     console.log(\n        //         `(${position.x}, ${position.y}) : mouseLeave | pressed=${this.state.isMousePressed}`\n        //     );\n        //     if (nodeState === NodeState.NODE_IS_SOURCE) {\n        //         // TODO: change nodeState to unvisited\n        //     } else if (nodeState === NodeState.NODE_IS_TARGET) {\n        //         // TODO: change nodestate to unvisited\n        //     } else {\n        //         // do nothing\n        //     }\n        // }\n    }\n\n    decideNodeState(x, y, source, target, walls, visitedNodes) {\n        if (x === source.x && y === source.y) {\n            return NodeState.NODE_IS_SOURCE;\n        } else if (x === target.x && y === target.y) {\n            return NodeState.NODE_IS_TARGET;\n        } else if (\n            walls.some((position) => position.x === x && position.y === y)\n        ) {\n            return NodeState.NODE_IS_WALL;\n        } else if (\n            visitedNodes.some(\n                (position) => position.x === x && position.y === y\n            )\n        ) {\n            return NodeState.NODE_VISITED;\n        }\n        return NodeState.NODE_UNVISITED;\n    }\n\n    render() {\n        const {\n            rows,\n            columns,\n            source,\n            target,\n            walls,\n            visitedNodes,\n        } = this.props;\n        const paddingX = (window.innerWidth - columns * 20) / 2;\n        const paddingY = (window.innerHeight - 190 - rows * 20) / 2;\n        const nodes = [];\n\n        for (var x = 1; x <= rows; x++) {\n            for (var y = 1; y <= columns; y++) {\n                const key = \"node-\" + x + \"-\" + y;\n                const nodeState = this.decideNodeState(\n                    x,\n                    y,\n                    source,\n                    target,\n                    walls,\n                    visitedNodes\n                );\n\n                nodes.push(\n                    <Node\n                        key={key}\n                        position={new Position(x, y)}\n                        id={key}\n                        nodeState={nodeState}\n                        onMouseDown={(nodeState, position) =>\n                            this.handleMouseDown(nodeState, position)\n                        }\n                        onMouseUp={(nodeState, position) =>\n                            this.handleMouseUp(nodeState, position)\n                        }\n                        onMouseEnter={(nodeState, position) =>\n                            this.handleMouseEnter(nodeState, position)\n                        }\n                        onMouseLeave={(nodeState, position) =>\n                            this.handleMouseLeave(nodeState, position)\n                        }\n                    />\n                );\n            }\n        }\n        return (\n            <section\n                className=\"grid-container\"\n                style={{\n                    paddingTop: paddingY,\n                    paddingRight: paddingX,\n                    paddingBottom: paddingY,\n                    paddingLeft: paddingX,\n                }}\n            >\n                {nodes}\n            </section>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./insights.css\";\n\nconst Insights = (props) => {\n    const { insights } = props;\n    return (\n        <section className=\"insights-container\">\n            <div>\n                <p>{insights}</p>\n            </div>\n        </section>\n    );\n};\n\nexport default Insights;\n","import React from \"react\";\nimport \"./copyright.css\";\nconst Copyright = () => {\n    return (\n        <section className=\"copyright-container\">\n            <div className=\"github-links\">\n                <a href=\"https://github.com/shantanu0323\">\n                    <i className=\"fab fa-github-square\"></i>\n                </a>\n            </div>\n            <div className=\"copyright\">\n                Made with <i className=\"fas fa-heart text-danger\"></i> by{\" \"}\n                <a href=\"https://shantanu0323.github.io\">Shantanu Pramanik</a>\n            </div>\n            <div className=\"social-links\">\n                <a href=\"https://www.linkedin.com/in/shantanu-pramanik/\">\n                    <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"https://www.facebook.com/shantanu.pramanik1\">\n                    <i className=\"fab fa-facebook-square\"></i>\n                </a>\n                <a href=\"https://www.twitter.com/shantanu0323/\">\n                    <i className=\"fab fa-twitter-square\"></i>\n                </a>\n                <a href=\"https://www.instagram.com/shantanu0323/\">\n                    <i className=\"fab fa-instagram-square\"></i>\n                </a>\n            </div>\n        </section>\n    );\n};\n\nexport default Copyright;\n","import NodeState from \"../components/Node/node_state\";\n\nexport default class Node {\n    constructor(\n        position,\n        distance = Infinity,\n        nodeState = NodeState.NODE_UNVISITED\n    ) {\n        this.position = position;\n        this.distance = distance;\n        this.nodeState = nodeState;\n    }\n}\n","import Node from \"./node\";\nimport NodeState from \"../components/Node/node_state\";\nimport Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nconst mesh = [];\nlet unvisitedNodes = [];\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    for (let i = 1; i <= window.rows; i++) {\n        const row = [];\n        for (let j = 1; j <= window.columns; j++) {\n            const node = new Node(new Position(i, j));\n            if (isEqual(node.position, source)) {\n                node.nodeState = NodeState.NODE_IS_SOURCE;\n                node.distance = 0;\n            } else if (isEqual(node.position, target)) {\n                node.nodeState = NodeState.NODE_IS_TARGET;\n            }\n            unvisitedNodes.push(node);\n            row[j] = node;\n        }\n        mesh[i] = row;\n    }\n    walls.forEach((position) => {\n        mesh[position.x][position.y].nodeState = NodeState.NODE_IS_WALL;\n    });\n};\n\nconst getNonWallNeighbours = (node) => {\n    const neighbourPositions = getNeighbours(\n        node.position,\n        window.rows,\n        window.columns\n    );\n    const neighbours = [];\n    neighbourPositions.map((position) => {\n        const node = mesh[position.x][position.y];\n        if (node.nodeState !== NodeState.NODE_IS_WALL) {\n            neighbours.push(node);\n            return true;\n        }\n        return false;\n    });\n\n    return neighbours;\n};\n\nconst getPreviousNodeInPath = (currNode) => {\n    const neighbours = getNonWallNeighbours(currNode).filter(\n        (node) =>\n            mesh[node.position.x][node.position.y].nodeState ===\n            NodeState.NODE_VISITED\n    );\n    let min = Infinity;\n    let prevNode;\n    for (let i = 0; i < neighbours.length; i++) {\n        const node = neighbours[i];\n        if (node.distance < min) {\n            min = node.distance;\n            prevNode = node;\n        }\n    }\n    return prevNode;\n};\n\nconst getNodesInPath = (visitedNodes) => {\n    const path = [];\n    let currNode = visitedNodes[visitedNodes.length - 1]; // target\n    while (currNode.distance > 1) {\n        currNode = getPreviousNodeInPath(currNode);\n        path.unshift(currNode);\n    }\n    return path;\n};\n\nconst getVisitedNodes = (target) => {\n    const visitedNodes = [];\n\n    while (unvisitedNodes.length > 0) {\n        let minDist = Infinity;\n        let currNode = undefined;\n        for (let i = 0; i < unvisitedNodes.length; i++) {\n            if (unvisitedNodes[i].distance < minDist) {\n                minDist = unvisitedNodes[i].distance;\n                currNode = unvisitedNodes[i];\n            }\n        }\n        if (currNode === undefined) {\n            console.log(\"Target NOT Reachable\");\n            break;\n        }\n\n        visitedNodes.push(currNode);\n        unvisitedNodes = unvisitedNodes.filter(\n            (node) => !isEqual(node.position, currNode.position)\n        );\n        if (isEqual(currNode.position, target)) {\n            console.log(\"TARGET REACHED\");\n            break;\n        }\n        currNode.nodeState =\n            currNode.nodeState === NodeState.NODE_IS_SOURCE\n                ? NodeState.NODE_IS_SOURCE\n                : NodeState.NODE_VISITED;\n\n        getNonWallNeighbours(currNode).forEach((node) => {\n            const alt = currNode.distance + 1;\n            node.distance = alt < node.distance ? alt : node.distance;\n        });\n    }\n\n    return visitedNodes;\n};\n\nconst performDijkstra = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    // perform dijkstra(graph, source, target) on the graph and get the visited nodes in order\n    const visitedNodes = getVisitedNodes(target);\n    const path = getNodesInPath(visitedNodes);\n    return { visitedNodes, path };\n};\n\nexport default performDijkstra;\n","const resetSourceAndTarget = () => {\n    const sourceDom = document.querySelector(\".node.node-source\");\n    sourceDom.classList.remove(\"path-to-top\");\n    sourceDom.classList.remove(\"path-to-right\");\n    sourceDom.classList.remove(\"path-to-bottom\");\n    sourceDom.classList.remove(\"path-to-left\");\n\n    const targetDom = document.querySelector(\".node.node-target\");\n    targetDom.classList.remove(\"path-to-top\");\n    targetDom.classList.remove(\"path-to-right\");\n    targetDom.classList.remove(\"path-to-bottom\");\n    targetDom.classList.remove(\"path-to-left\");\n};\n\nexport default resetSourceAndTarget;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar/navbar\";\nimport Legend from \"./components/Legend/legend\";\nimport Grid from \"./components/Grid/grid\";\nimport Position, { isEqual } from \"./helper/position\";\nimport Insights from \"./components/Insights/insights\";\nimport Copyright from \"./components/Copyright/copyright\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport performDijkstra from \"./algorithms/dijkstra\";\nimport resetSourceAndTarget from \"./helper/initialise\";\n\nclass App extends Component {\n    componentDidMount() {\n        // Include the FontAwesome Library\n        const s = document.createElement(\"script\");\n        s.type = \"text/javascript\";\n        s.async = true;\n        s.crossOrigin = \"anonymous\";\n        s.src = \"https://kit.fontawesome.com/f7fe82406d.js\";\n        document.body.appendChild(s);\n\n        const gridHeight = window.innerHeight - 190;\n        const gridWidth = window.innerWidth;\n\n        const rows = parseInt((gridHeight - 40) / 20);\n\n        const columns = parseInt((gridWidth - 40) / 20);\n        const source = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.25 * columns)\n        );\n        const target = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.75 * columns)\n        );\n        this.setState({ rows, columns, source, target });\n    }\n\n    state = {\n        selectedAlgorithmId: \"algo-dijkstra\",\n        selectedSpeedId: \"speed-fast\",\n        speed: 15,\n        rows: 0,\n        columns: 0,\n        source: new Position(-1, -1),\n        target: new Position(-1, -1),\n        walls: [],\n        visitedNodes: [],\n    };\n\n    setAlgorithmId = (selectedAlgorithmId) => {\n        this.setState({ selectedAlgorithmId });\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setSpeedId = (selectedSpeedId, speed) => {\n        this.setState({ selectedSpeedId, speed });\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setNodeAsSource = (position) => {\n        // console.log(`SOURCE: ${position}`);\n        if (\n            !(\n                position.x === this.state.target.x &&\n                position.y === this.state.target.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ source: position, walls });\n        }\n    };\n\n    setNodeAsTarget = (position) => {\n        // console.log(`TARGET: ${position}`);\n        if (\n            !(\n                position.x === this.state.source.x &&\n                position.y === this.state.source.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ target: position, walls });\n        }\n    };\n\n    toggleWall = (position) => {\n        // console.log(position);\n        let walls = this.state.walls;\n        if (\n            walls.some((node) => node.x === position.x && node.y === position.y)\n        ) {\n            // Node is a wall -> change to unvisited\n            walls = walls.filter(\n                (node) => !(node.x === position.x && node.y === position.y)\n            );\n        } else {\n            walls.push(position);\n        }\n        this.setState({ walls });\n    };\n\n    putNodeInPath = (position, node) => {\n        if (isEqual(position, new Position(node.x - 1, node.y))) return \"top\";\n        if (isEqual(position, new Position(node.x, node.y + 1))) return \"right\";\n        if (isEqual(position, new Position(node.x + 1, node.y)))\n            return \"bottom\";\n        if (isEqual(position, new Position(node.x, node.y - 1))) return \"left\";\n        return \"null\";\n    };\n\n    startWalking = () => {\n        resetSourceAndTarget();\n        for (let i = 1; i <= this.state.rows; i++) {\n            for (let j = 1; j <= this.state.columns; j++) {\n                const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                if (\n                    nodeDom.classList.contains(\"node-visited\") ||\n                    nodeDom.classList.contains(\"node-path\")\n                ) {\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                }\n            }\n        }\n        setTimeout(() => {\n            console.log(\"START WALKING\");\n            const { visitedNodes, path } = performDijkstra(\n                this.state.rows,\n                this.state.columns,\n                this.state.source,\n                this.state.target,\n                this.state.walls\n            );\n            for (let i = 0; i < visitedNodes.length; i++) {\n                setTimeout(() => {\n                    const nodeDom = document.querySelector(\n                        `#node-${visitedNodes[i].position.x}-${visitedNodes[i].position.y}`\n                    );\n                    if (nodeDom.classList.contains(\"node-unvisited\")) {\n                        nodeDom.classList.remove(\"node-unvisited\");\n                        nodeDom.classList.add(\"node-visited\");\n                    }\n                    if (i === visitedNodes.length - 1)\n                        setTimeout(() => {\n                            if (\n                                visitedNodes[i].position.x ===\n                                    this.state.target.x &&\n                                visitedNodes[i].position.y ===\n                                    this.state.target.y\n                            ) {\n                                document\n                                    .querySelector(\".node.node-source\")\n                                    .classList.add(\n                                        `path-to-${this.putNodeInPath(\n                                            path[0].position,\n                                            this.state.source\n                                        )}`\n                                    );\n                                console.log(path[path.length - 1]);\n                                for (let k = 0; k < path.length; k++) {\n                                    setTimeout(() => {\n                                        const node = path[k];\n                                        const nodeDom = document.querySelector(\n                                            `#node-${node.position.x}-${node.position.y}`\n                                        );\n                                        nodeDom.classList.remove(\n                                            \"node-visited\"\n                                        );\n                                        nodeDom.classList.add(\"node-path\");\n                                        if (k === path.length - 1) {\n                                            document\n                                                .querySelector(\n                                                    \".node.node-target\"\n                                                )\n                                                .classList.add(\n                                                    `path-to-${this.putNodeInPath(\n                                                        path[path.length - 1]\n                                                            .position,\n                                                        this.state.target\n                                                    )}`\n                                                );\n                                        }\n                                    }, this.state.speed * k);\n                                }\n                            } else {\n                                alert(\"Target NOT Reachable\");\n                            }\n                        }, this.state.speed + 500);\n                }, this.state.speed * i);\n            }\n        }, 500);\n    };\n\n    clearPath = () => {\n        this.setState({ visitedNodes: [] });\n        for (let i = 1; i <= this.state.rows; i++) {\n            for (let j = 1; j <= this.state.columns; j++) {\n                const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                if (\n                    nodeDom.classList.contains(\"node-visited\") ||\n                    nodeDom.classList.contains(\"node-path\")\n                ) {\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                }\n            }\n        }\n        resetSourceAndTarget();\n    };\n\n    destructWalls = () => {\n        this.setState({ walls: [] });\n    };\n\n    resetMesh = () => {\n        this.clearPath();\n        this.destructWalls();\n    };\n\n    updateMaze = (walls, visitedNodes) => {\n        this.setState({ walls, visitedNodes });\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <NavBar\n                    selectedAlgorithmId={this.state.selectedAlgorithmId}\n                    selectedSpeedId={this.state.selectedSpeedId}\n                    onAlgorithmChanged={this.setAlgorithmId}\n                    onSpeedChanged={this.setSpeedId}\n                    startWalking={this.startWalking}\n                    clearPath={this.clearPath}\n                    destructWalls={this.destructWalls}\n                    resetMesh={this.resetMesh}\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    speed={this.state.speed}\n                    onMazeCreated={this.updateMaze}\n                />\n                <Grid\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    walls={this.state.walls}\n                    visitedNodes={this.state.visitedNodes}\n                    setNodeAsSource={this.setNodeAsSource}\n                    setNodeAsTarget={this.setNodeAsTarget}\n                    toggleWall={this.toggleWall}\n                />\n                <Legend />\n                <Insights insights=\"Insights\" />\n                <Copyright />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.Fragment>\n        <App />\n    </React.Fragment>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}