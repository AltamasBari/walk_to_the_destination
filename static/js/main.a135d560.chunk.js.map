{"version":3,"sources":["components/Node/node_state.jsx","logo.svg","components/NavBar/NavItem/navitem.jsx","components/NavBar/navbar.jsx","components/Node/node.jsx","components/Node/position.jsx","components/Legend/legend.jsx","components/Grid/grid.jsx","components/Insights/insights.jsx","components/Copyright/copyright.jsx","algorithms/dijkstra.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NODE_UNVISITED","NODE_VISITED","NODE_IS_WALL","NODE_IS_SOURCE","NODE_IS_TARGET","NODE_FALLS_IN_PATH","NODE_IS_VISITING","NavItem","state","description","getSelectedOptionDescription","props","selectedOption","options","handleHover","option","setState","this","onChanged","hasDescription","undefined","optionNamesContainerWidth","selectedOptionObject","getSelectedOption","className","style","width","map","key","id","textAlign","onMouseEnter","onMouseLeave","onClick","speed","name","left","filter","Component","NavBar","algorithms","href","title","mazes","speeds","document","querySelector","classList","add","selectedAlgorithmId","selectedSpeedId","onAlgorithmChanged","onSpeedChanged","startWalking","Fragment","src","logo","height","alt","loading","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","showAlgorithmOptionsContainer","getSelectedAlgorithm","showSpeedOptionsContainer","getSelectedSpeed","algorithm","selectedMazeId","maze","NodeState","require","Node","nodeState","position","onMouseDown","onMouseUp","getNodeStateClass","x","y","data-x","data-y","classes","Position","Legend","disabled","Grid","isMousePressed","movingSource","movingTarget","toggleWall","setNodeAsSource","setNodeAsTarget","source","target","walls","visitedNodes","some","rows","columns","paddingX","window","innerWidth","paddingY","innerHeight","nodes","decideNodeState","push","handleMouseDown","handleMouseUp","handleMouseEnter","handleMouseLeave","paddingTop","paddingRight","paddingBottom","paddingLeft","Insights","insights","Copyright","getPreviousNodeInPath","mesh","dist","currNode","prevNode","neighbours","node","getNeighbours","min","i","length","getVisitedNodes","unvisitedNodes","minDist","parseInt","split","console","log","forEach","where","u","j","getNodeKey","path","unshift","getNodesInPath","performDijkstra","Array","col","initialiseMesh","App","setAlgorithmId","remove","setMazeId","setSpeedId","nodeDom","contains","setTimeout","k","alert","s","createElement","async","crossOrigin","body","appendChild","gridHeight","gridWidth","onMazeChanged","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kHAAAA,EAAOC,QAAU,CACbC,eAAgB,EAChBC,aAAc,EACdC,cAAe,EACfC,eAAgB,GAChBC,eAAgB,IAChBC,mBAAoB,GACpBC,iBAAkB,I,sBCPtBR,EAAOC,QAAU,IAA0B,kC,+TCiF5BQ,E,4MA9EXC,MAAQ,CACJC,YAAa,EAAKC,6BACd,EAAKC,MAAMC,eACX,EAAKD,MAAME,U,EAInBC,YAAc,SAACC,GACX,EAAKC,SAAS,CAAEP,YAAaM,EAAON,e,uDAG9B,IAAD,SAC0CQ,KAAKN,MAA5CE,EADH,EACGA,QAASD,EADZ,EACYA,eAAgBM,EAD5B,EAC4BA,UAC3BC,OACyBC,IAA3BP,EAAQ,GAAGJ,YACTY,EAA4BF,EAAiB,MAAQ,OACvDG,EAAuBL,KAAKM,kBAC5BX,EACAC,GAGJ,OACI,yBAAKW,UAAU,qBACX,yBACIA,UAAU,yBACVC,MAAO,CAAEC,MAAOL,IAEfR,EAAQc,KAAI,SAACZ,GAAD,OACT,4BACIa,IAAKb,EAAOc,GACZJ,MAAO,CACHK,UAAWX,EAAiB,QAAU,UAE1CK,UACIT,EAAOc,KAAOjB,EAAiB,SAAW,GAE9CmB,aAAc,kBAAM,EAAKjB,YAAYC,IACrCiB,aAAc,kBACV,EAAKlB,YAAYQ,IAErBW,QAAS,kBACLf,EACIH,EAAOc,QACUT,IAAjBL,EAAOmB,MACD,KACAnB,EAAOmB,SAIpBnB,EAAOoB,UAInBhB,EACG,yBACIK,UAAU,+BACVC,MAAO,CACHC,MAAO,MACPU,KAAMf,IAGTJ,KAAKT,MAAMC,aAEhB,Q,wCAKEG,EAAgBC,GAE9B,OADeA,EAAQwB,QAAO,SAACtB,GAAD,OAAYA,EAAOc,KAAOjB,KAC1C,K,mDAEWA,EAAgBC,GACzC,IAAME,EAASE,KAAKM,kBAAkBX,EAAgBC,GACtD,YAAkBO,IAAXL,EAAuB,KAAOA,EAAON,gB,GA3E9B6B,aCuVPC,G,kNAlVX/B,MAAQ,CACJgC,WAAY,CACR,CACIX,GAAI,gBACJM,KAAM,aACN1B,YACI,6BACI,iFAEI,2CAFJ,YAGI,8CAEI,iCALR,4BAO6B,4CAP7B,KASI,gCATJ,8GAaA,4BACI,2GAGI,4CAHJ,KAKA,0LAMA,iHAGI,wCAHJ,mEAMI,wCANJ,sGAUI,gCAVJ,8EAaI,gCAbJ,qCAeI,gCAfJ,UAiBI,gCAjBJ,gJAsBA,wKAKI,4CALJ,iDAQA,8LAKI,4CALJ,uLAWA,mLAOJ,mTAWZ,CACIoB,GAAI,UACJM,KAAM,KACN1B,YACI,6BACI,yDAC0B,wCAD1B,OAC+C,IAC3C,0CAFJ,kCAKA,yDAEI,6BAFJ,0FAIwC,IACpC,qCALJ,YAMI,6BANJ,uCAOwC,6BAPxC,mCAQoC,qCAEtB,IAVd,iCAWkC,6BAXlC,8BAY+B,6BAZ/B,2DAcS,6BAdT,yBAe0B,6BAf1B,sDAiBI,qCAjBJ,QAiB2B,qCAjB3B,iDAkBsC,qCAAmB,IAlBzD,kKAsBc,qCAtBd,gBAuBI,qCAvBJ,gBAuBmC,qCAC/B,6BAxBJ,0FA0BuC,IACnC,qCA3BJ,wCA4Bc,6BA5Bd,6FA8B4C,IACxC,qCA/BJ,6IAkCiB,OAK7B,CACIoB,GAAI,cACJM,KAAM,SACN1B,YACI,6BACI,+BACK,+CADL,yVAUA,oEAEI,uBACIgC,KAAK,oCACLC,MAAM,+BAFV,+BAFJ,0cAkBI,uBAAGD,KAAK,gBAAgBC,MAAM,WAA9B,YAlBJ,oGA4BhBC,MAAO,CACH,CAAEd,GAAI,YAAaM,KAAM,UACzB,CAAEN,GAAI,0BAA2BM,KAAM,uBAE3CS,OAAQ,CACJ,CAAEf,GAAI,eAAgBM,KAAM,SAAUD,MAAO,IAC7C,CAAEL,GAAI,aAAcM,KAAM,OAAQD,MAAO,IACzC,CAAEL,GAAI,eAAgBM,KAAM,SAAUD,MAAO,IAC7C,CAAEL,GAAI,aAAcM,KAAM,OAAQD,MAAO,IACzC,CAAEL,GAAI,eAAgBM,KAAM,SAAUD,MAAO,M,8EAKrCW,SAASC,cAAc,gCAC/BC,UAAUC,IAAI,U,kDAINH,SAASC,cAAc,4BAC/BC,UAAUC,IAAI,U,+BAGZ,IAAD,EASD/B,KAAKN,MAPLsC,EAFC,EAEDA,oBAEAC,EAJC,EAIDA,gBACAC,EALC,EAKDA,mBAEAC,EAPC,EAODA,eACAC,EARC,EAQDA,aAEJ,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAK9B,UAAU,qEACX,0BAAMA,UAAU,qBACZ,yBACI+B,IAAKC,IACL9B,MAAM,KACN+B,OAAO,KACPjC,UAAU,2BACVkC,IAAI,GACJC,QAAQ,OACR1B,QAAS,kBAAMoB,OAEnB,0DAEJ,4BACI7B,UAAU,iBACVoC,KAAK,SACLC,cAAY,WACZC,cAAY,aACZC,gBAAc,YACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMzC,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BK,GAAG,aACzC,wBAAIL,UAAU,cACV,wBAAIA,UAAU,wBACV,4BACIA,UAAU,qBACVS,QAAShB,KAAKiD,+BAEd,8BAEQjD,KAAKkD,qBACDlB,GACFd,MAEF,IAVZ,YAYI,uBAAGX,UAAU,+BAerB,wBAAIA,UAAU,wBACV,4BACIA,UAAU,iBACVS,QAAShB,KAAKmD,2BAFlB,UAIY,IACR,8BAEQnD,KAAKoD,iBACDnB,GACFf,MAEF,IACR,uBAAGX,UAAU,+BAMjC,yBAAKA,UAAU,+BACX,kBAAC,EAAD,CACIX,QAASI,KAAKT,MAAMgC,WACpB5B,eAAgBqC,EAChB/B,UAAWiC,KAUnB,yBAAK3B,UAAU,2BACX,kBAAC,EAAD,CACIX,QAASI,KAAKT,MAAMoC,OACpBhC,eAAgBsC,EAChBhC,UAAWkC,Q,2CAOVH,GAIjB,OAHkBhC,KAAKT,MAAMgC,WAAWH,QACpC,SAACiC,GAAD,OAAeA,EAAUzC,KAAOoB,KAEnB,K,sCAGLsB,GAIZ,OAHatD,KAAKT,MAAMmC,MAAMN,QAC1B,SAACmC,GAAD,OAAUA,EAAK3C,KAAO0C,KAEd,K,uCAGCrB,GAIb,OAHcjC,KAAKT,MAAMoC,OAAOP,QAC5B,SAACH,GAAD,OAAWA,EAAML,KAAOqB,KAEf,O,GA/UAZ,cCHfmC,G,YAAYC,EAAQ,IA6DXC,E,uKA3DD,IAAD,EAQD1D,KAAKN,MANLiE,EAFC,EAEDA,UACAC,EAHC,EAGDA,SACAC,EAJC,EAIDA,YACAC,EALC,EAKDA,UACAhD,EANC,EAMDA,aACAC,EAPC,EAODA,aAEJ,YAAqBZ,IAAjBW,EAEI,yBAAKP,UAAWP,KAAK+D,kBAAkBJ,KAMvC,yBACIpD,UAAWP,KAAK+D,kBAAkBJ,GAClC/C,GAAE,eAAUgD,EAASI,EAAnB,YAAwBJ,EAASK,GACnCC,SAAQN,EAASI,EACjBG,SAAQP,EAASK,EACjBJ,YAAa,kBAAMA,EAAYF,EAAWC,IAC1CE,UAAW,kBAAMA,EAAUH,EAAWC,IACtC9C,aAAc,kBAAMA,EAAa6C,EAAWC,IAC5C7C,aAAc,kBAAMA,EAAa4C,EAAWC,Q,wCAQ1CD,GACd,IAAIS,EAAU,aACd,OAAQT,GACJ,KAAKH,EAAUzE,eACXqF,GAAW,YACX,MACJ,KAAKZ,EAAUxE,aACXoF,GAAW,UACX,MACJ,KAAKZ,EAAUvE,aACXmF,GAAW,OACX,MACJ,KAAKZ,EAAUtE,eACXkF,GAAW,SACX,MACJ,KAAKZ,EAAUrE,eACXiF,GAAW,SACX,MACJ,QACIA,GAAW,YAGnB,OAAOA,M,GAxDI/C,aCCJgD,MALf,SAAkBL,EAAGC,GACjBjE,KAAKgE,EAAIA,EACThE,KAAKiE,EAAIA,GCEPT,EAAYC,EAAQ,GAyDXa,EAvDA,WACX,OACI,6BAAS/D,UAAU,oBACf,4BACI,4BACI,6BACI,kBAAC,EAAD,CACIoD,UAAWH,EAAUzE,eACrB6E,SAAU,IAAIS,GAAU,GAAI,GAC5BE,UAAQ,IAEZ,0BAAMhE,UAAU,QAAhB,eAGR,4BACI,6BACI,kBAAC,EAAD,CACIoD,UAAWH,EAAUxE,aACrB4E,SAAU,IAAIS,GAAU,GAAI,KAEhC,0BAAM9D,UAAU,QAAhB,aAGR,4BACI,6BACI,kBAAC,EAAD,CACIoD,UAAWH,EAAUvE,aACrB2E,SAAU,IAAIS,GAAU,GAAI,KAEhC,0BAAM9D,UAAU,QAAhB,UAGR,4BACI,6BACI,kBAAC,EAAD,CACIoD,UAAWH,EAAUtE,eACrB0E,SAAU,IAAIS,GAAU,GAAI,KAEhC,0BAAM9D,UAAU,QAAhB,YAGR,4BACI,6BACI,kBAAC,EAAD,CACIoD,UAAWH,EAAUrE,eACrByE,SAAU,IAAIS,GAAU,GAAI,KAEhC,0BAAM9D,UAAU,QAAhB,e,gBCqGTiE,G,kNAnJXjF,MAAQ,CACJkF,gBAAgB,EAChBC,cAAc,EACdC,cAAc,G,4DAGJhB,EAAWC,GACrB5D,KAAKD,SAAS,CAAE0E,gBAAgB,IAI5Bd,IAAcH,IAAUtE,eACxBc,KAAKD,SAAS,CAAE2E,cAAc,IACvBf,IAAcH,IAAUrE,gBAC/Ba,KAAKD,SAAS,CAAE4E,cAAc,M,sCAKtBhB,EAAWC,GACvB5D,KAAKD,SAAS,CAAE0E,gBAAgB,IAI5Bd,IAAcH,IAAUtE,eACxBc,KAAKD,SAAS,CAAE2E,cAAc,IACvBf,IAAcH,IAAUrE,eAC/Ba,KAAKD,SAAS,CAAE4E,cAAc,IAE9B3E,KAAKN,MAAMkF,WAAWhB,K,uCAGbD,EAAWC,GACpB5D,KAAKT,MAAMkF,iBAIPzE,KAAKT,MAAMmF,aAEX1E,KAAKN,MAAMmF,gBAAgBjB,GACpB5D,KAAKT,MAAMoF,aAElB3E,KAAKN,MAAMoF,gBAAgBlB,GAI3B5D,KAAKN,MAAMkF,WAAWhB,M,uCAIjBD,EAAWC,M,sCAeZI,EAAGC,EAAGc,EAAQC,EAAQC,EAAOC,GACzC,OAAIlB,IAAMe,EAAOf,GAAKC,IAAMc,EAAOd,EACxBT,IAAUtE,eACV8E,IAAMgB,EAAOhB,GAAKC,IAAMe,EAAOf,EAC/BT,IAAUrE,eAEjB8F,EAAME,MAAK,SAACvB,GAAD,OAAcA,EAASI,IAAMA,GAAKJ,EAASK,IAAMA,KAErDT,IAAUvE,aAEjBiG,EAAaC,MACT,SAACvB,GAAD,OAAcA,EAASI,IAAMA,GAAKJ,EAASK,IAAMA,KAG9CT,IAAUxE,aAEdwE,IAAUzE,iB,+BAgBjB,IAbM,IAAD,SAQDiB,KAAKN,MANL0F,EAFC,EAEDA,KACAC,EAHC,EAGDA,QACAN,EAJC,EAIDA,OACAC,EALC,EAKDA,OACAC,EANC,EAMDA,MACAC,EAPC,EAODA,aAEEI,GAAYC,OAAOC,WAAuB,GAAVH,GAAgB,EAChDI,GAAYF,OAAOG,YAAc,IAAa,GAAPN,GAAa,EACpDO,EAAQ,GAEL3B,EAAI,EAAGA,GAAKoB,EAAMpB,IACvB,IAAK,IAAIC,EAAI,EAAGA,GAAKoB,EAASpB,IAAK,CAC/B,IAAMtD,EAAM,QAAUqD,EAAI,IAAMC,EAC1BN,EAAY3D,KAAK4F,gBACnB5B,EACAC,EACAc,EACAC,EACAC,EACAC,GAGJS,EAAME,KACF,kBAAC,EAAD,CACIlF,IAAKA,EACLiD,SAAU,IAAIS,EAASL,EAAGC,GAC1BrD,GAAID,EACJgD,UAAWA,EACXE,YAAa,SAACF,EAAWC,GAAZ,OACT,EAAKkC,gBAAgBnC,EAAWC,IAEpCE,UAAW,SAACH,EAAWC,GAAZ,OACP,EAAKmC,cAAcpC,EAAWC,IAElC9C,aAAc,SAAC6C,EAAWC,GAAZ,OACV,EAAKoC,iBAAiBrC,EAAWC,IAErC7C,aAAc,SAAC4C,EAAWC,GAAZ,OACV,EAAKqC,iBAAiBtC,EAAWC,OAMrD,OACI,6BACIrD,UAAU,iBACVC,MAAO,CACH0F,WAAYT,EACZU,aAAcb,EACdc,cAAeX,EACfY,YAAaf,IAGhBK,O,GA9IEtE,cCQJiF,G,MAXE,SAAC5G,GAAW,IACjB6G,EAAa7G,EAAb6G,SACR,OACI,6BAAShG,UAAU,sBACf,6BACI,2BAAIgG,OCwBLC,G,MA9BG,WACd,OACI,6BAASjG,UAAU,uBACf,yBAAKA,UAAU,gBACX,uBAAGiB,KAAK,mCACJ,uBAAGjB,UAAU,2BAGrB,yBAAKA,UAAU,aAAf,aACc,uBAAGA,UAAU,6BAD3B,MAC8D,IAC1D,uBAAGiB,KAAK,kCAAR,sBAEJ,yBAAKjB,UAAU,gBACX,uBAAGiB,KAAK,kDACJ,uBAAGjB,UAAU,qBAEjB,uBAAGiB,KAAK,+CACJ,uBAAGjB,UAAU,4BAEjB,uBAAGiB,KAAK,yCACJ,uBAAGjB,UAAU,2BAEjB,uBAAGiB,KAAK,2CACJ,uBAAGjB,UAAU,iC,qBCyD3BkG,EAAwB,SAACC,EAAMC,EAAMC,EAAUxB,EAAMC,GAMvD,IALA,IAIIwB,EAJEC,EAjBY,SAAClD,EAAUwB,EAAMC,GAGnC,IAAMyB,EAAa,GAOnB,OALAA,EAAWjB,KAAK,IAAIxB,EAAST,EAASI,EAAI,EAAGJ,EAASK,IACtD6C,EAAWjB,KAAK,IAAIxB,EAAST,EAASI,EAAGJ,EAASK,EAAI,IACtD6C,EAAWjB,KAAK,IAAIxB,EAAST,EAASI,EAAI,EAAGJ,EAASK,IACtD6C,EAAWjB,KAAK,IAAIxB,EAAST,EAASI,EAAGJ,EAASK,EAAI,IAE/C6C,EAAW1F,QACd,SAAC2F,GAAD,OACIA,EAAK/C,GAAK,GAAK+C,EAAK/C,GAAKoB,GAAQ2B,EAAK9C,GAAK,GAAK8C,EAAK9C,GAAKoB,KAK/C2B,CAAcJ,EAAUxB,EAAMC,GAASjE,QACtD,SAAC2F,GAAD,OAAmC,IAAzBL,EAAKK,EAAK/C,GAAG+C,EAAK9C,MAE5BgD,EAnFS,IAqFJC,EAAI,EAAGA,EAAIJ,EAAWK,OAAQD,IAAK,CACxC,IAAMH,EAAOD,EAAWI,GACpBP,EAAK,GAAD,OAAII,EAAK/C,EAAT,YAAc+C,EAAK9C,IAAOgD,IAC9BA,EAAMN,EAAK,GAAD,OAAII,EAAK/C,EAAT,YAAc+C,EAAK9C,IAC7B4C,EAAWE,GAGnB,OAAOF,GAaLO,EAAkB,SAACV,EAAMtB,EAAMC,EAASgC,EAAgBV,GAG1D,IAFA,IAAMzB,EAAe,GAD8C,aAM/D,IAFA,IAAIoC,EA7GK,IA8GLV,OAAQ,EACHM,EAAI,EAAGA,EAAIG,EAAeF,OAAQD,IACnCP,EAAKU,EAAeH,IAAMI,IAC1BA,EAAUX,EAAKU,EAAeH,IAC9BN,EAAWS,EAAeH,IAGlC,YAAiB/G,IAAbyG,EAEA,SAGJ1B,EAAaW,KACT,IAAIxB,EACAkD,SAASX,EAASY,MAAM,KAAK,IAC7BD,SAASX,EAASY,MAAM,KAAK,MAGrCH,EAAiBA,EAAejG,QAAO,SAAC2F,GAAD,OAAUA,IAASH,KAEtDF,EAAKE,EAASY,MAAM,KAAK,IAAIZ,EAASY,MAAM,KAAK,MACjDhE,IAAUrE,gBAEVsI,QAAQC,IAAI,kBACZ,UAEJhB,EAAKa,SAASX,EAASY,MAAM,KAAK,KAC9BD,SAASX,EAASY,MAAM,KAAK,KAE7Bd,EAAKa,SAASX,EAASY,MAAM,KAAK,KAC9BD,SAASX,EAASY,MAAM,KAAK,OAC3BhE,IAAUtE,eACVA,iBACAsE,IAAUxE,iBAEpB,CAAC,QAAS,QAAS,QAAS,QAAQ2I,SAAQ,SAACC,GACzC,IAAIC,EArHG,SAACd,EAAMa,EAAOlB,EAAMtB,EAAMC,GAAa,IAAD,EACxC0B,EAAKS,MAAM,KAD6B,mBAChDN,EADgD,KAC7CY,EAD6C,KAIrD,OAFAZ,EAAIK,SAASL,GACbY,EAAIP,SAASO,GACLF,GACJ,IAAK,QACDV,IACA,MACJ,IAAK,QACDY,IACA,MACJ,IAAK,QACDZ,IACA,MACJ,IAAK,OACDY,IACA,MAEJ,QACIZ,EAAIY,GAAK,EAGjB,OACIZ,EAAI,GACJA,EAAI9B,GACJ0C,EAAI,GACJA,EAAIzC,GACJqB,EAAKa,SAASL,IAAIK,SAASO,MAAQtE,IAAUvE,aAEtC,KAEL,GAAN,OAAUiI,EAAV,YAAeY,GAsFCC,CAAWnB,EAAUgB,EAAOlB,EAAMtB,EAAMC,GAChD,GAAU,OAANwC,EAAY,CACZ,IAAMpF,EAAMkE,EAAKC,GAAY,EAC7BD,EAAKkB,GAAKpF,EAAMkE,EAAKkB,GAAKpF,EAAMkE,EAAKkB,UAzC1CR,EAAeF,OAAS,GAAG,kBA0B1B,MAoBR,IAAMa,EA3Da,SAACtB,EAAMC,EAAM3B,EAAQI,EAAMC,GAG9C,IAFA,IAAM2C,EAAO,GACTpB,EAAW5B,EACR2B,EAAK,GAAD,OAAIC,EAAS5C,EAAb,YAAkB4C,EAAS3C,IAAO,GACzC2C,EAAWH,EAAsBC,EAAMC,EAAMC,EAAUxB,EAAMC,GAC7D2C,EAAKC,QAAQrB,GAEjB,OAAOoB,EAoDME,CACTxB,EACAC,EACAzB,EAAaA,EAAaiC,OAAS,GACnC/B,EACAC,GAEJ,MAAO,CAAEH,eAAc8C,SA2BZG,EAxBS,SAAC/C,EAAMC,EAASN,EAAQC,EAAQC,GACpDwC,QAAQC,IAAI,uBADkD,MAnK3C,SAACtC,EAAMC,EAASN,EAAQC,EAAQC,GAInD,IAHA,IAAMyB,EAAO,IAAI0B,MAAMhD,GACjBuB,EAAO,GACPU,EAAiB,GACdH,EAAI,EAAGA,GAAK9B,EAAM8B,IAAK,CAE5B,IADA,IAAMmB,EAAM,IAAID,MAAM/C,GACbyC,EAAI,EAAGA,GAAKzC,EAASyC,IAC1BO,EAAIP,GAAKtE,IAAUzE,eACfmI,IAAMnC,EAAOf,GAAK8D,IAAM/C,EAAOd,GAC/BoE,EAAIP,GAAKtE,IAAUtE,eACnByH,EAAK,GAAD,OAAIO,EAAJ,YAASY,IAAO,IAEhBZ,IAAMlC,EAAOhB,GAAK8D,IAAM9C,EAAOf,IAC/BoE,EAAIP,GAAKtE,IAAUrE,gBAEvBwH,EAAK,GAAD,OAAIO,EAAJ,YAASY,IAhBZ,KAkBLT,EAAexB,KAAf,UAAuBqB,EAAvB,YAA4BY,IAEhCpB,EAAKQ,GAAKmB,EAMd,OAJApD,EAAM0C,SAAQ,SAAC/D,GACX8C,EAAK9C,EAASI,GAAGJ,EAASK,GAAKT,IAAUvE,gBAGtC,CAAEyH,OAAMC,OAAMU,kBA8IkBiB,CACnClD,EACAC,EACAN,EACAC,EACAC,GALIyB,EAJsD,EAItDA,KAAMC,EAJgD,EAIhDA,KAAMU,EAJ0C,EAI1CA,eAJ0C,EAa/BD,EAC3BV,EACAtB,EACAC,EACAgC,EACAV,GAGJ,MAAO,CAAEzB,aArBqD,EAatDA,aAQe8C,KArBuC,EAaxCA,OCyCXO,E,4MArLXhJ,MAAQ,CACJyC,oBAAqB,gBACrBsB,eAAgB,0BAChBrB,gBAAiB,aACjBhB,MAAO,GACPmE,KAAM,EACNC,QAAS,EACTN,OAAQ,IAAIV,GAAU,GAAI,GAC1BW,OAAQ,IAAIX,GAAU,GAAI,GAC1BY,MAAO,GACPC,aAAc,I,EAGlBsD,eAAiB,SAACxG,GACd,EAAKjC,SAAS,CAAEiC,wBACJJ,SAASC,cAAc,gCAC/BC,UAAU2G,OAAO,S,EAGzBC,UAAY,SAACpF,GACT,EAAKvD,SAAS,CAAEuD,mBACJ1B,SAASC,cAAc,2BAC/BC,UAAU2G,OAAO,S,EAGzBE,WAAa,SAAC1G,EAAiBhB,GAC3B,EAAKlB,SAAS,CAAEkC,kBAAiBhB,UACrBW,SAASC,cAAc,4BAC/BC,UAAU2G,OAAO,S,EAGzB5D,gBAAkB,SAACjB,GAEf,GAEQA,EAASI,IAAM,EAAKzE,MAAMyF,OAAOhB,GACjCJ,EAASK,IAAM,EAAK1E,MAAMyF,OAAOf,EAEvC,CACE,IAAIgB,EAAQ,EAAK1F,MAAM0F,MAEnBA,EAAME,MACF,SAAC4B,GAAD,OAAUA,EAAK/C,IAAMJ,EAASI,GAAK+C,EAAK9C,IAAML,EAASK,OAG3DgB,EAAQ,EAAK1F,MAAM0F,MAAM7D,QACrB,SAAC2F,GAAD,QAAYA,EAAK/C,IAAMJ,EAASI,GAAK+C,EAAK9C,IAAML,EAASK,OAGjE,EAAKlE,SAAS,CAAEgF,OAAQnB,EAAUqB,Y,EAI1CH,gBAAkB,SAAClB,GAEf,GAEQA,EAASI,IAAM,EAAKzE,MAAMwF,OAAOf,GACjCJ,EAASK,IAAM,EAAK1E,MAAMwF,OAAOd,EAEvC,CACE,IAAIgB,EAAQ,EAAK1F,MAAM0F,MAEnBA,EAAME,MACF,SAAC4B,GAAD,OAAUA,EAAK/C,IAAMJ,EAASI,GAAK+C,EAAK9C,IAAML,EAASK,OAG3DgB,EAAQ,EAAK1F,MAAM0F,MAAM7D,QACrB,SAAC2F,GAAD,QAAYA,EAAK/C,IAAMJ,EAASI,GAAK+C,EAAK9C,IAAML,EAASK,OAGjE,EAAKlE,SAAS,CAAEiF,OAAQpB,EAAUqB,Y,EAI1CL,WAAa,SAAChB,GAEV,IAAIqB,EAAQ,EAAK1F,MAAM0F,MAEnBA,EAAME,MAAK,SAAC4B,GAAD,OAAUA,EAAK/C,IAAMJ,EAASI,GAAK+C,EAAK9C,IAAML,EAASK,KAGlEgB,EAAQA,EAAM7D,QACV,SAAC2F,GAAD,QAAYA,EAAK/C,IAAMJ,EAASI,GAAK+C,EAAK9C,IAAML,EAASK,MAG7DgB,EAAMY,KAAKjC,GAEf,EAAK7D,SAAS,CAAEkF,W,EAGpB7C,aAAe,WACX,IAAK,IAAI8E,EAAI,EAAGA,GAAK,EAAK3H,MAAM6F,KAAM8B,IAClC,IAAK,IAAIY,EAAI,EAAGA,GAAK,EAAKvI,MAAM8F,QAASyC,IAAK,CAC1C,IAAMc,EAAUhH,SAASC,cAAT,gBAAgCqF,EAAhC,YAAqCY,KAEjDc,EAAQ9G,UAAU+G,SAAS,iBAC3BD,EAAQ9G,UAAU+G,SAAS,gBAE3BD,EAAQ9G,UAAU2G,OAAO,gBACzBG,EAAQ9G,UAAU2G,OAAO,aACzBG,EAAQ9G,UAAUC,IAAI,mBAIlC+G,YAAW,WACPrB,QAAQC,IAAI,iBAQZ,IATa,MAEkBS,EAC3B,EAAK5I,MAAM6F,KACX,EAAK7F,MAAM8F,QACX,EAAK9F,MAAMwF,OACX,EAAKxF,MAAMyF,OACX,EAAKzF,MAAM0F,OALPC,EAFK,EAELA,aAAc8C,EAFT,EAESA,KAFT,WASJd,GACL4B,YAAW,WACP,IAAMF,EAAUhH,SAASC,cAAT,gBACHqD,EAAagC,GAAGlD,EADb,YACkBkB,EAAagC,GAAGjD,IAE9C2E,EAAQ9G,UAAU+G,SAAS,oBAC3BD,EAAQ9G,UAAU2G,OAAO,kBACzBG,EAAQ9G,UAAUC,IAAI,iBAEtBmF,IAAMhC,EAAaiC,OAAS,GAC5B2B,YAAW,WACP,GACI5D,EAAagC,GAAGlD,IAAM,EAAKzE,MAAMyF,OAAOhB,GACxCkB,EAAagC,GAAGjD,IAAM,EAAK1E,MAAMyF,OAAOf,EAExC,IADD,IAAD,WACW8E,GACLD,YAAW,WACP,IAAM/B,EAAOiB,EAAKe,GACZH,EAAUhH,SAASC,cAAT,gBACHkF,EAAK/C,EADF,YACO+C,EAAK9C,IAE5B2E,EAAQ9G,UAAU2G,OACd,gBAEJG,EAAQ9G,UAAUC,IAAI,eACvB,EAAKxC,MAAM0B,MAAQ8H,IAVjBA,EAAI,EAAGA,EAAIf,EAAKb,OAAQ4B,IAAM,EAA9BA,QAaTC,MAAM,0BAEX,EAAKzJ,MAAM0B,MAAQ,OAC3B,EAAK1B,MAAM0B,MAAQiG,IA/BjBA,EAAI,EAAGA,EAAIhC,EAAaiC,OAAQD,IAAM,EAAtCA,KAiCV,M,kEA3KH,IAAM+B,EAAIrH,SAASsH,cAAc,UACjCD,EAAEtG,KAAO,kBACTsG,EAAEE,OAAQ,EACVF,EAAEG,YAAc,YAChBH,EAAE3G,IAAM,4CACRV,SAASyH,KAAKC,YAAYL,GAE1B,IAAMM,EAAahE,OAAOG,YAAc,IAClC8D,EAAYjE,OAAOC,WAEnBJ,EAAOmC,UAAUgC,EAAa,IAAM,IAEpClE,EAAUkC,UAAUiC,EAAY,IAAM,IACtCzE,EAAS,IAAIV,EACfkD,SAAS,GAAMnC,GACfmC,SAAS,IAAOlC,IAEdL,EAAS,IAAIX,EACfkD,SAAS,GAAMnC,GACfmC,SAAS,IAAOlC,IAEpBrF,KAAKD,SAAS,CAAEqF,OAAMC,UAASN,SAAQC,a,+BA0JvC,OACI,kBAAC,IAAM3C,SAAP,KACI,kBAAC,EAAD,CACIL,oBAAqBhC,KAAKT,MAAMyC,oBAChCsB,eAAgBtD,KAAKT,MAAM+D,eAC3BrB,gBAAiBjC,KAAKT,MAAM0C,gBAC5BC,mBAAoBlC,KAAKwI,eACzBiB,cAAezJ,KAAK0I,UACpBvG,eAAgBnC,KAAK2I,WACrBvG,aAAcpC,KAAKoC,eAEvB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIgD,KAAMpF,KAAKT,MAAM6F,KACjBC,QAASrF,KAAKT,MAAM8F,QACpBN,OAAQ/E,KAAKT,MAAMwF,OACnBC,OAAQhF,KAAKT,MAAMyF,OACnBC,MAAOjF,KAAKT,MAAM0F,MAClBC,aAAclF,KAAKT,MAAM2F,aACzBL,gBAAiB7E,KAAK6E,gBACtBC,gBAAiB9E,KAAK8E,gBACtBF,WAAY5E,KAAK4E,aAErB,kBAAC,EAAD,CAAU2B,SAAS,aACnB,kBAAC,EAAD,W,GA1MElF,aCDEqI,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAM1H,SAAP,KACI,kBAAC,EAAD,OAEJT,SAASoI,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.a135d560.chunk.js","sourcesContent":["module.exports = {\n    NODE_UNVISITED: 0,\n    NODE_VISITED: 1,\n    NODE_IS_WALL: -1,\n    NODE_IS_SOURCE: 10,\n    NODE_IS_TARGET: 100,\n    NODE_FALLS_IN_PATH: 50,\n    NODE_IS_VISITING: 2,\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass NavItem extends Component {\n    state = {\n        description: this.getSelectedOptionDescription(\n            this.props.selectedOption,\n            this.props.options\n        ),\n    };\n\n    handleHover = (option) => {\n        this.setState({ description: option.description });\n    };\n\n    render() {\n        const { options, selectedOption, onChanged } = this.props;\n        const hasDescription =\n            options[0].description === undefined ? false : true;\n        const optionNamesContainerWidth = hasDescription ? \"30%\" : \"100%\";\n        let selectedOptionObject = this.getSelectedOption(\n            selectedOption,\n            options\n        );\n\n        return (\n            <div className=\"options-container\">\n                <div\n                    className=\"option-names-container\"\n                    style={{ width: optionNamesContainerWidth }}\n                >\n                    {options.map((option) => (\n                        <button\n                            key={option.id}\n                            style={{\n                                textAlign: hasDescription ? \"right\" : \"center\",\n                            }}\n                            className={\n                                option.id === selectedOption ? \"active\" : \"\"\n                            }\n                            onMouseEnter={() => this.handleHover(option)}\n                            onMouseLeave={() =>\n                                this.handleHover(selectedOptionObject)\n                            }\n                            onClick={() =>\n                                onChanged(\n                                    option.id,\n                                    option.speed === undefined\n                                        ? null\n                                        : option.speed\n                                )\n                            }\n                        >\n                            {option.name}\n                        </button>\n                    ))}\n                </div>\n                {hasDescription ? (\n                    <div\n                        className=\"option-description-container\"\n                        style={{\n                            width: \"60%\",\n                            left: optionNamesContainerWidth,\n                        }}\n                    >\n                        {this.state.description}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getSelectedOption(selectedOption, options) {\n        const option = options.filter((option) => option.id === selectedOption);\n        return option[0];\n    }\n    getSelectedOptionDescription(selectedOption, options) {\n        const option = this.getSelectedOption(selectedOption, options);\n        return option === undefined ? null : option.description;\n    }\n}\n\nexport default NavItem;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\nimport logo from \"../../logo.svg\";\nimport NavItem from \"./NavItem/navitem\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\n\nclass NavBar extends Component {\n    state = {\n        algorithms: [\n            {\n                id: \"algo-dijkstra\",\n                name: \"Dijkstra's\",\n                description: (\n                    <div>\n                        <p>\n                            Let the node at which we are starting be called the\n                            <b>initial node</b>. Let the\n                            <b>\n                                distance of node\n                                <i>Y</i>\n                            </b>\n                            be the distance from the <b> initial node</b>\n                            to\n                            <i>Y</i>. Dijkstra's algorithm will assign some\n                            initial distance values and will try to improve them\n                            step by step.\n                        </p>\n                        <ol>\n                            <li>\n                                Mark all nodes unvisited. Create a set of all\n                                the unvisited nodes called the\n                                <i>unvisited set</i>.\n                            </li>\n                            <li>\n                                Assign to every node a tentative distance value:\n                                set it to zero for our initial node and to\n                                infinity for all other nodes. Set the initial\n                                node as current.\n                            </li>\n                            <li>\n                                For the current node, consider all of its\n                                unvisited neighbours and calculate their\n                                <i>tentative</i>\n                                distances through the current node. Compare the\n                                newly calculated\n                                <i>tentative</i>\n                                distance to the current assigned value and\n                                assign the smaller one. For example, if the\n                                current node\n                                <i>A</i>\n                                is marked with a distance of 6, and the edge\n                                connecting it with a neighbour\n                                <i>B</i>\n                                has length 2, then the distance to\n                                <i>B</i>\n                                through\n                                <i>A</i>\n                                will be 6 + 2 = 8. If B was previously marked\n                                with a distance greater than 8 then change it to\n                                8. Otherwise, the current value will be kept.\n                            </li>\n                            <li>\n                                When we are done considering all of the\n                                unvisited neighbours of the current node, mark\n                                the current node as visited and remove it from\n                                the\n                                <i>unvisited set</i>. A visited node will never\n                                be checked again.\n                            </li>\n                            <li>\n                                If the destination node has been marked visited\n                                (when planning a route between two specific\n                                nodes) or if the smallest tentative distance\n                                among the nodes in the\n                                <i>unvisited set</i>\n                                is infinity (when planning a complete traversal;\n                                occurs when there is no connection between the\n                                initial node and remaining unvisited nodes),\n                                then stop. The algorithm has finished.\n                            </li>\n                            <li>\n                                Otherwise, select the unvisited node that is\n                                marked with the smallest tentative distance, set\n                                it as the new \"current node\", and go back to\n                                step 3.\n                            </li>\n                        </ol>\n                        <p>\n                            When planning a route, it is actually not necessary\n                            to wait until the destination node is \"visited\" as\n                            above: the algorithm can stop once the destination\n                            node has the smallest tentative distance among all\n                            \"unvisited\" nodes (and thus could be selected as the\n                            next \"current\").\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-a*\",\n                name: \"A*\",\n                description: (\n                    <div>\n                        <p>\n                            We create two lists – <i>Open List</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <p>\n                            1. Initialize the open list\n                            <br />\n                            2. Initialize the closed list put the starting node\n                            on the open list (you can leave its{\" \"}\n                            <strong>f</strong> at zero)\n                            <br />\n                            3. while the open list is not empty <br />\n                            a) find the node with the least <strong>\n                                f\n                            </strong>{\" \"}\n                            on the open list, call it \"q\" <br />\n                            b) pop q off the open list <br />\n                            c) generate q's 8 successors and set their parents\n                            to q <br />\n                            d) for each successor <br />\n                            i) if successor is the goal, stop search successor.\n                            <strong>g</strong> = q.<strong>g</strong> + distance\n                            between successor and q successor.<strong>h</strong>{\" \"}\n                            = distance from goal to successor (This can be done\n                            using many ways, we will discuss three heuristics-\n                            Manhattan, Diagonal and Euclidean Heuristics)\n                            successor.<strong>f</strong> = successor.\n                            <strong>g</strong> + successor.<strong>h</strong>\n                            <br />\n                            ii) if a node with the same position as successor is\n                            in the OPEN list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor <br />\n                            iii) if a node with the same position as successor\n                            is in the CLOSED list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor otherwise, add the node to the open list\n                            end (for loop) e) push q on the closed list end\n                            (while loop){\" \"}\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-greedy\",\n                name: \"Greedy\",\n                description: (\n                    <div>\n                        <p>\n                            A<b>greedy algorithm</b>\n                            is any algorithm that follows the problem-solving\n                            heuristic of making the locally optimal choice at\n                            each stage. In many problems, a greedy strategy does\n                            not usually produce an optimal solution, but\n                            nonetheless a greedy heuristic may yield locally\n                            optimal solutions that approximate a globally\n                            optimal solution in a reasonable amount of time.\n                        </p>\n                        <p>\n                            For example, a greedy strategy for the\n                            <a\n                                href=\"/wiki/Travelling_salesman_problem\"\n                                title=\"Travelling salesman problem\"\n                            >\n                                travelling salesman problem\n                            </a>\n                            (which is of a high computational complexity) is the\n                            following heuristic: \"At each step of the journey,\n                            visit the nearest unvisited city.\" This heuristic\n                            does not intend to find a best solution, but it\n                            terminates in a reasonable number of steps; finding\n                            an optimal solution to such a complex problem\n                            typically requires unreasonably many steps. In\n                            mathematical optimization, greedy algorithms\n                            optimally solve combinatorial problems having the\n                            properties of\n                            <a href=\"/wiki/Matroid\" title=\"Matroid\">\n                                matroids\n                            </a>\n                            , and give constant-factor approximations to\n                            optimization problems with submodular structure.\n                        </p>\n                    </div>\n                ),\n            },\n        ],\n        mazes: [\n            { id: \"maze-none\", name: \"Create\" },\n            { id: \"maze-recursive-division\", name: \"Recursive Division\" },\n        ],\n        speeds: [\n            { id: \"speed-faster\", name: \"Faster\", speed: 15 },\n            { id: \"speed-fast\", name: \"Fast\", speed: 30 },\n            { id: \"speed-normal\", name: \"Normal\", speed: 45 },\n            { id: \"speed-slow\", name: \"Slow\", speed: 60 },\n            { id: \"speed-slower\", name: \"Slower\", speed: 75 },\n        ],\n    };\n\n    showAlgorithmOptionsContainer() {\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showSpeedOptionsContainer() {\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    render() {\n        const {\n            selectedAlgorithmId,\n            // selectedMazeId,\n            selectedSpeedId,\n            onAlgorithmChanged,\n            // onMazeChanged,\n            onSpeedChanged,\n            startWalking,\n        } = this.props;\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-lg navbar-custom navbar-dark text-light pl-1\">\n                    <span className=\"navbar-brand mb-0\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"\"\n                            loading=\"lazy\"\n                            onClick={() => startWalking()}\n                        />\n                        <span>Walk to the Destination</span>\n                    </span>\n                    <button\n                        className=\"navbar-toggler\"\n                        type=\"button\"\n                        data-toggle=\"collapse\"\n                        data-target=\"#navbarNav\"\n                        aria-controls=\"navbarNav\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\"\n                    >\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item active ml-2\">\n                                <button\n                                    className=\"btn-algorithm my-1\"\n                                    onClick={this.showAlgorithmOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedAlgorithm(\n                                                selectedAlgorithmId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Algorithm\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li>\n                            {/* <li className=\"nav-item active ml-2\">\n                                <button className=\"btn-maze my-1\">\n                                    <span>\n                                        {\n                                            this.getSelectedMaze(selectedMazeId)\n                                                .name\n                                        }\n                                    </span>{\" \"}\n                                    Maze\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li> */}\n                            <li className=\"nav-item active ml-2\">\n                                <button\n                                    className=\"btn-speed my-1\"\n                                    onClick={this.showSpeedOptionsContainer}\n                                >\n                                    Speed :{\" \"}\n                                    <span>\n                                        {\n                                            this.getSelectedSpeed(\n                                                selectedSpeedId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    <i className=\"fas fa-tachometer-alt\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"algorithm-options-container\">\n                    <NavItem\n                        options={this.state.algorithms}\n                        selectedOption={selectedAlgorithmId}\n                        onChanged={onAlgorithmChanged}\n                    />\n                </div>\n                {/* <div className=\"maze-options-container\">\n                    <NavItem\n                        options={this.state.mazes}\n                        selectedOption={selectedMazeId}\n                        onChanged={onMazeChanged}\n                    />\n                </div> */}\n                <div className=\"speed-options-container\">\n                    <NavItem\n                        options={this.state.speeds}\n                        selectedOption={selectedSpeedId}\n                        onChanged={onSpeedChanged}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    getSelectedAlgorithm(selectedAlgorithmId) {\n        const algorithm = this.state.algorithms.filter(\n            (algorithm) => algorithm.id === selectedAlgorithmId\n        );\n        return algorithm[0];\n    }\n\n    getSelectedMaze(selectedMazeId) {\n        const maze = this.state.mazes.filter(\n            (maze) => maze.id === selectedMazeId\n        );\n        return maze[0];\n    }\n\n    getSelectedSpeed(selectedSpeedId) {\n        const speed = this.state.speeds.filter(\n            (speed) => speed.id === selectedSpeedId\n        );\n        return speed[0];\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"./node.css\";\n\nconst NodeState = require(\"./node_state\");\nclass Node extends Component {\n    render() {\n        const {\n            nodeState,\n            position,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onMouseLeave,\n        } = this.props;\n        if (onMouseEnter === undefined) {\n            return (\n                <div className={this.getNodeStateClass(nodeState)}>\n                    {/* <div></div> */}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    className={this.getNodeStateClass(nodeState)}\n                    id={`node-${position.x}-${position.y}`}\n                    data-x={position.x}\n                    data-y={position.y}\n                    onMouseDown={() => onMouseDown(nodeState, position)}\n                    onMouseUp={() => onMouseUp(nodeState, position)}\n                    onMouseEnter={() => onMouseEnter(nodeState, position)}\n                    onMouseLeave={() => onMouseLeave(nodeState, position)}\n                >\n                    {/* <div></div> */}\n                </div>\n            );\n        }\n    }\n\n    getNodeStateClass(nodeState) {\n        let classes = \"node node-\";\n        switch (nodeState) {\n            case NodeState.NODE_UNVISITED:\n                classes += \"unvisited\";\n                break;\n            case NodeState.NODE_VISITED:\n                classes += \"visited\";\n                break;\n            case NodeState.NODE_IS_WALL:\n                classes += \"wall\";\n                break;\n            case NodeState.NODE_IS_SOURCE:\n                classes += \"source\";\n                break;\n            case NodeState.NODE_IS_TARGET:\n                classes += \"target\";\n                break;\n            default:\n                classes += \"unvisited\";\n                break;\n        }\n        return classes;\n    }\n}\n\nexport default Node;\n","function Position(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nexport default Position;\n","import React from \"react\";\nimport \"./legend.css\";\nimport Node from \"../Node/node\";\nimport Position from \"../Node/position\";\nconst NodeState = require(\"../Node/node_state\");\n\nconst Legend = () => {\n    return (\n        <section className=\"legend-container\">\n            <ul>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_UNVISITED}\n                            position={new Position(-1, -1)}\n                            disabled\n                        />\n                        <span className=\"ml-2\">Unvisited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_VISITED}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Visited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_WALL}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Wall</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_SOURCE}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Source</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_TARGET}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Target</span>\n                    </div>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default Legend;\n","import React, { Component } from \"react\";\nimport Node from \"../Node/node\";\nimport NodeState from \"../Node/node_state\";\nimport Position from \"../Node/position\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n    state = {\n        isMousePressed: false,\n        movingSource: false,\n        movingTarget: false,\n    };\n\n    handleMouseUp(nodeState, position) {\n        this.setState({ isMousePressed: false });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseUp | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: false });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: false });\n        } else {\n            // do nothing\n        }\n    }\n    handleMouseDown(nodeState, position) {\n        this.setState({ isMousePressed: true });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseDown | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: true });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: true });\n        } else {\n            this.props.toggleWall(position);\n        }\n    }\n    handleMouseEnter(nodeState, position) {\n        if (this.state.isMousePressed) {\n            // console.log(\n            //     `(${position.x}, ${position.y}) : mouseEnter | pressed=${this.state.isMousePressed}`\n            // );\n            if (this.state.movingSource) {\n                // TODO: change nodeState to source\n                this.props.setNodeAsSource(position);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to target\n                this.props.setNodeAsTarget(position);\n            } else {\n                // TODO: toggleWall()\n                // console.log(position);\n                this.props.toggleWall(position);\n            }\n        }\n    }\n    handleMouseLeave(nodeState, position) {\n        // if (this.state.isMousePressed) {\n        //     console.log(\n        //         `(${position.x}, ${position.y}) : mouseLeave | pressed=${this.state.isMousePressed}`\n        //     );\n        //     if (nodeState === NodeState.NODE_IS_SOURCE) {\n        //         // TODO: change nodeState to unvisited\n        //     } else if (nodeState === NodeState.NODE_IS_TARGET) {\n        //         // TODO: change nodestate to unvisited\n        //     } else {\n        //         // do nothing\n        //     }\n        // }\n    }\n\n    decideNodeState(x, y, source, target, walls, visitedNodes) {\n        if (x === source.x && y === source.y) {\n            return NodeState.NODE_IS_SOURCE;\n        } else if (x === target.x && y === target.y) {\n            return NodeState.NODE_IS_TARGET;\n        } else if (\n            walls.some((position) => position.x === x && position.y === y)\n        ) {\n            return NodeState.NODE_IS_WALL;\n        } else if (\n            visitedNodes.some(\n                (position) => position.x === x && position.y === y\n            )\n        ) {\n            return NodeState.NODE_VISITED;\n        }\n        return NodeState.NODE_UNVISITED;\n    }\n\n    render() {\n        const {\n            rows,\n            columns,\n            source,\n            target,\n            walls,\n            visitedNodes,\n        } = this.props;\n        const paddingX = (window.innerWidth - columns * 20) / 2;\n        const paddingY = (window.innerHeight - 190 - rows * 20) / 2;\n        const nodes = [];\n\n        for (var x = 1; x <= rows; x++) {\n            for (var y = 1; y <= columns; y++) {\n                const key = \"node-\" + x + \"-\" + y;\n                const nodeState = this.decideNodeState(\n                    x,\n                    y,\n                    source,\n                    target,\n                    walls,\n                    visitedNodes\n                );\n\n                nodes.push(\n                    <Node\n                        key={key}\n                        position={new Position(x, y)}\n                        id={key}\n                        nodeState={nodeState}\n                        onMouseDown={(nodeState, position) =>\n                            this.handleMouseDown(nodeState, position)\n                        }\n                        onMouseUp={(nodeState, position) =>\n                            this.handleMouseUp(nodeState, position)\n                        }\n                        onMouseEnter={(nodeState, position) =>\n                            this.handleMouseEnter(nodeState, position)\n                        }\n                        onMouseLeave={(nodeState, position) =>\n                            this.handleMouseLeave(nodeState, position)\n                        }\n                    />\n                );\n            }\n        }\n        return (\n            <section\n                className=\"grid-container\"\n                style={{\n                    paddingTop: paddingY,\n                    paddingRight: paddingX,\n                    paddingBottom: paddingY,\n                    paddingLeft: paddingX,\n                }}\n            >\n                {nodes}\n            </section>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./insigts.css\";\n\nconst Insights = (props) => {\n    const { insights } = props;\n    return (\n        <section className=\"insights-container\">\n            <div>\n                <p>{insights}</p>\n            </div>\n        </section>\n    );\n};\n\nexport default Insights;\n","import React from \"react\";\nimport \"./copyright.css\";\nconst Copyright = () => {\n    return (\n        <section className=\"copyright-container\">\n            <div className=\"github-links\">\n                <a href=\"https://github.com/shantanu0323\">\n                    <i className=\"fab fa-github-square\"></i>\n                </a>\n            </div>\n            <div className=\"copyright\">\n                Made with <i className=\"fas fa-heart text-danger\"></i> by{\" \"}\n                <a href=\"https://shantanu0323.github.io\">Shantanu Pramanik</a>\n            </div>\n            <div className=\"social-links\">\n                <a href=\"https://www.linkedin.com/in/shantanu-pramanik/\">\n                    <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"https://www.facebook.com/shantanu.pramanik1\">\n                    <i className=\"fab fa-facebook-square\"></i>\n                </a>\n                <a href=\"https://www.twitter.com/shantanu0323/\">\n                    <i className=\"fab fa-twitter-square\"></i>\n                </a>\n                <a href=\"https://www.instagram.com/shantanu0323/\">\n                    <i className=\"fab fa-instagram-square\"></i>\n                </a>\n            </div>\n        </section>\n    );\n};\n\nexport default Copyright;\n","import NodeState, { NODE_IS_SOURCE } from \"../components/Node/node_state\";\nimport Position from \"../components/Node/position\";\n\nconst INFINITY = 1000000;\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    const mesh = new Array(rows);\n    const dist = {};\n    const unvisitedNodes = [];\n    for (let i = 1; i <= rows; i++) {\n        const col = new Array(columns);\n        for (let j = 1; j <= columns; j++) {\n            col[j] = NodeState.NODE_UNVISITED;\n            if (i === source.x && j === source.y) {\n                col[j] = NodeState.NODE_IS_SOURCE;\n                dist[`${i}-${j}`] = 0;\n            } else {\n                if (i === target.x && j === target.y) {\n                    col[j] = NodeState.NODE_IS_TARGET;\n                }\n                dist[`${i}-${j}`] = INFINITY;\n            }\n            unvisitedNodes.push(`${i}-${j}`);\n        }\n        mesh[i] = col;\n    }\n    walls.forEach((position) => {\n        mesh[position.x][position.y] = NodeState.NODE_IS_WALL;\n    });\n\n    return { mesh, dist, unvisitedNodes };\n};\n\nconst getNodeKey = (node, where, mesh, rows, columns) => {\n    let [i, j] = node.split(\"-\");\n    i = parseInt(i);\n    j = parseInt(j);\n    switch (where) {\n        case \"above\":\n            i--;\n            break;\n        case \"right\":\n            j++;\n            break;\n        case \"below\":\n            i++;\n            break;\n        case \"left\":\n            j--;\n            break;\n\n        default:\n            i = j = -1;\n            break;\n    }\n    if (\n        i < 1 ||\n        i > rows ||\n        j < 1 ||\n        j > columns ||\n        mesh[parseInt(i)][parseInt(j)] === NodeState.NODE_IS_WALL\n    ) {\n        return null;\n    }\n    return `${i}-${j}`;\n};\n\nconst getNeighbours = (position, rows, columns) => {\n    // let [i, j] = node.split(\"-\");\n    // const position = new Position(parseInt(i), parseInt(j));\n    const neighbours = [];\n\n    neighbours.push(new Position(position.x - 1, position.y));\n    neighbours.push(new Position(position.x, position.y + 1));\n    neighbours.push(new Position(position.x + 1, position.y));\n    neighbours.push(new Position(position.x, position.y - 1));\n\n    return neighbours.filter(\n        (node) =>\n            node.x >= 1 && node.x <= rows && node.y >= 1 && node.y <= columns\n    );\n};\n\nconst getPreviousNodeInPath = (mesh, dist, currNode, rows, columns) => {\n    const neighbours = getNeighbours(currNode, rows, columns).filter(\n        (node) => mesh[node.x][node.y] === 1\n    );\n    let min = INFINITY;\n    let prevNode;\n    for (let i = 0; i < neighbours.length; i++) {\n        const node = neighbours[i];\n        if (dist[`${node.x}-${node.y}`] < min) {\n            min = dist[`${node.x}-${node.y}`];\n            prevNode = node;\n        }\n    }\n    return prevNode;\n};\n\nconst getNodesInPath = (mesh, dist, target, rows, columns) => {\n    const path = [];\n    let currNode = target;\n    while (dist[`${currNode.x}-${currNode.y}`] > 1) {\n        currNode = getPreviousNodeInPath(mesh, dist, currNode, rows, columns);\n        path.unshift(currNode);\n    }\n    return path;\n};\n\nconst getVisitedNodes = (mesh, rows, columns, unvisitedNodes, dist) => {\n    const visitedNodes = [];\n\n    while (unvisitedNodes.length > 0) {\n        let minDist = INFINITY;\n        let currNode;\n        for (let i = 0; i < unvisitedNodes.length; i++) {\n            if (dist[unvisitedNodes[i]] < minDist) {\n                minDist = dist[unvisitedNodes[i]];\n                currNode = unvisitedNodes[i];\n            }\n        }\n        if (currNode === undefined) {\n            // alert(\"Target Not Reachable\");\n            break;\n        }\n\n        visitedNodes.push(\n            new Position(\n                parseInt(currNode.split(\"-\")[0]),\n                parseInt(currNode.split(\"-\")[1])\n            )\n        );\n        unvisitedNodes = unvisitedNodes.filter((node) => node !== currNode);\n        if (\n            mesh[currNode.split(\"-\")[0]][currNode.split(\"-\")[1]] ===\n            NodeState.NODE_IS_TARGET\n        ) {\n            console.log(\"TARGET REACHED\");\n            break;\n        }\n        mesh[parseInt(currNode.split(\"-\")[0])][\n            parseInt(currNode.split(\"-\")[1])\n        ] =\n            mesh[parseInt(currNode.split(\"-\")[0])][\n                parseInt(currNode.split(\"-\")[1])\n            ] === NodeState.NODE_IS_SOURCE\n                ? NODE_IS_SOURCE\n                : NodeState.NODE_VISITED;\n\n        [\"above\", \"right\", \"below\", \"left\"].forEach((where) => {\n            let u = getNodeKey(currNode, where, mesh, rows, columns);\n            if (u !== null) {\n                const alt = dist[currNode] + 1;\n                dist[u] = alt < dist[u] ? alt : dist[u];\n            }\n        });\n    }\n\n    const path = getNodesInPath(\n        mesh,\n        dist,\n        visitedNodes[visitedNodes.length - 1],\n        rows,\n        columns\n    );\n    return { visitedNodes, path };\n};\n\nconst performDijkstra = (rows, columns, source, target, walls) => {\n    console.log(\"Performing Dijkstra\");\n\n    // initialise and fetch the graph\n    const { mesh, dist, unvisitedNodes } = initialiseMesh(\n        rows,\n        columns,\n        source,\n        target,\n        walls\n    );\n\n    // perform dijkstra(graph, source, target) on the graph and get the visited nodes in order\n    const { visitedNodes, path } = getVisitedNodes(\n        mesh,\n        rows,\n        columns,\n        unvisitedNodes,\n        dist\n    );\n\n    return { visitedNodes, path };\n};\n\nexport default performDijkstra;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar/navbar\";\nimport Legend from \"./components/Legend/legend\";\nimport Grid from \"./components/Grid/grid\";\n// import Node from \"./components/Node/node.jsx\";\n// import NodeState from \"./components/Node/node_state.jsx\";\nimport Position from \"./components/Node/position.jsx\";\nimport Insights from \"./components/Insights/insights\";\nimport Copyright from \"./components/Copyright/copyright\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport performDijkstra from \"./algorithms/dijkstra\";\n\nclass App extends Component {\n    componentDidMount() {\n        // Include the FontAwesome Library\n        const s = document.createElement(\"script\");\n        s.type = \"text/javascript\";\n        s.async = true;\n        s.crossOrigin = \"anonymous\";\n        s.src = \"https://kit.fontawesome.com/f7fe82406d.js\";\n        document.body.appendChild(s);\n\n        const gridHeight = window.innerHeight - 190;\n        const gridWidth = window.innerWidth;\n\n        const rows = parseInt((gridHeight - 40) / 20);\n\n        const columns = parseInt((gridWidth - 40) / 20);\n        const source = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.25 * columns)\n        );\n        const target = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.75 * columns)\n        );\n        this.setState({ rows, columns, source, target });\n    }\n\n    state = {\n        selectedAlgorithmId: \"algo-dijkstra\",\n        selectedMazeId: \"maze-recursive-division\",\n        selectedSpeedId: \"speed-fast\",\n        speed: 15,\n        rows: 0,\n        columns: 0,\n        source: new Position(-1, -1),\n        target: new Position(-1, -1),\n        walls: [],\n        visitedNodes: [],\n    };\n\n    setAlgorithmId = (selectedAlgorithmId) => {\n        this.setState({ selectedAlgorithmId });\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setMazeId = (selectedMazeId) => {\n        this.setState({ selectedMazeId });\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setSpeedId = (selectedSpeedId, speed) => {\n        this.setState({ selectedSpeedId, speed });\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setNodeAsSource = (position) => {\n        // console.log(`SOURCE: ${position}`);\n        if (\n            !(\n                position.x === this.state.target.x &&\n                position.y === this.state.target.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ source: position, walls });\n        }\n    };\n\n    setNodeAsTarget = (position) => {\n        // console.log(`TARGET: ${position}`);\n        if (\n            !(\n                position.x === this.state.source.x &&\n                position.y === this.state.source.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ target: position, walls });\n        }\n    };\n\n    toggleWall = (position) => {\n        // console.log(position);\n        let walls = this.state.walls;\n        if (\n            walls.some((node) => node.x === position.x && node.y === position.y)\n        ) {\n            // Node is a wall -> change to unvisited\n            walls = walls.filter(\n                (node) => !(node.x === position.x && node.y === position.y)\n            );\n        } else {\n            walls.push(position);\n        }\n        this.setState({ walls });\n    };\n\n    startWalking = () => {\n        for (let i = 1; i <= this.state.rows; i++) {\n            for (let j = 1; j <= this.state.columns; j++) {\n                const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                if (\n                    nodeDom.classList.contains(\"node-visited\") ||\n                    nodeDom.classList.contains(\"node-path\")\n                ) {\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                }\n            }\n        }\n        setTimeout(() => {\n            console.log(\"START WALKING\");\n            const { visitedNodes, path } = performDijkstra(\n                this.state.rows,\n                this.state.columns,\n                this.state.source,\n                this.state.target,\n                this.state.walls\n            );\n            for (let i = 0; i < visitedNodes.length; i++) {\n                setTimeout(() => {\n                    const nodeDom = document.querySelector(\n                        `#node-${visitedNodes[i].x}-${visitedNodes[i].y}`\n                    );\n                    if (nodeDom.classList.contains(\"node-unvisited\")) {\n                        nodeDom.classList.remove(\"node-unvisited\");\n                        nodeDom.classList.add(\"node-visited\");\n                    }\n                    if (i === visitedNodes.length - 1)\n                        setTimeout(() => {\n                            if (\n                                visitedNodes[i].x === this.state.target.x &&\n                                visitedNodes[i].y === this.state.target.y\n                            ) {\n                                for (let k = 0; k < path.length; k++) {\n                                    setTimeout(() => {\n                                        const node = path[k];\n                                        const nodeDom = document.querySelector(\n                                            `#node-${node.x}-${node.y}`\n                                        );\n                                        nodeDom.classList.remove(\n                                            \"node-visited\"\n                                        );\n                                        nodeDom.classList.add(\"node-path\");\n                                    }, this.state.speed * k);\n                                }\n                            } else {\n                                alert(\"Target NOT Reachable\");\n                            }\n                        }, this.state.speed + 500);\n                }, this.state.speed * i);\n            }\n        }, 500);\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <NavBar\n                    selectedAlgorithmId={this.state.selectedAlgorithmId}\n                    selectedMazeId={this.state.selectedMazeId}\n                    selectedSpeedId={this.state.selectedSpeedId}\n                    onAlgorithmChanged={this.setAlgorithmId}\n                    onMazeChanged={this.setMazeId}\n                    onSpeedChanged={this.setSpeedId}\n                    startWalking={this.startWalking}\n                />\n                <Legend />\n                <Grid\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    walls={this.state.walls}\n                    visitedNodes={this.state.visitedNodes}\n                    setNodeAsSource={this.setNodeAsSource}\n                    setNodeAsTarget={this.setNodeAsTarget}\n                    toggleWall={this.toggleWall}\n                />\n                <Insights insights=\"Insights\" />\n                <Copyright />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.Fragment>\n        <App />\n    </React.Fragment>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}