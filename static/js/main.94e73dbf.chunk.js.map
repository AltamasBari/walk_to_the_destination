{"version":3,"sources":["logo.svg","static/demo_wall.gif","algorithms/mazeGeneratingAlgorithms/recursive_division.js","components/NavBar/NavItem/navitem.jsx","helper/position.js","algorithms/mazeGeneratingAlgorithms/binary_tree.js","algorithms/mazeGeneratingAlgorithms/dfs.js","algorithms/mazeGeneratingAlgorithms/random.js","algorithms/mazeGeneratingAlgorithms/spiral.js","components/NavBar/navbar.jsx","components/Node/node_state.jsx","components/Node/node.jsx","components/Legend/legend.jsx","components/Grid/grid.jsx","components/Insights/insights.jsx","components/Copyright/copyright.jsx","helper/initialise.js","components/Loader/loader.jsx","algorithms/dijkstra.js","algorithms/a_star.js","algorithms/greedy.js","algorithms/bfs.js","algorithms/dfs.js","helper/letters.js","components/Interact/interact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","orientation","NavItem","state","description","getSelectedOptionDescription","props","selectedOption","options","handleHover","option","setState","dismissContainer","document","querySelectorAll","forEach","dom","classList","remove","this","onChanged","hasDescription","undefined","optionNamesContainerWidth","selectedOptionObject","getSelectedOption","className","onClick","style","width","map","key","id","textAlign","onMouseEnter","onMouseLeave","speed","name","left","filter","Component","Position","x","y","parseInt","isEqual","a","b","JSON","stringify","getNeighbours","position","rows","columns","step","neighbours","push","isOnEdge","generateBinaryTreeMaze","source","target","walls","i","j","Math","round","random","sourceNeighbours","targetNeighbours","console","log","wall","some","node","visitedNodes","findNextNode","currNode","visitedNode","neighbour","connectAndMarkAsVisited","floor","length","generateDFSMaze","generateRecursiveDivisionMaze","window","buildWalls","startRow","endRow","startColumn","endColumn","wallIndex","pathIndex","index","generateRandomMaze","generateRandomWalls","sort","generateSpiralMaze","NavBar","algorithms","mazes","speeds","constructMaze","setTimeout","nodeDom","querySelector","add","stopLoading","onMazeCreated","getSelectedMazeFunction","mazeId","resetMesh","setMazeId","selectedMazeId","generateMaze","onMazeChanged","startLoading","wallsInOrder","alert","selectedAlgorithmId","algorithm","maze","selectedSpeedId","onAlgorithmChanged","onSpeedChanged","startWalking","clearPath","destructWalls","Fragment","src","logo","height","alt","showAlgorithmOptionsContainer","getSelectedAlgorithm","showMazeOptionsContainer","getSelectedMaze","showSpeedOptionsContainer","getSelectedSpeed","NodeState","NODE_UNVISITED","NODE_VISITED","NODE_IS_WALL","NODE_IS_SOURCE","NODE_IS_TARGET","NODE_FALLS_IN_PATH","NODE_IS_VISITING","Node","nodeState","onMouseDown","onMouseUp","interactionDone","getNodeStateClass","data-x","data-y","classes","legend","innerWidth","Legend","disabled","Grid","isMousePressed","movingSource","movingTarget","prevPos","getElementById","contains","toggle","set","setNodeAsSource","setNodeAsTarget","sourceDom","dataset","targetDom","getSourcePosition","getTargetPosition","updateWalls","toggleWall","paddingX","paddingY","innerHeight","nodes","decideNodeState","handleMouseDown","handleMouseUp","handleMouseEnter","handleMouseLeave","handleMouseLeavingGrid","paddingTop","paddingRight","paddingBottom","paddingLeft","Insights","totalNodes","numberOfVisitedNodes","pathLength","timeTaken","targetReached","Copyright","href","resetSourceAndTarget","Loader","loading","distance","Infinity","mesh","unvisitedNodes","initialiseMesh","row","getNonWallNeighbours","neighbourPositions","getPreviousNodeInPath","prevNode","min","getNodesInPath","path","unshift","getVisitedNodes","minDist","performDijkstra","visitedNodesObjects","pathObjects","parent","f","g","h","openList","closedList","sourceNode","getTraversableNeighbours","performAstar","found","shift","abs","performGreedy","queue","parents","getKey","getNonWallUnvisitedNeighbours","runBFS","getPath","performBFS","targetFound","runDFS","performDFS","letterWidth","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","lengthOfWord","word","len","Array","from","ch","toUpperCase","ltow","start","nextStart","Align","currIndex","Interact","transition","skipInteraction","display","nextInteraction","showInteractions","startIntro","skipDom","top","offsetTop","offsetLeft","nextDom","demoDom","total","lines","alignment","getCenter","statement","includes","split","line","trim","words","currentLine","k","slice","getLines","covered","getStartPosition","delay","timeout","zIndex","animationName","writeOnCanvas","enableSkip","writeOnCanvasDelay","enableNext","identifier","clearBoard","data","setFocus","writeSkipButton","writeNextButton","placeDemoGIF","initialAnimationDelay","initialAnimation","demo_wall_gif","App","executeAlgorithm","algoId","getSelectedAlgorithmFunction","startTime","Date","getTime","endTime","insights","dijkstra","astar","greedy","bfs","dfs","synchronise","Promise","all","animationDuration","changeInteraction","setAlgorithmId","setSpeedId","putNodeInPath","resetInsights","getInsights","updateMaze","s","createElement","type","async","crossOrigin","body","appendChild","gridHeight","gridWidth","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94e73dbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/demo_wall.ec27e1f5.gif\";","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\nconst visitedNodes = [];\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nlet orientation;\nconst buildWalls = (startRow, endRow, startColumn, endColumn) => {\n    orientation = !orientation;\n    if (orientation) {\n        if (startColumn >= endColumn) return;\n        const wallIndex =\n            2 *\n                (Math.floor((Math.random() * (endColumn - startColumn)) / 2) +\n                    startColumn / 2) +\n            1;\n        const pathIndex =\n            Math.floor(Math.random() * (endRow - startRow + 1)) + startRow;\n        getNeighbours(\n            new Position(pathIndex, wallIndex),\n            window.rows,\n            window.columns\n        )\n            .filter((node) => node.x === pathIndex)\n            .map((node) => visitedNodes.push(node));\n        for (let index = startRow; index <= endRow; index++) {\n            if (\n                index === pathIndex ||\n                visitedNodes.some((node) =>\n                    isEqual(node, new Position(index, wallIndex))\n                )\n            )\n                continue;\n            walls.push(new Position(index, wallIndex));\n        }\n        buildWalls(startRow, endRow, startColumn, wallIndex - 1);\n        buildWalls(startRow, endRow, wallIndex + 1, endColumn);\n    } else {\n        if (startRow >= endRow) return;\n        const wallIndex =\n            2 *\n                (Math.floor((Math.random() * (endRow - startRow)) / 2) +\n                    startRow / 2) +\n            1;\n        const pathIndex =\n            Math.floor(Math.random() * (endColumn - startColumn + 1)) +\n            startColumn;\n        getNeighbours(\n            new Position(wallIndex, pathIndex),\n            window.rows,\n            window.columns\n        )\n            .filter((node) => node.y === pathIndex)\n            .map((node) => visitedNodes.push(node));\n        for (let index = startColumn; index <= endColumn; index++) {\n            if (\n                index === pathIndex ||\n                visitedNodes.some((node) =>\n                    isEqual(node, new Position(wallIndex, index))\n                )\n            )\n                continue;\n            walls.push(new Position(wallIndex, index));\n        }\n        buildWalls(startRow, wallIndex - 1, startColumn, endColumn);\n        buildWalls(wallIndex + 1, endRow, startColumn, endColumn);\n    }\n};\n\nconst generateRecursiveDivisionMaze = (rows, columns, source, target) => {\n    walls.length = 0;\n    visitedNodes.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n    orientation = Math.random() >= 0.5;\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    buildWalls(2, rows - 1, 2, columns - 1);\n\n    const sourceNeighbours = isOnEdge(source, rows, columns)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target, rows, columns)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            !(\n                columns % 2 === 0 &&\n                wall.y === columns - 1 &&\n                wall.x > 1 &&\n                wall.x < rows\n            ) &&\n            !(\n                rows % 2 === 0 &&\n                wall.x === rows - 1 &&\n                wall.y > 1 &&\n                wall.y < columns\n            ) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateRecursiveDivisionMaze;\n","import React, { Component } from \"react\";\nimport \"./navitem.css\";\nclass NavItem extends Component {\n    state = {\n        description: this.getSelectedOptionDescription(\n            this.props.selectedOption,\n            this.props.options\n        ),\n    };\n\n    handleHover = (option) => {\n        this.setState({ description: option.description });\n    };\n\n    dismissContainer = () => {\n        document\n            .querySelectorAll(\".option-container\")\n            .forEach((dom) => dom.classList.remove(\"show\"));\n    };\n\n    render() {\n        const { options, selectedOption, onChanged } = this.props;\n        const hasDescription =\n            options[0].description === undefined ? false : true;\n        const optionNamesContainerWidth = hasDescription ? \"30%\" : \"100%\";\n        let selectedOptionObject = this.getSelectedOption(\n            selectedOption,\n            options\n        );\n\n        return (\n            <div className=\"options-container\">\n                <button\n                    className=\"dismiss-container\"\n                    onClick={this.dismissContainer}\n                >\n                    X\n                </button>\n                <div\n                    className=\"option-names-container\"\n                    style={{ width: optionNamesContainerWidth }}\n                >\n                    {options.map((option) => (\n                        <button\n                            key={option.id}\n                            style={{\n                                textAlign: hasDescription ? \"right\" : \"center\",\n                            }}\n                            className={\n                                option.id === selectedOption ? \"active\" : \"\"\n                            }\n                            onMouseEnter={() => this.handleHover(option)}\n                            onMouseLeave={() =>\n                                this.handleHover(selectedOptionObject)\n                            }\n                            onClick={() =>\n                                onChanged(\n                                    option.id,\n                                    option.speed === undefined\n                                        ? null\n                                        : option.speed\n                                )\n                            }\n                        >\n                            {option.name}\n                        </button>\n                    ))}\n                </div>\n                {hasDescription ? (\n                    <div\n                        className=\"option-description-container\"\n                        style={{\n                            width: \"60%\",\n                            left: optionNamesContainerWidth,\n                        }}\n                    >\n                        {this.state.description}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getSelectedOption(selectedOption, options) {\n        const option = options.filter((option) => option.id === selectedOption);\n        return option[0];\n    }\n    getSelectedOptionDescription(selectedOption, options) {\n        const option = this.getSelectedOption(selectedOption, options);\n        return option === undefined ? null : option.description;\n    }\n}\n\nexport default NavItem;\n","class Position {\n    constructor(x, y) {\n        this.x = parseInt(x);\n        this.y = parseInt(y);\n    }\n}\n\nconst isEqual = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n\nconst getNeighbours = (position, rows, columns, step = 1) => {\n    const neighbours = [];\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y + step <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y + step));\n    }\n    if (\n        position.x >= 1 &&\n        position.x + step <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x + step, position.y));\n    }\n    if (\n        position.x >= 1 &&\n        position.x <= rows &&\n        position.y - step >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x, position.y - step));\n    }\n    if (\n        position.x - step >= 1 &&\n        position.x <= rows &&\n        position.y >= 1 &&\n        position.y <= columns\n    ) {\n        neighbours.push(new Position(position.x - step, position.y));\n    }\n    return neighbours;\n};\n\nexport { isEqual, getNeighbours };\nexport default Position;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst generateBinaryTreeMaze = (rows, columns, source, target) => {\n    const walls = [];\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    for (let i = 3; i < rows - 1; i += 2) {\n        for (let j = 3; j < columns - 1; j += 2) {\n            walls.push(new Position(i, j));\n            if (Math.round(Math.random())) {\n                walls.push(new Position(i - 1, j));\n            } else {\n                walls.push(new Position(i, j - 1));\n            }\n        }\n    }\n    const sourceNeighbours = isOnEdge(source, rows, columns)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target, rows, columns)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    console.log(isOnEdge(target));\n    console.log({ sourceNeighbours, targetNeighbours });\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            !(\n                columns % 2 === 0 &&\n                wall.y === columns - 1 &&\n                wall.x > 1 &&\n                wall.x < rows\n            ) &&\n            !(\n                rows % 2 === 0 &&\n                wall.x === rows - 1 &&\n                wall.y > 1 &&\n                wall.y < columns\n            ) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateBinaryTreeMaze;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\nconst visitedNodes = [];\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst connectAndMarkAsVisited = (node, neighbours, rows, columns) => {\n    neighbours.forEach((neighbour) => {\n        const position = new Position(node.x, node.y);\n        if (neighbour.x === node.x) {\n            if (neighbour.y > node.y) position.y++;\n            else position.y--;\n        } else {\n            if (neighbour.x > node.x) position.x++;\n            else position.x--;\n        }\n        visitedNodes.push(neighbour);\n        walls.push(position);\n    });\n};\n\nconst findNextNode = (currNode, rows, columns) => {\n    walls.push(currNode);\n    let neighbours = getNeighbours(currNode, rows, columns, 2).filter(\n        (node) => {\n            return (\n                !walls.some((wall) => isEqual(wall, node)) &&\n                !visitedNodes.some((visitedNode) => isEqual(visitedNode, node))\n            );\n        }\n    );\n    connectAndMarkAsVisited(currNode, neighbours, rows, columns);\n    while (neighbours.length > 0) {\n        const currNode =\n            neighbours[Math.floor(Math.random() * neighbours.length)];\n        findNextNode(currNode, rows, columns);\n        neighbours = neighbours.filter((node) => !isEqual(node, currNode));\n    }\n};\n\nconst generateDFSMaze = (rows, columns, source, target) => {\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    findNextNode(new Position(3, 3), rows, columns);\n\n    const sourceNeighbours = isOnEdge(source, rows, columns)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target, rows, columns)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            !(\n                columns % 2 === 0 &&\n                wall.y === columns - 1 &&\n                wall.x > 1 &&\n                wall.x < rows\n            ) &&\n            !(\n                rows % 2 === 0 &&\n                wall.x === rows - 1 &&\n                wall.y > 1 &&\n                wall.y < columns\n            ) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateDFSMaze;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\n\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst generateRandomWalls = (rows, columns) => {\n    for (let i = 3; i < rows - 1; i++) {\n        for (let j = 3; j < columns - 1; j++) {\n            if (Math.random() >= 0.8) walls.push(new Position(i, j));\n        }\n    }\n};\n\nconst generateRandomMaze = (rows, columns, source, target) => {\n    walls.length = 0;\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    generateRandomWalls(rows, columns);\n    walls.sort(function () {\n        return 0.5 - Math.random();\n    });\n    const sourceNeighbours = isOnEdge(source, rows, columns)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target, rows, columns)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            // !(\n            //     columns % 2 == 0 &&\n            //     wall.y === columns - 1 &&\n            //     wall.x > 1 &&\n            //     wall.x < rows\n            // ) &&\n            // !(\n            //     rows % 2 == 0 &&\n            //     wall.x === rows - 1 &&\n            //     wall.y > 1 &&\n            //     wall.y < columns\n            // ) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateRandomMaze;\n","import Position, { isEqual, getNeighbours } from \"../../helper/position\";\n\nconst walls = [];\nconst isOnEdge = (position, rows, columns) => {\n    return (\n        position.x === 1 ||\n        position.x === rows ||\n        position.y === 1 ||\n        position.y === columns\n    );\n};\n\nconst buildWalls = (startRow, endRow, startColumn, endColumn) => {\n    for (let i = startColumn; i <= endColumn; i++) {\n        if (Math.random() > 0.04) walls.push(new Position(startRow, i));\n    }\n    for (let i = startRow + 1; i <= endRow; i++) {\n        if (Math.random() > 0.02) walls.push(new Position(i, endColumn));\n    }\n    if (startRow >= endRow - 1 || startColumn >= endColumn - 1) return;\n    for (let i = endColumn - 1; i >= startColumn; i--) {\n        if (Math.random() > 0.04) walls.push(new Position(endRow, i));\n    }\n    for (let i = endRow - 1; i >= startRow + 2; i--) {\n        if (Math.random() > 0.02) walls.push(new Position(i, startColumn));\n    }\n    if (startRow + 2 <= endRow - 2 && startColumn + 2 <= endColumn - 2)\n        walls.push(new Position(startRow + 2, startColumn + 1));\n    else return;\n    buildWalls(startRow + 2, endRow - 2, startColumn + 2, endColumn - 2);\n};\n\nconst generateSpiralMaze = (rows, columns, source, target) => {\n    walls.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n\n    buildWalls(1, rows, 1, columns);\n\n    const sourceNeighbours = isOnEdge(source, rows, columns)\n        ? getNeighbours(source, rows, columns)\n        : [];\n    const targetNeighbours = isOnEdge(target, rows, columns)\n        ? getNeighbours(target, rows, columns)\n        : [];\n    return walls.filter(\n        (wall) =>\n            !isEqual(wall, source) &&\n            !isEqual(wall, target) &&\n            // (wall.y !== columns - 1 || wall.x === 1 || wall.x === rows) &&\n            !sourceNeighbours.some((node) => isEqual(node, wall)) &&\n            !targetNeighbours.some((node) => isEqual(node, wall))\n    );\n};\n\nexport default generateSpiralMaze;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\nimport logo from \"../../logo.svg\";\nimport NavItem from \"./NavItem/navitem\";\nimport generateBinaryTreeMaze from \"../../algorithms/mazeGeneratingAlgorithms/binary_tree\";\nimport generateDFSMaze from \"../../algorithms/mazeGeneratingAlgorithms/dfs\";\nimport generateRecursiveDivisionMaze from \"../../algorithms/mazeGeneratingAlgorithms/recursive_division\";\nimport generateRandomMaze from \"../../algorithms/mazeGeneratingAlgorithms/random\";\nimport generateSpiralMaze from \"../../algorithms/mazeGeneratingAlgorithms/spiral\";\n\nclass NavBar extends Component {\n    state = {\n        algorithms: [\n            {\n                id: \"algo-dijkstra\",\n                name: \"Dijkstra's\",\n                description: (\n                    <div>\n                        <p>\n                            <b>Initialisation</b>\n                            <br />\n                            Put all nodes except <i>source</i> into{\" \"}\n                            <i>unvisitedNodes</i> list\n                            <br />\n                            Create another list <i>distances</i> and initialize\n                            all values to <i>Infinity</i>\n                            <br />\n                            Set the <i>distances[source] = 0</i>\n                        </p>\n                        <ol>\n                            <li>\n                                For the current node, consider all of its\n                                unvisited neighbours and calculate their\n                                <i>tentative</i>\n                                distances through the current node.{\" \"}\n                            </li>\n                            <li>\n                                Compare the newly calculated\n                                <i>tentative</i>\n                                distance to the current assigned value and\n                                assign the smaller one. For example, if the\n                                current node\n                                <i>A</i>\n                                is marked with a distance of 6, and the edge\n                                connecting it with a neighbour\n                                <i>B</i>\n                                has length 2, then the distance to\n                                <i>B</i>\n                                through\n                                <i>A</i>\n                                will be 6 + 2 = 8. If B was previously marked\n                                with a distance greater than 8 then change it to\n                                8. Otherwise, the current value will be kept.\n                            </li>\n                            <li>\n                                When we are done considering all of the\n                                unvisited neighbours of the current node, mark\n                                the current node as visited and remove it from\n                                the\n                                <i>unvisitedNodes</i>. A visited node will never\n                                be checked again.\n                            </li>\n                            <li>\n                                If the destination node has been marked visited\n                                (when planning a route between two specific\n                                nodes) or if the smallest tentative distance\n                                among the nodes in the\n                                <i>unvisitedNodes</i>\n                                is infinity (when planning a complete traversal;\n                                occurs when there is no connection between the\n                                initial node and remaining unvisited nodes),\n                                then stop. The algorithm has finished.\n                            </li>\n                            <li>\n                                Otherwise, select the unvisited node that is\n                                marked with the smallest tentative distance, set\n                                it as the new \"current node\", and go back to\n                                step 3.\n                            </li>\n                        </ol>\n                        <p>\n                            When planning a route, it is actually not necessary\n                            to wait until the destination node is \"visited\" as\n                            above: the algorithm can stop once the destination\n                            node has the smallest tentative distance among all\n                            \"unvisited\" nodes (and thus could be selected as the\n                            next \"current\").\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-a*\",\n                name: \"A*\",\n                description: (\n                    <div>\n                        <p>\n                            We create two lists – <i>openList</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <ol>\n                            <li>\n                                Initialize the <i>openList</i> and put the\n                                starting node on the <i>openList</i> (you can\n                                leave its <strong>f</strong> at zero)\n                            </li>\n                            <li>Initialize the closed list as empty list</li>\n                            <li>\n                                while the <i>openList</i> is not empty{\" \"}\n                            </li>\n                            <ol>\n                                <li>\n                                    find the node with the least{\" \"}\n                                    <strong>f</strong> on the <i>openList</i>,\n                                    call it \"q\"{\" \"}\n                                </li>\n                                <li>\n                                    pop q off the <i>openList</i>{\" \"}\n                                </li>\n                                <li>\n                                    generate q's 4 neighbours and set their\n                                    parents to q{\" \"}\n                                </li>\n                                <li>for each successor </li>\n                                <ol>\n                                    <li>\n                                        if successor is the goal, stop search\n                                        successor.\n                                        <strong>g</strong> = q.\n                                        <strong>g</strong> + distance between\n                                        successor and q successor.\n                                        <strong>h</strong> = distance from goal\n                                        to successor (This can be done using\n                                        many ways, we will discuss three\n                                        heuristics- Manhattan, Diagonal and\n                                        Euclidean Heuristics) successor.\n                                        <strong>f</strong> = successor.\n                                        <strong>g</strong> + successor.\n                                        <strong>h</strong>\n                                    </li>\n                                    <li>\n                                        if a node with the same position as\n                                        successor is in the <i>openList</i>{\" \"}\n                                        which has a lower <strong>f</strong>{\" \"}\n                                        than successor, skip this successor{\" \"}\n                                    </li>\n                                    <li>\n                                        if a node with the same position as\n                                        successor is in the CLOSED list which\n                                        has a lower <strong>f</strong> than\n                                        successor, skip this successor\n                                        otherwise, add the node to the{\" \"}\n                                        <i>openList</i>\n                                        end (for loop) e. push q on the closed\n                                        list end (while loop){\" \"}\n                                    </li>\n                                </ol>\n                            </ol>\n                        </ol>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-greedy\",\n                name: \"Greedy\",\n                description: (\n                    <div>\n                        <p>\n                            Same as A* except this time we will only look at the{\" \"}\n                            <b>h</b> cost <br />\n                            We create two lists – <i>openList</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <ol>\n                            <li>\n                                Initialize the <i>openList</i> and put the\n                                starting node on the <i>openList</i> (you can\n                                leave its <strong>h</strong> at zero)\n                            </li>\n                            <li>Initialize the closed list as empty list</li>\n                            <li>\n                                while the <i>openList</i> is not empty{\" \"}\n                            </li>\n                            <ol>\n                                <li>\n                                    find the node with the least{\" \"}\n                                    <strong>h</strong> on the <i>openList</i>,\n                                    call it \"<strong>q</strong>\"{\" \"}\n                                </li>\n                                <li>\n                                    pop q off the <i>openList</i>{\" \"}\n                                </li>\n                                <li>\n                                    generate q's 4 neighbours and set their\n                                    parents to q{\" \"}\n                                </li>\n                                <li>for each successor </li>\n                                <ol>\n                                    <li>\n                                        if successor is the goal, stop search\n                                        successor.<strong>h</strong> = distance\n                                        from goal to successor (This can be done\n                                        using many ways, we will discuss three\n                                        heuristics- Manhattan, Diagonal and\n                                        Euclidean Heuristics)\n                                    </li>\n                                    <li>\n                                        if a node with the same position as\n                                        successor is in the <i>openList</i>{\" \"}\n                                        which has a lower <strong>h</strong>{\" \"}\n                                        than successor, skip this successor{\" \"}\n                                    </li>\n                                    <li>\n                                        if a node with the same position as\n                                        successor is in the CLOSED list which\n                                        has a lower <strong>h</strong> than\n                                        successor, skip this successor\n                                        otherwise, add the node to the{\" \"}\n                                        <i>openList</i>\n                                        end (for loop) e. push q on the closed\n                                        list end (while loop){\" \"}\n                                    </li>\n                                </ol>\n                            </ol>\n                        </ol>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-bfs\",\n                name: \"Breadth-First-Search\",\n                description: (\n                    <div>\n                        <p>\n                            Visit all the siblings before exploring the children\n                            <br />\n                            <b>Initialisation</b>\n                            <br />\n                            set up a <b>queue</b> and put the <i>source</i> into\n                            it. set up a <b>parents</b> map and set the parent\n                            of <i>source</i> as NULL\n                        </p>\n                        <ol>\n                            <li>loop until target is found</li>\n                            <ol>\n                                <li>\n                                    <b>currNode</b> = <i>queue[0]</i>\n                                </li>\n                                <li>\n                                    push the <i>currNode</i> to the{\" \"}\n                                    <i>visitedNodes</i> list\n                                </li>\n                                <li>\n                                    if <i>currNode</i> is the target then{\" \"}\n                                    <i>break</i>\n                                </li>\n                                <li>\n                                    else, remove <i>currNode</i> from the{\" \"}\n                                    <i>queue</i>\n                                </li>\n                                <li>\n                                    set the parent of the <i>neighbours</i> as\n                                    the <i>currNode</i>\n                                </li>\n                                <li>\n                                    push the <b>neighbours</b> of the{\" \"}\n                                    <i>currNode</i> into the <i>queue</i>\n                                </li>\n                            </ol>\n                        </ol>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-dfs\",\n                name: \"Depth-First-Search\",\n                description: (\n                    <div>\n                        <p>\n                            Visit all the children before exploring the siblings\n                            <br />\n                            <b>Initialisation</b>\n                            <br />\n                            set up an empty <b>visitedNodes</b>\n                            <br />\n                            set up a <b>parents</b> map and set the parent of{\" \"}\n                            <i>source</i> as NULL\n                            <b>currNode</b> = <i>source</i>\n                        </p>\n                        <ol>\n                            <li>\n                                if <b>targetFound</b> flag is true, then return\n                            </li>\n                            <li>\n                                if <b>currNode</b> = <i>target</i>\n                                <ol>\n                                    <li>\n                                        push the <i>currNode</i> into the{\" \"}\n                                        <i>visitedNodes</i>\n                                    </li>\n                                    <li>\n                                        set the <b>targetFound</b> flag to true\n                                        and <i>return</i>\n                                    </li>\n                                </ol>\n                            </li>\n                            <li>\n                                push the <i>currNode</i> to the{\" \"}\n                                <i>visitedNodes</i> list\n                            </li>\n                            <li>\n                                set the parent of the <i>neighbours</i> as the{\" \"}\n                                <i>currNode</i>\n                            </li>\n                            <li>\n                                loop through the <i>neighbours</i> unless the{\" \"}\n                                <i>targetFound</i> flag is false\n                                <ol>\n                                    <li>recurse from step 1</li>\n                                    <li>\n                                        remove the <i>neighbour</i> from{\" \"}\n                                        <i>neighbours</i> list\n                                    </li>\n                                </ol>\n                            </li>\n                        </ol>\n                    </div>\n                ),\n            },\n        ],\n        mazes: [\n            { id: \"maze-none\", name: \"Create\" },\n            { id: \"maze-binary-tree\", name: \"Binary Tree\" },\n            { id: \"maze-dfs\", name: \"Depth First Search\" },\n            { id: \"maze-recursive-division\", name: \"Recursive Division\" },\n            { id: \"maze-spiral\", name: \"Spiral\" },\n            { id: \"maze-random\", name: \"Random Maze\" },\n        ],\n        speeds: [\n            { id: \"speed-faster\", name: \"Faster\", speed: 10 },\n            { id: \"speed-fast\", name: \"Fast\", speed: 15 },\n            { id: \"speed-normal\", name: \"Normal\", speed: 20 },\n            { id: \"speed-slow\", name: \"Slow\", speed: 200 },\n            { id: \"speed-slower\", name: \"Slower\", speed: 500 },\n        ],\n    };\n\n    constructMaze = (walls) => {\n        for (let i = 0; i < walls.length; i++) {\n            const wall = walls[i];\n            setTimeout(() => {\n                const nodeDom = document.querySelector(\n                    `#node-${wall.x}-${wall.y}`\n                );\n                nodeDom.classList.remove(\"node-unvisited\");\n                nodeDom.classList.add(\"node-wall\");\n                if (i === walls.length - 1) {\n                    setTimeout(() => {\n                        this.props.stopLoading();\n                        this.props.onMazeCreated(walls, []);\n                    }, this.props.speed);\n                }\n            }, (this.props.speed * i) / 2);\n        }\n    };\n\n    getSelectedMazeFunction = (mazeId) => {\n        switch (mazeId) {\n            case \"maze-binary-tree\":\n                return generateBinaryTreeMaze;\n            case \"maze-dfs\":\n                return generateDFSMaze;\n            case \"maze-recursive-division\":\n                return generateRecursiveDivisionMaze;\n            case \"maze-spiral\":\n                return generateSpiralMaze;\n            case \"maze-random\":\n                return generateRandomMaze;\n            case \"maze-none\":\n                return -1;\n            default:\n                return null;\n        }\n    };\n\n    resetMesh = () => {\n        setTimeout(() => {\n            document\n                .querySelectorAll(\".grid-container .node\")\n                .forEach((nodeDom) => {\n                    nodeDom.classList.remove(\"node-wall\");\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.remove(\"path-to-top\");\n                    nodeDom.classList.remove(\"path-to-right\");\n                    nodeDom.classList.remove(\"path-to-bottom\");\n                    nodeDom.classList.remove(\"path-to-left\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                });\n        }, 1);\n    };\n\n    setMazeId = (selectedMazeId) => {\n        const generateMaze = this.getSelectedMazeFunction(selectedMazeId);\n        if (generateMaze === null) {\n            alert(\"Coming Soon !!!\");\n            return;\n        }\n        setTimeout(() => {\n            const dom = document.querySelector(\".maze-options-container\");\n            dom.classList.remove(\"show\");\n            this.resetMesh(); // clear the maze\n        }, 1);\n        setTimeout(() => {\n            this.props.onMazeChanged(selectedMazeId);\n        }, 1);\n        if (generateMaze === -1) return;\n        this.props.startLoading();\n        console.log(\"Generate Maze : \", selectedMazeId);\n        const wallsInOrder = generateMaze(\n            this.props.rows,\n            this.props.columns,\n            this.props.source,\n            this.props.target\n        );\n        this.constructMaze(wallsInOrder);\n    };\n\n    showAlgorithmOptionsContainer() {\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showMazeOptionsContainer() {\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showSpeedOptionsContainer() {\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    getSelectedAlgorithm(selectedAlgorithmId) {\n        const algorithm = this.state.algorithms.filter(\n            (algorithm) => algorithm.id === selectedAlgorithmId\n        );\n        return algorithm[0];\n    }\n\n    getSelectedMaze(selectedMazeId) {\n        const maze = this.state.mazes.filter(\n            (maze) => maze.id === selectedMazeId\n        );\n        return maze[0];\n    }\n\n    getSelectedSpeed(selectedSpeedId) {\n        const speed = this.state.speeds.filter(\n            (speed) => speed.id === selectedSpeedId\n        );\n        return speed[0];\n    }\n\n    render() {\n        const {\n            selectedAlgorithmId,\n            selectedSpeedId,\n            selectedMazeId,\n            onAlgorithmChanged,\n            onSpeedChanged,\n            startWalking,\n            clearPath,\n            destructWalls,\n            resetMesh,\n        } = this.props;\n        return (\n            <React.Fragment>\n                <nav className=\"navbar-custom\">\n                    <span className=\"brand\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"logo\"\n                        />\n                        <span className=\"my-auto\">Walk to the Destination</span>\n                    </span>\n                    <div className=\"actions-container\">\n                        <button id=\"btn-clear-path\" onClick={() => clearPath()}>\n                            <span>Clear Path</span>\n                            <i className=\"fas fa-eraser\"></i>\n                        </button>\n                        <button\n                            id=\"btn-desctruct-walls\"\n                            onClick={() => destructWalls()}\n                        >\n                            <span>Destruct Walls</span>\n                            <i className=\"fas fa-snowplow\"></i>\n                        </button>\n                        <button id=\"btn-reset-mesh\" onClick={() => resetMesh()}>\n                            <span>Reset Mesh</span>\n                            <i className=\"fas fa-trash-restore\"></i>\n                        </button>\n                        <button\n                            id=\"btn-start-walking\"\n                            onClick={() => startWalking()}\n                        >\n                            <span>Start Walking</span>\n                            <i className=\"fas fa-play-circle\"></i>\n                        </button>\n                    </div>\n                    <div className=\"walking-options\">\n                        <ul>\n                            <li>\n                                <button\n                                    className=\"btn-algorithm\"\n                                    onClick={this.showAlgorithmOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedAlgorithm(\n                                                selectedAlgorithmId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Algorithm\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-maze\"\n                                    onClick={this.showMazeOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedMaze(selectedMazeId)\n                                                .name\n                                        }\n                                    </span>{\" \"}\n                                    Maze\n                                    <i className=\"fab fa-magento ml-1\"></i>\n                                </button>\n                            </li>\n                            <li>\n                                <button\n                                    className=\"btn-speed\"\n                                    onClick={this.showSpeedOptionsContainer}\n                                >\n                                    Speed :{\" \"}\n                                    <span>\n                                        {\n                                            this.getSelectedSpeed(\n                                                selectedSpeedId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    <i className=\"fas fa-tachometer-alt\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"option-container algorithm-options-container\">\n                    <NavItem\n                        options={this.state.algorithms}\n                        selectedOption={selectedAlgorithmId}\n                        onChanged={onAlgorithmChanged}\n                    />\n                </div>\n                <div className=\"option-container maze-options-container\">\n                    <NavItem\n                        options={this.state.mazes}\n                        selectedOption={selectedMazeId}\n                        onChanged={this.setMazeId}\n                    />\n                </div>\n                <div className=\"option-container speed-options-container\">\n                    <NavItem\n                        options={this.state.speeds}\n                        selectedOption={selectedSpeedId}\n                        onChanged={onSpeedChanged}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default NavBar;\n","const NodeState = {\n    NODE_UNVISITED: 0,\n    NODE_VISITED: 1,\n    NODE_IS_WALL: -1,\n    NODE_IS_SOURCE: 10,\n    NODE_IS_TARGET: 100,\n    NODE_FALLS_IN_PATH: 50,\n    NODE_IS_VISITING: 2,\n};\nexport default NodeState;\n","import React, { Component } from \"react\";\nimport \"./node.css\";\nimport NodeState from \"./node_state\";\nclass Node extends Component {\n    render() {\n        const {\n            nodeState,\n            position,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onMouseLeave,\n            interactionDone,\n        } = this.props;\n        if (onMouseEnter === undefined) {\n            return (\n                <div className={this.getNodeStateClass(nodeState)}>\n                    {/* <div></div> */}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    className={this.getNodeStateClass(\n                        nodeState,\n                        interactionDone\n                    )}\n                    id={`node-${position.x}-${position.y}`}\n                    data-x={position.x}\n                    data-y={position.y}\n                    onMouseDown={() => onMouseDown(nodeState, position)}\n                    onMouseUp={() => onMouseUp(nodeState, position)}\n                    onMouseEnter={() => onMouseEnter(nodeState, position)}\n                    onMouseLeave={() => onMouseLeave(nodeState, position)}\n                >\n                    {/* <div></div> */}\n                </div>\n            );\n        }\n    }\n\n    getNodeStateClass(nodeState, interactionDone) {\n        let classes = \"\";\n        if (!interactionDone && !this.props.legend && window.innerWidth > 950)\n            classes += \"node-circle \";\n        classes += \"node node-\";\n        switch (nodeState) {\n            case NodeState.NODE_UNVISITED:\n                classes += \"unvisited\";\n                break;\n            case NodeState.NODE_VISITED:\n                classes += \"visited\";\n                break;\n            case NodeState.NODE_IS_WALL:\n                classes += \"wall\";\n                break;\n            case NodeState.NODE_IS_SOURCE:\n                classes += \"source\";\n                break;\n            case NodeState.NODE_IS_TARGET:\n                classes += \"target\";\n                break;\n            default:\n                classes += \"unvisited\";\n                break;\n        }\n        return classes;\n    }\n}\n\nexport default Node;\n","import React from \"react\";\nimport \"./legend.css\";\nimport Node from \"../Node/node\";\nimport Position from \"../../helper/position\";\nimport NodeState from \"../Node/node_state\";\n\nconst Legend = () => {\n    return (\n        <section className=\"legend-container\">\n            <ul>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_UNVISITED}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                            disabled\n                        />\n                        <span className=\"ml-1\">Unvisited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_VISITED}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Visited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_WALL}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Wall</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_SOURCE}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Source</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_TARGET}\n                            position={new Position(-1, -1)}\n                            legend={true}\n                        />\n                        <span className=\"ml-1\">Target</span>\n                    </div>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default Legend;\n","import React, { Component } from \"react\";\nimport Node from \"../Node/node\";\nimport NodeState from \"../Node/node_state\";\nimport Position from \"../../helper/position\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n    state = {\n        isMousePressed: false,\n        movingSource: false,\n        movingTarget: false,\n    };\n\n    constructor() {\n        super();\n        this.prevPos = null;\n    }\n\n    toggleWall(position) {\n        const nodeDom = document.getElementById(\n            `node-${position.x}-${position.y}`\n        );\n        if (\n            nodeDom.classList.contains(\"node-source\") ||\n            nodeDom.classList.contains(\"node-target\")\n        )\n            return;\n        nodeDom.classList.toggle(\"node-unvisited\");\n        nodeDom.classList.toggle(\"node-wall\");\n    }\n\n    setNodeAsSource(position, set = true) {\n        const nodeDom = document.getElementById(\n            `node-${position.x}-${position.y}`\n        );\n        if (set && nodeDom.classList.contains(\"node-target\"))\n            return this.setNodeAsSource(this.prevPos);\n\n        if (set) nodeDom.classList.add(\"node-source\");\n        else nodeDom.classList.remove(\"node-source\");\n    }\n\n    setNodeAsTarget(position, set = true) {\n        const nodeDom = document.getElementById(\n            `node-${position.x}-${position.y}`\n        );\n        if (set && nodeDom.classList.contains(\"node-source\"))\n            return this.setNodeAsTarget(this.prevPos);\n        if (set) nodeDom.classList.add(\"node-target\");\n        else nodeDom.classList.remove(\"node-target\");\n    }\n\n    getSourcePosition() {\n        const sourceDom = document.querySelector(\n            \".grid-container .node.node-source\"\n        );\n        if (sourceDom === null) return this.prevPos;\n        return new Position(sourceDom.dataset.x, sourceDom.dataset.y);\n    }\n\n    getTargetPosition() {\n        const targetDom = document.querySelector(\n            \".grid-container .node.node-target\"\n        );\n        if (targetDom === null) return this.prevPos;\n        return new Position(targetDom.dataset.x, targetDom.dataset.y);\n    }\n\n    handleMouseLeavingGrid() {\n        this.setState({ isMousePressed: false });\n    }\n\n    handleMouseUp(nodeState, position) {\n        this.setState({ isMousePressed: false });\n        if (this.state.movingSource) {\n            this.setState({ movingSource: false });\n            this.props.setNodeAsSource(this.getSourcePosition());\n        } else if (this.state.movingTarget) {\n            this.setState({ movingTarget: false });\n            this.props.setNodeAsTarget(this.getTargetPosition());\n        } else {\n            this.props.updateWalls();\n        }\n    }\n\n    handleMouseDown(nodeState, position) {\n        this.setState({ isMousePressed: true });\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: true });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: true });\n        } else {\n            this.toggleWall(position);\n        }\n    }\n    handleMouseEnter(nodeState, position) {\n        if (this.state.isMousePressed) {\n            if (this.state.movingSource) {\n                // TODO: change nodeState to source\n                this.setNodeAsSource(position);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to target\n                this.setNodeAsTarget(position);\n            } else {\n                // TODO: toggleWall()\n                this.toggleWall(position);\n            }\n        }\n    }\n    handleMouseLeave(nodeState, position) {\n        if (this.state.isMousePressed) {\n            const nodeDom = document.getElementById(\n                `node-${position.x}-${position.y}`\n            );\n            if (this.state.movingSource) {\n                // TODO: change nodeState to unvisited\n                if (!nodeDom.classList.contains(\"node-target\"))\n                    this.prevPos = position;\n                else this.setNodeAsSource(this.prevPos, false);\n                this.setNodeAsSource(position, false);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to unvisited\n                if (!nodeDom.classList.contains(\"node-source\"))\n                    this.prevPos = position;\n                else this.setNodeAsTarget(this.prevPos, false);\n                this.setNodeAsTarget(position, false);\n            } else {\n                // do nothing\n            }\n        }\n    }\n\n    decideNodeState(x, y, source, target, walls, visitedNodes) {\n        if (x === source.x && y === source.y) {\n            return NodeState.NODE_IS_SOURCE;\n        } else if (x === target.x && y === target.y) {\n            return NodeState.NODE_IS_TARGET;\n        } else if (\n            walls.some((position) => position.x === x && position.y === y)\n        ) {\n            return NodeState.NODE_IS_WALL;\n        } else if (\n            visitedNodes.some(\n                (position) => position.x === x && position.y === y\n            )\n        ) {\n            return NodeState.NODE_VISITED;\n        }\n        return NodeState.NODE_UNVISITED;\n    }\n\n    render() {\n        const {\n            rows,\n            columns,\n            source,\n            target,\n            walls,\n            visitedNodes,\n            interactionDone,\n        } = this.props;\n        const paddingX = (window.innerWidth - columns * 20) / 2;\n        const paddingY = (window.innerHeight - 190 - rows * 20) / 2;\n        const nodes = [];\n\n        for (var x = 1; x <= rows; x++) {\n            for (var y = 1; y <= columns; y++) {\n                const key = \"node-\" + x + \"-\" + y;\n                const nodeState = this.decideNodeState(\n                    x,\n                    y,\n                    source,\n                    target,\n                    walls,\n                    visitedNodes\n                );\n\n                nodes.push(\n                    <Node\n                        key={key}\n                        position={new Position(x, y)}\n                        id={key}\n                        nodeState={nodeState}\n                        interactionDone={interactionDone}\n                        onMouseDown={(nodeState, position) =>\n                            this.handleMouseDown(nodeState, position)\n                        }\n                        onMouseUp={(nodeState, position) =>\n                            this.handleMouseUp(nodeState, position)\n                        }\n                        onMouseEnter={(nodeState, position) =>\n                            this.handleMouseEnter(nodeState, position)\n                        }\n                        onMouseLeave={(nodeState, position) =>\n                            this.handleMouseLeave(nodeState, position)\n                        }\n                    />\n                );\n            }\n        }\n        return (\n            <section\n                className=\"grid-container\"\n                onMouseLeave={() => this.handleMouseLeavingGrid()}\n                style={{\n                    paddingTop: paddingY,\n                    paddingRight: paddingX,\n                    paddingBottom: paddingY,\n                    paddingLeft: paddingX,\n                }}\n            >\n                {nodes}\n            </section>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./insights.css\";\n\nconst Insights = (props) => {\n    const {\n        totalNodes,\n        walls,\n        numberOfVisitedNodes,\n        pathLength,\n        timeTaken,\n        targetReached,\n    } = props;\n    return (\n        <section className=\"insights-container\">\n            <div>\n                {totalNodes ? (\n                    <span className=\"insights insights-total\">\n                        Total Nodes: <strong>{totalNodes}</strong>\n                    </span>\n                ) : null}\n                {walls ? (\n                    <span className=\"insights insights-walls\">\n                        Walls: <strong>{walls}</strong>\n                    </span>\n                ) : null}\n                {numberOfVisitedNodes ? (\n                    <span className=\"insights insights-visited\">\n                        Visited Nodes: <strong>{numberOfVisitedNodes}</strong>\n                    </span>\n                ) : null}\n                {pathLength && targetReached ? (\n                    <span className=\"insights insights-path\">\n                        Length of Path: <strong>{pathLength}</strong>\n                    </span>\n                ) : null}\n                {timeTaken ? (\n                    <span className=\"insights insights-time\">\n                        Time Taken:{\" \"}\n                        <strong>\n                            {timeTaken >= 1000 ? (\n                                <React.Fragment>\n                                    {timeTaken / 1000} s\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>{timeTaken} ms</React.Fragment>\n                            )}\n                        </strong>\n                    </span>\n                ) : null}\n                {!targetReached && numberOfVisitedNodes ? (\n                    <span className=\"insights insights-target-not-reached\">\n                        <strong>Target NOT Reachable</strong>\n                    </span>\n                ) : null}\n            </div>\n        </section>\n    );\n};\n\nexport default Insights;\n","import React from \"react\";\nimport \"./copyright.css\";\nconst Copyright = () => {\n    return (\n        <section className=\"copyright-container\">\n            <div className=\"github-links\">\n                <a href=\"https://github.com/shantanu0323\">\n                    <i className=\"fab fa-github-square\"></i>\n                </a>\n            </div>\n            <div className=\"copyright\">\n                Made with <i className=\"fas fa-heart\"></i> by{\" \"}\n                <a href=\"https://shantanu0323.github.io\">Shantanu Pramanik</a>\n            </div>\n            <div className=\"social-links\">\n                <a href=\"https://www.linkedin.com/in/shantanu-pramanik/\">\n                    <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"https://www.facebook.com/shantanu.pramanik1\">\n                    <i className=\"fab fa-facebook-square\"></i>\n                </a>\n                <a href=\"https://www.twitter.com/shantanu0323/\">\n                    <i className=\"fab fa-twitter-square\"></i>\n                </a>\n                <a href=\"https://www.instagram.com/shantanu0323/\">\n                    <i className=\"fab fa-instagram-square\"></i>\n                </a>\n            </div>\n        </section>\n    );\n};\n\nexport default Copyright;\n","const resetSourceAndTarget = () => {\n    setTimeout(() => {\n        const sourceDom = document.querySelector(\".node.node-source\");\n        sourceDom.classList.remove(\"path-to-top\");\n        sourceDom.classList.remove(\"path-to-right\");\n        sourceDom.classList.remove(\"path-to-bottom\");\n        sourceDom.classList.remove(\"path-to-left\");\n\n        const targetDom = document.querySelector(\".node.node-target\");\n        targetDom.classList.remove(\"path-to-top\");\n        targetDom.classList.remove(\"path-to-right\");\n        targetDom.classList.remove(\"path-to-bottom\");\n        targetDom.classList.remove(\"path-to-left\");\n    }, 1);\n};\n\nexport default resetSourceAndTarget;\n","import React from \"react\";\nimport \"./loader.css\";\nconst Loader = (props) => {\n    const classes = props.loading\n        ? \"loader-container show\"\n        : \"loader-container hide\";\n    return (\n        <div className={classes}>\n            {props.interactionDone ? (\n                <React.Fragment>\n                    <div className=\"top-bar\"></div>\n                    <div className=\"right-bar\"></div>\n                    <div className=\"bottom-bar\"></div>\n                    <div className=\"left-bar\"></div>\n                </React.Fragment>\n            ) : null}\n        </div>\n    );\n};\n\nexport default Loader;\n","import NodeState from \"../components/Node/node_state\";\nimport Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nclass Node {\n    constructor(\n        position,\n        distance = Infinity,\n        nodeState = NodeState.NODE_UNVISITED\n    ) {\n        this.position = position;\n        this.distance = distance;\n        this.nodeState = nodeState;\n    }\n}\n\nconst mesh = [];\nlet unvisitedNodes = [];\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    mesh.length = 0;\n    unvisitedNodes.length = 0;\n    for (let i = 1; i <= window.rows; i++) {\n        const row = [];\n        for (let j = 1; j <= window.columns; j++) {\n            const node = new Node(new Position(i, j));\n            if (isEqual(node.position, source)) {\n                node.nodeState = NodeState.NODE_IS_SOURCE;\n                node.distance = 0;\n            } else if (isEqual(node.position, target)) {\n                node.nodeState = NodeState.NODE_IS_TARGET;\n            }\n            unvisitedNodes.push(node);\n            row[j] = node;\n        }\n        mesh[i] = row;\n    }\n    walls.forEach((position) => {\n        mesh[position.x][position.y].nodeState = NodeState.NODE_IS_WALL;\n    });\n};\n\nconst getNonWallNeighbours = (node) => {\n    const neighbourPositions = getNeighbours(\n        node.position,\n        window.rows,\n        window.columns\n    );\n    const neighbours = [];\n    neighbourPositions.map((position) => {\n        const node = mesh[position.x][position.y];\n        if (node.nodeState !== NodeState.NODE_IS_WALL) {\n            neighbours.push(node);\n            return true;\n        }\n        return false;\n    });\n\n    return neighbours;\n};\n\nconst getPreviousNodeInPath = (currNode) => {\n    const neighbours = getNonWallNeighbours(currNode).filter(\n        (node) =>\n            mesh[node.position.x][node.position.y].nodeState ===\n            NodeState.NODE_VISITED\n    );\n    let min = Infinity;\n    let prevNode;\n    for (let i = 0; i < neighbours.length; i++) {\n        const node = neighbours[i];\n        if (node.distance < min) {\n            min = node.distance;\n            prevNode = node;\n        }\n    }\n    return prevNode;\n};\n\nconst getNodesInPath = (visitedNodes) => {\n    const path = [];\n    let currNode = visitedNodes[visitedNodes.length - 1]; // target\n    while (currNode.distance > 1) {\n        currNode = getPreviousNodeInPath(currNode);\n        path.unshift(currNode);\n    }\n    return path;\n};\n\nconst getVisitedNodes = (target) => {\n    const visitedNodes = [];\n\n    while (unvisitedNodes.length > 0) {\n        let minDist = Infinity;\n        let currNode = undefined;\n        for (let i = 0; i < unvisitedNodes.length; i++) {\n            if (unvisitedNodes[i].distance < minDist) {\n                minDist = unvisitedNodes[i].distance;\n                currNode = unvisitedNodes[i];\n            }\n        }\n        if (currNode === undefined) {\n            // console.log(\"Target NOT Reachable\");\n            break;\n        }\n\n        visitedNodes.push(currNode);\n        unvisitedNodes = unvisitedNodes.filter(\n            (node) => !isEqual(node.position, currNode.position)\n        );\n        if (isEqual(currNode.position, target)) {\n            console.log(\"TARGET REACHED\");\n            break;\n        }\n        currNode.nodeState =\n            currNode.nodeState === NodeState.NODE_IS_SOURCE\n                ? NodeState.NODE_IS_SOURCE\n                : NodeState.NODE_VISITED;\n\n        getNonWallNeighbours(currNode).forEach((node) => {\n            const alt = currNode.distance + 1;\n            node.distance = alt < node.distance ? alt : node.distance;\n        });\n    }\n\n    return visitedNodes;\n};\n\nconst performDijkstra = async (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    // perform dijkstra(graph, source, target) on the graph and get the visited nodes in order\n    const visitedNodesObjects = getVisitedNodes(target);\n    const pathObjects = getNodesInPath(visitedNodesObjects);\n    const visitedNodes = [];\n    const path = [];\n    visitedNodesObjects.map((node) => visitedNodes.push(node.position));\n    pathObjects.map((node) => path.push(node.position));\n    return { visitedNodes, path };\n};\n\nexport default performDijkstra;\n","import Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nclass Node {\n    constructor(position) {\n        this.position = position;\n        this.parent = null;\n        this.f = Infinity;\n        this.g = Infinity;\n        this.h = Infinity;\n    }\n}\n\nlet openList = [];\nconst closedList = [];\n\nconst distance = (a, b) => {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    openList.length = 0;\n    closedList.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n\n    const sourceNode = new Node(source);\n    sourceNode.g = 0;\n    sourceNode.h = 0;\n    sourceNode.f = 0; //sourceNode.g + sourceNode.h;\n    openList.push(sourceNode);\n};\n\nconst getTraversableNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (position) => !walls.some((wall) => isEqual(wall, position))\n            // !closedList.some((node) => isEqual(node.position, position))\n        )\n        .map((position) => {\n            neighbours.push(new Node(new Position(position.x, position.y)));\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst nodeWithLeastF = () => {\n    openList.sort((a, b) => {\n        // return a.f > b.f;\n        return a.f <= b.f ? a.h > b.h : a.f > b.f;\n    });\n    return openList[0];\n};\n\nconst performAstar = async (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    // add source to the openList\n    initialiseMesh(rows, columns, source, target, walls);\n    let found = undefined;\n    // START LOOP\n    while (\n        found === undefined &&\n        openList.length > 0 &&\n        closedList.length < rows * columns - walls.length\n    ) {\n        // CURRENT = node in the openList with the least f_cost\n        const currNode = nodeWithLeastF();\n\n        // remove current from the openList\n        // while (openList[0] !== undefined && openList[0].f === currNode.f)\n        openList.shift();\n\n        // FOREACH neighbour of the CURRENT\n        const neighbours = getTraversableNeighbours(currNode.position, walls);\n        for (let i = 0; i < neighbours.length; i++) {\n            const neighbour = neighbours[i];\n\n            // set parent of the neighbour to the current\n            neighbour.parent = currNode;\n\n            // if neighbour = target then return\n            if (isEqual(neighbour.position, target)) {\n                found = neighbour;\n                break;\n            }\n\n            // if neighbour is not traversable or neighbour in the closedList then skip to the next neighbour\n            // set the f_cost of the neighbour\n            neighbour.g = currNode.g + 1; //distance(source, neighbour.position);\n            neighbour.h = distance(neighbour.position, target);\n            neighbour.f = neighbour.g + neighbour.h;\n\n            if (\n                openList.some(\n                    (node) =>\n                        isEqual(node.position, neighbour.position) &&\n                        node.f <= neighbour.f\n                )\n            )\n                continue;\n            if (\n                closedList.some(\n                    (node) =>\n                        isEqual(node.position, neighbour.position) &&\n                        node.f <= neighbour.f\n                )\n            )\n                continue;\n\n            openList.push(neighbour);\n            // }\n        }\n\n        // add current to the closedList\n        if (\n            !closedList.some((node) =>\n                isEqual(node.position, currNode.position)\n            )\n        )\n            closedList.push(currNode);\n        if (found) closedList.push(found);\n        // END LOOP\n    }\n    const visitedNodes = [];\n    closedList.map((node) => visitedNodes.push(node.position));\n    const path = [];\n    let node = closedList[closedList.length - 1];\n    while (node !== null) {\n        if (!isEqual(node.position, source) && !isEqual(node.position, target))\n            path.unshift(node.position);\n        node = node.parent;\n    }\n    return { visitedNodes, path };\n};\n\nexport default performAstar;\n","import Position, { isEqual, getNeighbours } from \"../helper/position\";\n\nclass Node {\n    constructor(position) {\n        this.position = position;\n        this.parent = null;\n        this.f = Infinity;\n    }\n}\n\nlet openList = [];\nconst closedList = [];\n\nconst distance = (a, b) => {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    openList.length = 0;\n    closedList.length = 0;\n    window.rows = rows;\n    window.columns = columns;\n\n    const sourceNode = new Node(source);\n    sourceNode.f = distance(source, target);\n    openList.push(sourceNode);\n};\n\nconst getTraversableNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (position) =>\n                !walls.some((wall) => isEqual(wall, position)) &&\n                !closedList.some((node) => isEqual(node.position, position))\n        )\n        .map((position) => {\n            neighbours.push(new Node(new Position(position.x, position.y)));\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst nodeWithLeastF = () => {\n    openList.sort((a, b) => {\n        return a.f > b.f;\n    });\n    return openList[0];\n};\n\nconst performGreedy = async (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    // add source to the openList\n    initialiseMesh(rows, columns, source, target, walls);\n    // START LOOP\n    while (\n        openList.length > 0 &&\n        closedList.length < rows * columns - walls.length\n    ) {\n        const currNode = nodeWithLeastF();\n        // remove current from the openList\n        openList.shift();\n        // add current to the closedList\n        closedList.push(currNode);\n\n        if (isEqual(currNode.position, target)) break;\n\n        // FOREACH neighbour of the CURRENT\n        getTraversableNeighbours(currNode.position, walls).map((neighbour) => {\n            // if neighbour is not traversable or neighbour in the closedList then skip to the next neighbour\n            // else set the f_cost of the neighbour\n            neighbour.f = distance(neighbour.position, target);\n            // set parent of the neighbour to the current\n            neighbour.parent = currNode;\n            // if new path to neighbour is shorter or if the neighbour is NOT in openList\n            let found = false;\n            for (let i = 0; i < openList.length; i++) {\n                if (\n                    isEqual(openList[i].position, neighbour.position) &&\n                    neighbour.f <= openList[i].f\n                ) {\n                    openList[i] = neighbour;\n                    found = true;\n                    break;\n                }\n            }\n            // if neighbour is not in openlist then add it to openList\n            if (!found) {\n                openList.push(neighbour);\n            }\n            return true;\n        });\n\n        // END LOOP\n    }\n    const visitedNodes = [];\n    closedList.map((node) => visitedNodes.push(node.position));\n    const path = [];\n    let node = closedList[closedList.length - 1];\n    while (node !== null) {\n        if (!isEqual(node.position, source) && !isEqual(node.position, target))\n            path.unshift(node.position);\n        node = node.parent;\n    }\n    return { visitedNodes, path };\n};\n\nexport default performGreedy;\n","import { isEqual, getNeighbours } from \"../helper/position\";\n\nlet visitedNodes = [];\nconst queue = [];\nconst parents = {};\n\nconst getKey = (position) => {\n    return `node-${position.x}-${position.y}`;\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    window.source = source;\n    window.target = target;\n    visitedNodes.length = 0;\n    queue.length = 0;\n    queue.push(source);\n    parents[getKey(source)] = null;\n};\n\nconst getNonWallUnvisitedNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (neighbour) =>\n                !walls.some((wall) => isEqual(wall, neighbour)) &&\n                !queue.some((queue) => isEqual(queue, neighbour)) &&\n                !visitedNodes.some((visitedNode) =>\n                    isEqual(visitedNode, neighbour)\n                ) &&\n                !isEqual(neighbour, window.source)\n        )\n        .map((neighbour) => {\n            parents[getKey(neighbour)] = node;\n            neighbours.push(neighbour);\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst runBFS = (target, walls) => {\n    while (queue.length > 0) {\n        const currNode = queue[0];\n        visitedNodes.push(currNode);\n\n        if (isEqual(currNode, target)) return;\n\n        queue.shift();\n        getNonWallUnvisitedNeighbours(currNode, walls).map((neighbour) =>\n            queue.push(neighbour)\n        );\n    }\n};\n\nconst getPath = () => {\n    const path = [];\n    let currNode = window.target;\n    if (!isEqual(visitedNodes[visitedNodes.length - 1], currNode)) return [];\n    while (parents[getKey(currNode)] !== null) {\n        path.unshift(parents[getKey(currNode)]);\n        currNode = parents[getKey(currNode)];\n    }\n    path.shift(); // to remove source\n    return path;\n};\n\nconst performBFS = async (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    runBFS(target, walls);\n    const path = getPath();\n    return { visitedNodes, path };\n};\n\nexport default performBFS;\n","import { isEqual, getNeighbours } from \"../helper/position\";\n\nlet visitedNodes = [];\nlet parents = {};\nlet targetFound = false;\n\nconst getKey = (position) => {\n    return `node-${position.x}-${position.y}`;\n};\n\nconst initialiseMesh = (rows, columns, source, target) => {\n    window.rows = rows;\n    window.columns = columns;\n    window.source = source;\n    window.target = target;\n    visitedNodes.length = 0;\n    parents = {};\n    targetFound = false;\n    parents[getKey(source)] = null;\n};\n\nconst getNonWallUnvisitedNeighbours = (node, walls) => {\n    const neighbourPositions = getNeighbours(node, window.rows, window.columns);\n    const neighbours = [];\n    neighbourPositions\n        .filter(\n            (neighbour) =>\n                !walls.some((wall) => isEqual(wall, neighbour)) &&\n                !visitedNodes.some((visitedNode) =>\n                    isEqual(visitedNode, neighbour)\n                ) &&\n                !isEqual(neighbour, window.source)\n        )\n        .map((neighbour) => {\n            parents[getKey(neighbour)] = node;\n            neighbours.push(neighbour);\n            return true;\n        });\n\n    return neighbours;\n};\n\nconst runDFS = (currNode, walls) => {\n    if (targetFound) return;\n    if (isEqual(currNode, window.target)) {\n        visitedNodes.push(currNode);\n        targetFound = true;\n        return;\n    }\n    visitedNodes.push(currNode);\n    const neighbours = getNonWallUnvisitedNeighbours(currNode, walls);\n    while (neighbours.length > 0 && !targetFound) {\n        runDFS(neighbours[0], walls);\n        neighbours.shift();\n    }\n};\n\nconst getPath = () => {\n    const path = [];\n    let currNode = window.target;\n    if (!isEqual(visitedNodes[visitedNodes.length - 1], currNode)) return [];\n    while (parents[getKey(currNode)] !== null) {\n        path.unshift(parents[getKey(currNode)]);\n        currNode = parents[getKey(currNode)];\n    }\n    path.shift(); // to remove source\n    return path;\n};\n\nconst performDFS = async (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    runDFS(source, walls);\n    const path = getPath();\n    return { visitedNodes, path };\n};\n\nexport default performDFS;\n","import Position from \"./position\";\nconst letterWidth = {\n    A: 5,\n    B: 5,\n    C: 4,\n    D: 5,\n    E: 4,\n    F: 4,\n    G: 5,\n    H: 5,\n    I: 4,\n    J: 5,\n    K: 5,\n    L: 4,\n    M: 6,\n    N: 6,\n    O: 5,\n    P: 5,\n    Q: 6,\n    R: 5,\n    S: 5,\n    T: 4,\n    U: 5,\n    V: 6,\n    W: 6,\n    X: 6,\n    Y: 6,\n    Z: 5,\n    \" \": 3,\n    \"\": 0,\n    \"^\": 4,\n    \"!\": 4,\n    \"-\": 6,\n    \"+\": 9,\n    \"|\": 31,\n};\n\nconst lengthOfWord = (word) => {\n    let len = 0;\n    Array.from(word).forEach((ch) => {\n        len += letterWidth[ch.toUpperCase()];\n    });\n    len--;\n    return len;\n};\n\nconst ltow = (ch, start = new Position(1, 1)) => {\n    const walls = [];\n    walls.length = 0;\n    let i;\n    let nextStart = start;\n    switch (ch) {\n        case \"A\":\n            for (i = 4; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x, start.y + 1));\n            walls.push(new Position(start.x, start.y + 2));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            walls.push(new Position(start.x + 2, start.y + 1));\n            walls.push(new Position(start.x + 2, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"A\"];\n            break;\n        case \"B\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 2, start.y + i));\n            walls.push(new Position(start.x + 3, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"B\"];\n            break;\n        case \"C\":\n            walls.push(new Position(start.x, start.y + 1));\n            walls.push(new Position(start.x, start.y + 2));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"C\"];\n            break;\n        case \"D\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"D\"];\n            break;\n        case \"E\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 2, start.y + 1));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"E\"];\n            break;\n        case \"F\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 2, start.y + 1));\n            nextStart.y = start.y + letterWidth[\"F\"];\n            break;\n        case \"G\":\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            for (i = 3; i > 1; i--)\n                walls.push(new Position(start.x + i, start.y + 3));\n            walls.push(new Position(start.x + 2, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"G\"];\n            break;\n        case \"H\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 2, start.y + i));\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            nextStart.y = start.y + letterWidth[\"H\"];\n            break;\n        case \"I\":\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + 1));\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"I\"];\n            break;\n        case \"J\":\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            walls.push(new Position(start.x + 3, start.y));\n            nextStart.y = start.y + letterWidth[\"J\"];\n            break;\n        case \"K\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 0; i < 3; i++) {\n                walls.push(new Position(start.x + 2 + i, start.y + 1 + i));\n                walls.push(new Position(start.x + 2 - i, start.y + 1 + i));\n            }\n            nextStart.y = start.y + letterWidth[\"K\"];\n            break;\n        case \"L\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y));\n            i--;\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"L\"];\n            break;\n        case \"M\":\n            for (i = 4; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x, start.y + 1));\n            walls.push(new Position(start.x + 1, start.y + 2));\n            walls.push(new Position(start.x + 2, start.y + 2));\n            walls.push(new Position(start.x, start.y + 3));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"M\"];\n            break;\n        case \"N\":\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y + i));\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"N\"];\n            break;\n        case \"O\":\n            walls.push(new Position(start.x, start.y + 2));\n            walls.push(new Position(start.x, start.y + 1));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            for (i = 3; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y + 3));\n            nextStart.y = start.y + letterWidth[\"O\"];\n            break;\n        case \"P\":\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 2, start.y + i));\n            nextStart.y = start.y + letterWidth[\"P\"];\n            break;\n        case \"Q\":\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            for (i = 3; i > 0; i--)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i, start.y + 2));\n            for (i = 2; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + i));\n            nextStart.y = start.y + letterWidth[\"Q\"];\n            break;\n        case \"R\":\n            for (i = 4; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y + 3));\n            for (i = 2; i > 0; i--)\n                walls.push(new Position(start.x + 2, start.y + i));\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x + 2 + i, start.y + 1 + i));\n            nextStart.y = start.y + letterWidth[\"R\"];\n            break;\n        case \"S\":\n            for (i = 3; i > 0; i--)\n                walls.push(new Position(start.x, start.y + i));\n            walls.push(new Position(start.x + 1, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 2, start.y + i));\n            walls.push(new Position(start.x + 3, start.y + 3));\n            for (i = 2; i >= 0; i--)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"S\"];\n            break;\n        case \"T\":\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 1));\n            nextStart.y = start.y + letterWidth[\"T\"];\n            break;\n        case \"U\":\n            for (i = 0; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            for (i = 3; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 3));\n            nextStart.y = start.y + letterWidth[\"U\"];\n            break;\n        case \"V\":\n            for (i = 0; i < 3; i++)\n                walls.push(new Position(start.x + i, start.y));\n            for (i = 1; i < 3; i++) {\n                walls.push(new Position(start.x + 2 + i, start.y + i));\n                walls.push(new Position(start.x + 2 + i, start.y + 4 - i));\n            }\n            for (i = 2; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"V\"];\n            break;\n        case \"W\":\n            for (i = 0; i < 4; i++)\n                walls.push(new Position(start.x + i, start.y));\n            walls.push(new Position(start.x + i, start.y + 1));\n            walls.push(new Position(start.x + i - 1, start.y + 2));\n            walls.push(new Position(start.x + i - 2, start.y + 2));\n            walls.push(new Position(start.x + i, start.y + 3));\n            for (i = 3; i >= 0; i--)\n                walls.push(new Position(start.x + i, start.y + 4));\n            nextStart.y = start.y + letterWidth[\"W\"];\n            break;\n        case \"-\":\n        case \"X\":\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + i));\n            for (i = 0; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 4 - i));\n            nextStart.y = start.y + letterWidth[\"X\"];\n            break;\n        case \"Y\":\n            for (i = 0; i < 3; i++) {\n                walls.push(new Position(start.x + i, start.y + i));\n                walls.push(new Position(start.x + i, start.y + 4 - i));\n            }\n            for (i = 3; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 2));\n            nextStart.y = start.y + letterWidth[\"Y\"];\n            break;\n        case \"Z\":\n            for (i = 0; i < 4; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 1; i < 5; i++)\n                walls.push(new Position(start.x + i, start.y + 4 - i));\n            for (i = 1; i < 4; i++)\n                walls.push(new Position(start.x + 4, start.y + i));\n            nextStart.y = start.y + letterWidth[\"Z\"];\n            break;\n        case \" \":\n            nextStart.y = start.y + letterWidth[\" \"];\n            break;\n        case \"^\":\n            for (i = start.x + 6; i > 1; i--)\n                walls.push(new Position(i, start.y));\n            for (i = 1; i <= start.x + 2; i++) {\n                walls.push(new Position(i, start.y - i + 1));\n                walls.push(new Position(i, start.y + i - 1));\n            }\n            nextStart.y = start.y + letterWidth[\"^\"];\n            break;\n        case \"+\":\n            for (i = 0; i < 7; i++)\n                walls.push(new Position(start.x + 2, start.y + i));\n            for (i = 0; i <= 2; i++) {\n                walls.push(new Position(start.x + i, start.y + 5 + i));\n                walls.push(new Position(start.x + 5 - i, start.y + 4 + i));\n            }\n            for (i = 1; i < 4; i += 2)\n                walls.push(new Position(start.x + i, start.y + 5));\n            nextStart.y = start.y + letterWidth[\"+\"];\n            break;\n        case \"!\":\n            for (i = 6; i > 0; i--)\n                walls.push(new Position(start.x - i, start.y));\n            for (i = 3; i > 0; i--) {\n                walls.push(new Position(start.x - i + 1, start.y - i + 1));\n                walls.push(new Position(start.x - i + 1, start.y + i - 1));\n            }\n            nextStart.y = start.y + letterWidth[\"!\"];\n            break;\n        case \"|\":\n            for (i = 0; i < 30; i++)\n                walls.push(new Position(start.x, start.y + i));\n            for (i = 0; i < 30; i += 3) {\n                for (let j = 1; j < 4; j++) {\n                    if (i % 2)\n                        walls.push(new Position(start.x + j, start.y + i));\n                    else walls.push(new Position(start.x - j, start.y + i));\n                }\n            }\n            nextStart.y = start.y + letterWidth[\"!\"];\n            break;\n        default:\n            break;\n    }\n    return { walls, nextStart };\n};\n\nexport { ltow, lengthOfWord };\n","import React, { Component } from \"react\";\nimport \"./interact.css\";\nimport { ltow, lengthOfWord } from \"../../helper/letters\";\nimport Position from \"../../helper/position\";\nimport demo_wall_gif from \"../../static/demo_wall.gif\";\n\nconst Align = {\n    TOP_LEFT: 0,\n    TOP_CENTER: 1,\n    TOP_RIGHT: 2,\n    MIDDLE_LEFT: 3,\n    MIDDLE_CENTER: 4,\n    MIDDLE_RIGHT: 5,\n    BOTTOM_LEFT: 6,\n    BOTTOM_CENTER: 7,\n    BOTTOM_RIGHT: 8,\n    CUSTOM: 9,\n};\nlet currIndex = 1;\nclass Interact extends Component {\n    state = {\n        transition: 7,\n    };\n\n    componentDidMount() {\n        this.startIntro();\n        const skipDom = document.getElementById(\n            `node-${this.props.rows - 4}-${this.props.columns - 4}`\n        );\n        document.getElementById(\n            `btn-skip-interaction`\n        ).style.top = `${skipDom.offsetTop}px`;\n        document.getElementById(\n            `btn-skip-interaction`\n        ).style.left = `${skipDom.offsetLeft}px`;\n        const nextDom = document.getElementById(\n            `node-${this.props.rows - 4}-${this.props.columns - 14}`\n        );\n        document.getElementById(\n            `btn-next-interaction`\n        ).style.top = `${nextDom.offsetTop}px`;\n        document.getElementById(\n            `btn-next-interaction`\n        ).style.left = `${nextDom.offsetLeft}px`;\n\n        const demoDom = document.getElementById(\n            `node-${parseInt(this.props.rows / 2) - 9}-${3}`\n        );\n        document.querySelector(\n            \"img.wall-demo-gif\"\n        ).style.top = `${demoDom.offsetTop}px`;\n        document.querySelector(\n            \"img.wall-demo-gif\"\n        ).style.left = `${demoDom.offsetLeft}px`;\n    }\n\n    getCenter(total, len) {\n        return parseInt((total - len + 1) / 2) + 1;\n    }\n\n    getStartPosition(\n        word,\n        row,\n        lines,\n        alignment = Align.TOP_CENTER,\n        position = new Position(1, 1)\n    ) {\n        const len = lengthOfWord(word);\n        let start = new Position(1, 1);\n        switch (alignment) {\n            case Align.TOP_LEFT:\n                start.x = 1 + row * 7;\n                break;\n            case Align.TOP_CENTER:\n                start.x = 1 + row * 7;\n                start.y = this.getCenter(this.props.columns, len);\n                break;\n            case Align.TOP_RIGHT:\n                start.x = 1 + row * 7;\n                start.y = this.props.columns - len + 1;\n                break;\n            case Align.MIDDLE_LEFT:\n                start.x =\n                    this.getCenter(this.props.rows, lines * 6 - 1) +\n                    row * 7 -\n                    1;\n                break;\n            case Align.MIDDLE_CENTER:\n                start.x =\n                    this.getCenter(this.props.rows, lines * 6 - 1) +\n                    row * 7 -\n                    1;\n                start.y = this.getCenter(this.props.columns, len);\n                break;\n            case Align.MIDDLE_RIGHT:\n                start.x =\n                    this.getCenter(this.props.rows, lines * 6 - 1) +\n                    row * 7 -\n                    1;\n                start.y = this.props.columns - len + 1;\n                break;\n            case Align.BOTTOM_LEFT:\n                start.x = this.props.rows - lines * 6 + row * 7 + 1;\n                break;\n            case Align.BOTTOM_CENTER:\n                start.x = this.props.rows - lines * 6 + row * 7 + 1;\n                start.y = this.getCenter(this.props.columns, len);\n                break;\n            case Align.BOTTOM_RIGHT:\n                start.x = this.props.rows - lines * 6 + row * 7 + 1;\n                start.y = this.props.columns - len + 1;\n                break;\n            case Align.CUSTOM:\n                start.x = position.x;\n                start.y = position.y;\n                break;\n            default:\n                break;\n        }\n        return start;\n        // return new Position(1, 1);\n    }\n\n    getLines(statement) {\n        const lines = [];\n        if (statement.includes(\"\\n\")) {\n            statement.split(\"\\n\").map((line) => lines.push(line.trim()));\n            return lines;\n        }\n        const words = statement.split(\" \");\n        let currentLine = \"\";\n        while (words.length > 0) {\n            const word = words[0];\n            if (lengthOfWord(currentLine + \" \" + word) < this.props.columns) {\n                currentLine += \" \" + word;\n            } else {\n                lines.push(currentLine.trim());\n                currentLine = word;\n            }\n            words.shift();\n        }\n        let start = 0;\n        let k = 0;\n        while (k < currentLine.length) {\n            while (\n                lengthOfWord(currentLine.slice(start, k)) <\n                    this.props.columns &&\n                k < currentLine.length\n            ) {\n                k++;\n            }\n            lines.push(currentLine.slice(start, k - 1).trim());\n            start = k - 1;\n        }\n        lines[lines.length - 1] += currentLine[currentLine.length - 1];\n        return lines;\n    }\n\n    writeOnCanvasDelay(statement, lines) {\n        return (\n            this.state.transition *\n                10 *\n                (statement.length + lines.length + 10) -\n            1000\n        );\n    }\n\n    writeOnCanvas(\n        statement,\n        alignment = Align.TOP_CENTER,\n        position = new Position(1, 1)\n    ) {\n        // Find the lines\n        const lines = this.getLines(statement);\n        //Iterate the lines and print the same\n        let covered = \"\";\n        for (let x = 0; x < lines.length; x++) {\n            const line = lines[x];\n            covered += line;\n            setTimeout(() => {\n                const start = this.getStartPosition(\n                    line,\n                    x,\n                    lines.length,\n                    alignment,\n                    position\n                );\n                for (let i = 0; i < line.length; i++) {\n                    setTimeout(() => {\n                        const ch = line[i].toUpperCase();\n                        const { walls, nextStart } = ltow(ch, start);\n                        for (let k = 0; k < walls.length; k++) {\n                            const wall = walls[k];\n                            setTimeout(() => {\n                                const nodeDom = document.getElementById(\n                                    `node-${wall.x}-${wall.y}`\n                                );\n                                if (nodeDom === null) return;\n                                nodeDom.classList.add(\"node-wall\");\n                                // if (\n                                //     i === line.length - 1 &&\n                                //     k === walls.length - 1 &&\n                                //     x === lines.length - 1\n                                // )\n                                // this.props.stopLoading();\n                            }, this.state.transition * k);\n                        }\n                        if (walls.length !== 0) {\n                            start.x = nextStart.x;\n                            start.y = nextStart.y;\n                        }\n                    }, this.state.transition * i * 10);\n                }\n            }, this.state.transition * covered.length * 10);\n        }\n        return { statement, lines };\n    }\n\n    initialAnimation(start) {\n        let delay = 0;\n        for (let i = start.y + 1; i <= this.props.columns; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${1}-${i}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay += this.props.columns * this.state.transition;\n        for (let i = 2; i <= this.props.rows; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(\n                    `node-${i}-${this.props.columns}`\n                );\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay += this.props.rows * this.state.transition;\n        for (let i = this.props.columns - 1; i >= 0; i--) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(\n                    `node-${this.props.rows}-${i}`\n                );\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + (this.props.columns - i) * this.state.transition);\n        }\n        delay += this.props.columns * this.state.transition;\n        for (let i = this.props.rows - 1; i >= 0; i--) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${i}-${1}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + (this.props.rows - i) * this.state.transition);\n        }\n        delay += this.props.rows * this.state.transition;\n        for (let i = 2; i <= start.y; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${1}-${i}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay += start.y * this.state.transition;\n        for (let i = 2; i < start.x; i++) {\n            setTimeout(() => {\n                const nodeDom = document.getElementById(`node-${i}-${start.y}`);\n                if (nodeDom !== null) {\n                    nodeDom.classList.add(\"node-wall\");\n                    setTimeout(() => {\n                        nodeDom.classList.remove(\"node-wall\");\n                    }, this.state.transition * this.props.columns);\n                }\n            }, delay + i * this.state.transition);\n        }\n        delay -= start.y * this.state.transition;\n        delay -= start.y * this.state.transition;\n        return delay;\n    }\n\n    clearBoard() {\n        document.querySelectorAll(\".node\").forEach((nodeDom) => {\n            nodeDom.classList.remove(\"node-wall\");\n        });\n    }\n\n    enableSkip(timeout) {\n        setTimeout(() => {\n            document.getElementById(\n                `btn-skip-interaction`\n            ).style.display = `block`;\n            document.getElementById(\n                `btn-skip-interaction`\n            ).style.zIndex = `600`;\n            document.getElementById(\n                `btn-skip-interaction`\n            ).style.animationName = `anim-skip`;\n        }, timeout - 1500);\n    }\n\n    enableNext(timeout) {\n        setTimeout(() => {\n            document.getElementById(\n                `btn-next-interaction`\n            ).style.display = `block`;\n            document.getElementById(\n                `btn-next-interaction`\n            ).style.zIndex = `600`;\n            document.getElementById(\n                `btn-next-interaction`\n            ).style.animationName = `anim-next`;\n        }, timeout - 1500);\n    }\n\n    writeSkipButton(statement, lines) {\n        this.writeOnCanvas(\n            \"-\",\n            Align.CUSTOM,\n            new Position(this.props.rows - 4, this.props.columns - 4)\n        );\n        this.enableSkip(this.writeOnCanvasDelay(statement, lines));\n    }\n\n    writeNextButton(statement, lines) {\n        this.writeOnCanvas(\n            \"+\",\n            Align.CUSTOM,\n            new Position(this.props.rows - 4, this.props.columns - 14)\n        );\n        this.enableNext(this.writeOnCanvasDelay(statement, lines));\n    }\n\n    setFocus(identifier) {\n        setTimeout(() => {\n            document.querySelector(identifier).classList.add(\"focused\");\n        }, 500);\n    }\n\n    placeDemoGIF() {\n        document.querySelector(\"img.wall-demo-gif\").style.display = \"block\";\n    }\n\n    showInteractions(index) {\n        this.clearBoard();\n        document.getElementById(`btn-next-interaction`).style.display = `none`;\n        document.getElementById(`btn-skip-interaction`).style.display = `none`;\n        let statement = null;\n        let lines = null;\n        let data = null;\n        switch (index) {\n            case 1:\n            default:\n                this.writeOnCanvas(\"^\", Align.CUSTOM, new Position(1, 14));\n                this.setFocus(\".navbar-custom .btn-algorithm\");\n                data = this.writeOnCanvas(\n                    \"Select the Algorithm\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                this.writeNextButton(statement, lines);\n                break;\n            case 2:\n                this.writeOnCanvas(\"^\", Align.CUSTOM, new Position(1, 21));\n                this.setFocus(\".navbar-custom .btn-maze\");\n                data = this.writeOnCanvas(\n                    \"Try Creating a Maze\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                this.writeNextButton(statement, lines);\n                break;\n            case 3:\n                this.writeOnCanvas(\"^\", Align.CUSTOM, new Position(1, 28));\n                this.setFocus(\".navbar-custom .btn-speed\");\n                data = this.writeOnCanvas(\n                    \"Choose the Speed\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                this.writeNextButton(statement, lines);\n                break;\n            case 4:\n                this.writeOnCanvas(\n                    \"^\",\n                    Align.CUSTOM,\n                    new Position(1, this.props.columns - 3)\n                );\n                this.setFocus(\".navbar-custom #btn-start-walking\");\n                data = this.writeOnCanvas(\"Start Walking\", Align.MIDDLE_CENTER);\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                this.writeNextButton(statement, lines);\n                break;\n            case 5:\n                // this.writeOnCanvas(\n                //     \"|\",\n                //     Align.CUSTOM,\n                //     new Position(4, parseInt((this.props.columns - 30) / 2))\n                // );\n                this.placeDemoGIF();\n                data = this.writeOnCanvas(\n                    \"Drag\\nFor Walls\",\n                    Align.MIDDLE_RIGHT\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                this.writeNextButton(statement, lines);\n                break;\n\n            case 6:\n                this.writeOnCanvas(\n                    \"!\",\n                    Align.CUSTOM,\n                    new Position(\n                        this.props.rows,\n                        parseInt(this.props.columns / 2) + 1\n                    )\n                );\n                this.setFocus(\".insights-container\");\n                data = this.writeOnCanvas(\n                    \"Insights Available Below\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                this.writeNextButton(statement, lines);\n                break;\n            case 7:\n                data = this.writeOnCanvas(\n                    \"Lets Get Started\",\n                    Align.MIDDLE_CENTER\n                );\n                statement = data.statement;\n                lines = data.lines;\n                this.writeSkipButton(statement, lines);\n                break;\n            case 8:\n                this.skipInteraction();\n                break;\n        }\n    }\n\n    startIntro() {\n        this.props.startLoading();\n        const statement = \"Walk to Destination\";\n        const alignment = Align.MIDDLE_CENTER;\n        const lines = this.getLines(statement);\n        const start = this.getStartPosition(\n            lines[0],\n            0,\n            lines.length,\n            alignment\n        );\n        const initialAnimationDelay = this.initialAnimation(start);\n        const writeOnCanvasDelay =\n            initialAnimationDelay +\n            this.writeOnCanvasDelay(statement, lines) +\n            2000;\n        setTimeout(() => {\n            this.writeOnCanvas(statement, alignment);\n        }, initialAnimationDelay);\n        setTimeout(() => {\n            this.showInteractions(currIndex);\n        }, writeOnCanvasDelay);\n    }\n\n    skipInteraction = () => {\n        document.getElementById(`btn-next-interaction`).style.display = `none`;\n        document.getElementById(`btn-skip-interaction`).style.display = `none`;\n        document\n            .querySelectorAll(\".focused\")\n            .forEach((dom) => dom.classList.remove(\"focused\"));\n        document.querySelector(\"img.wall-demo-gif\").style.display = \"none\";\n        this.props.stopLoading();\n    };\n\n    nextInteraction = () => {\n        document\n            .querySelectorAll(\".focused\")\n            .forEach((dom) => dom.classList.remove(\"focused\"));\n        document.querySelector(\"img.wall-demo-gif\").style.display = \"none\";\n        this.showInteractions(++currIndex);\n    };\n\n    render() {\n        return (\n            <div className=\"interaction-container\">\n                <button\n                    id=\"btn-next-interaction\"\n                    onClick={this.nextInteraction}\n                ></button>\n                <button\n                    id=\"btn-skip-interaction\"\n                    onClick={this.skipInteraction}\n                ></button>\n                <img\n                    src={demo_wall_gif}\n                    alt=\"Drag For Wall Demo\"\n                    className=\"wall-demo-gif\"\n                />\n            </div>\n        );\n    }\n}\n\nexport default Interact;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar/navbar\";\nimport Legend from \"./components/Legend/legend\";\nimport Grid from \"./components/Grid/grid\";\nimport Position, { isEqual } from \"./helper/position\";\nimport Insights from \"./components/Insights/insights\";\nimport Copyright from \"./components/Copyright/copyright\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport resetSourceAndTarget from \"./helper/initialise\";\nimport Loader from \"./components/Loader/loader\";\nimport performDijkstra from \"./algorithms/dijkstra\";\nimport performAstar from \"./algorithms/a_star\";\nimport performGreedy from \"./algorithms/greedy\";\nimport performBFS from \"./algorithms/bfs\";\nimport performDFS from \"./algorithms/dfs\";\nimport Interact from \"./components/Interact/interact\";\n\nclass App extends Component {\n    state = {\n        selectedAlgorithmId: \"algo-dijkstra\",\n        selectedSpeedId: \"speed-fast\",\n        selectedMazeId: \"maze-none\",\n        speed: 15,\n        rows: 0,\n        columns: 0,\n        source: new Position(-1, -1),\n        target: new Position(-1, -1),\n        walls: [],\n        visitedNodes: [],\n        loading: false,\n        numberOfVisitedNodes: null,\n        pathLength: null,\n        timeTaken: null,\n        targetReached: true,\n        interactionDone: false,\n    };\n\n    componentDidMount() {\n        const s = document.createElement(\"script\");\n        s.type = \"text/javascript\";\n        s.async = true;\n        s.crossOrigin = \"anonymous\";\n        s.src = \"https://kit.fontawesome.com/f7fe82406d.js\";\n        document.body.appendChild(s);\n\n        const gridHeight = window.innerHeight - 190;\n        const gridWidth = window.innerWidth;\n\n        const rows = parseInt((gridHeight - 40) / 20);\n\n        const columns = parseInt((gridWidth - 40) / 20);\n        const source = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.3 * columns)\n        );\n        // const source = new Position(2, 2);\n        const target = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.7 * columns)\n        );\n        // const target = new Position(6, 8);\n        this.setState({ rows, columns, source, target });\n    }\n\n    executeAlgorithm = async (algoId) => {\n        const algorithm = this.getSelectedAlgorithmFunction(algoId);\n        const startTime = new Date().getTime();\n        const { visitedNodes, path } = await algorithm(\n            this.state.rows,\n            this.state.columns,\n            this.state.source,\n            this.state.target,\n            this.state.walls\n        );\n        const endTime = new Date().getTime();\n        const insights = {\n            visitedNodes: visitedNodes,\n            path: path,\n            numberOfVisitedNodes: visitedNodes.length,\n            pathLength:\n                visitedNodes[visitedNodes.length - 1].x ===\n                    this.state.target.x &&\n                visitedNodes[visitedNodes.length - 1].y === this.state.target.y\n                    ? path.length + 1\n                    : null,\n            timeTaken: endTime - startTime,\n            targetReached:\n                visitedNodes[visitedNodes.length - 1].x ===\n                    this.state.target.x &&\n                visitedNodes[visitedNodes.length - 1].y === this.state.target.y\n                    ? true\n                    : false,\n        };\n        switch (algoId) {\n            case \"algo-dijkstra\":\n                this.dijkstra = insights;\n                break;\n            case \"algo-a*\":\n                this.astar = insights;\n                break;\n            case \"algo-greedy\":\n                this.greedy = insights;\n                break;\n            case \"algo-bfs\":\n                this.bfs = insights;\n                break;\n            case \"algo-dfs\":\n                this.dfs = insights;\n                break;\n            default:\n                break;\n        }\n    };\n\n    synchronise = async () => {\n        this.dijkstra = null;\n        this.astar = null;\n        this.greedy = null;\n        this.bfs = null;\n        this.dfs = null;\n        await Promise.all([\n            this.executeAlgorithm(this.state.selectedAlgorithmId),\n        ]);\n    };\n\n    startLoading = () => {\n        document\n            .querySelectorAll(\".node\")\n            .forEach((nodeDom) => (nodeDom.style.animationDuration = `4s`));\n        setTimeout(() => {\n            this.setState({ loading: true });\n        }, 1);\n    };\n\n    stopLoading = (delay = 4, changeInteraction = true) => {\n        document\n            .querySelectorAll(\".node.node-path\")\n            .forEach(\n                (nodeDom) =>\n                    (nodeDom.style.animationDuration = `${delay / 1000 + 4}s`)\n            );\n        setTimeout(() => {\n            this.setState({\n                loading: false,\n                interactionDone: changeInteraction,\n            });\n        }, 1);\n    };\n\n    setAlgorithmId = (selectedAlgorithmId) => {\n        setTimeout(() => {\n            const dom = document.querySelector(\".algorithm-options-container\");\n            dom.classList.remove(\"show\");\n        }, 1);\n        setTimeout(() => {\n            this.setState({ selectedAlgorithmId });\n        }, 1);\n    };\n\n    setSpeedId = (selectedSpeedId, speed) => {\n        setTimeout(() => {\n            const dom = document.querySelector(\".speed-options-container\");\n            dom.classList.remove(\"show\");\n        }, 1);\n\n        setTimeout(() => {\n            this.setState({ selectedSpeedId, speed });\n        }, 1);\n    };\n\n    setMazeId = (selectedMazeId) => {\n        setTimeout(() => {\n            this.setState({ selectedMazeId });\n        }, 1);\n    };\n\n    setNodeAsSource = (position) => {\n        // console.log(`SOURCE: ${position}`);\n        if (\n            !(\n                position.x === this.state.target.x &&\n                position.y === this.state.target.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ source: position, walls });\n        }\n    };\n\n    setNodeAsTarget = (position) => {\n        // console.log(`TARGET: ${position}`);\n        if (\n            !(\n                position.x === this.state.source.x &&\n                position.y === this.state.source.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ target: position, walls });\n        }\n    };\n\n    putNodeInPath = (position, node) => {\n        if (isEqual(position, new Position(node.x - 1, node.y))) return \"top\";\n        if (isEqual(position, new Position(node.x, node.y + 1))) return \"right\";\n        if (isEqual(position, new Position(node.x + 1, node.y)))\n            return \"bottom\";\n        if (isEqual(position, new Position(node.x, node.y - 1))) return \"left\";\n        return \"null\";\n    };\n\n    resetInsights = () => {\n        setTimeout(() => {\n            this.setState({\n                numberOfVisitedNodes: null,\n                pathLength: null,\n                timeTaken: null,\n                targetReached: true,\n            });\n        }, 1);\n    };\n\n    clearPath = async () => {\n        setTimeout(() => {\n            document\n                .querySelectorAll(\n                    \".grid-container .node.node-path, .grid-container .node.node-visited\"\n                )\n                .forEach((nodeDom) => {\n                    nodeDom.classList.add(\"node-unvisited\");\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                });\n            this.setState({\n                visitedNodes: [],\n                numberOfVisitedNodes: null,\n                pathLength: null,\n                timeTaken: null,\n            });\n            for (let i = 1; i <= this.state.rows; i++) {\n                for (let j = 1; j <= this.state.columns; j++) {\n                    const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                    if (\n                        nodeDom.classList.contains(\"node-visited\") ||\n                        nodeDom.classList.contains(\"node-path\")\n                    ) {\n                        nodeDom.classList.remove(\"node-visited\");\n                        nodeDom.classList.remove(\"node-path\");\n                        nodeDom.classList.add(\"node-unvisited\");\n                    }\n                }\n            }\n        }, 1);\n        resetSourceAndTarget();\n        this.resetInsights();\n    };\n\n    destructWalls = () => {\n        setTimeout(() => {\n            document\n                .querySelectorAll(\".grid-container .node.node-wall\")\n                .forEach((nodeDom) => {\n                    nodeDom.classList.add(\"node-unvisited\");\n                    nodeDom.classList.remove(\"node-wall\");\n                });\n        }, 1);\n        setTimeout(() => {\n            this.setState({ walls: [] });\n        }, 1);\n        this.setMazeId(\"maze-none\");\n    };\n\n    resetMesh = () => {\n        this.clearPath();\n        this.destructWalls();\n    };\n\n    getSelectedAlgorithmFunction = (algoId = null) => {\n        switch (algoId === null ? this.state.selectedAlgorithmId : algoId) {\n            case \"algo-dijkstra\":\n                return performDijkstra;\n            case \"algo-a*\":\n                return performAstar;\n            case \"algo-greedy\":\n                return performGreedy;\n            case \"algo-bfs\":\n                return performBFS;\n            case \"algo-dfs\":\n                return performDFS;\n            default:\n                return null;\n        }\n    };\n\n    updateWalls = () => {\n        const walls = [];\n        document\n            .querySelectorAll(\".grid-container .node.node-wall\")\n            .forEach((node) =>\n                walls.push(new Position(node.dataset.x, node.dataset.y))\n            );\n        this.setState({ walls });\n    };\n\n    getInsights = async (algoId, insights = null) => {\n        switch (algoId === null ? this.state.selectedAlgorithmId : algoId) {\n            case \"algo-dijkstra\":\n                return this.dijkstra;\n            case \"algo-a*\":\n                return this.astar;\n            case \"algo-greedy\":\n                return this.greedy;\n            case \"algo-bfs\":\n                return this.bfs;\n            case \"algo-dfs\":\n                return this.dfs;\n            default:\n                return null;\n        }\n    };\n\n    startWalking = async () => {\n        this.startLoading();\n        this.clearPath();\n        resetSourceAndTarget();\n        setTimeout(async () => {\n            console.log(\"START WALKING\");\n            await this.synchronise();\n            const insights = await this.getInsights(\n                this.state.selectedAlgorithmId\n            );\n            this.setState({\n                numberOfVisitedNodes: insights.numberOfVisitedNodes,\n                pathLength: insights.pathLength,\n                timeTaken: insights.timeTaken,\n                targetReached: insights.targetReached,\n            });\n\n            for (let i = 0; i < insights.visitedNodes.length; i++) {\n                setTimeout(() => {\n                    const nodeDom = document.querySelector(\n                        `#node-${insights.visitedNodes[i].x}-${insights.visitedNodes[i].y}`\n                    );\n                    if (nodeDom.classList.contains(\"node-unvisited\")) {\n                        nodeDom.classList.remove(\"node-unvisited\");\n                        nodeDom.classList.add(\"node-visited\");\n                    }\n                    if (i === insights.visitedNodes.length - 1)\n                        setTimeout(() => {\n                            if (\n                                insights.visitedNodes[i].x ===\n                                    this.state.target.x &&\n                                insights.visitedNodes[i].y ===\n                                    this.state.target.y\n                            ) {\n                                this.setState({ targetReached: true });\n                                document\n                                    .querySelector(\".node.node-source\")\n                                    .classList.add(\n                                        `path-to-${this.putNodeInPath(\n                                            insights.path[0],\n                                            this.state.source\n                                        )}`\n                                    );\n                                for (let k = 0; k < insights.path.length; k++) {\n                                    setTimeout(() => {\n                                        const node = insights.path[k];\n                                        const nodeDom = document.querySelector(\n                                            `#node-${node.x}-${node.y}`\n                                        );\n                                        nodeDom.classList.remove(\n                                            \"node-visited\"\n                                        );\n                                        nodeDom.classList.add(\"node-path\");\n                                        if (k === insights.path.length - 1) {\n                                            document\n                                                .querySelector(\n                                                    \".node.node-target\"\n                                                )\n                                                .classList.add(\n                                                    `path-to-${this.putNodeInPath(\n                                                        insights.path[\n                                                            insights.path\n                                                                .length - 1\n                                                        ],\n                                                        this.state.target\n                                                    )}`\n                                                );\n                                            this.stopLoading(\n                                                this.state.speed * k * 2\n                                            );\n                                        }\n                                    }, this.state.speed * k * 2);\n                                }\n                            } else {\n                                this.setState({ targetReached: false });\n                                console.log(\"Target NOT Reachable\");\n                                this.stopLoading();\n                            }\n                        }, this.state.speed + 500);\n                }, this.state.speed * i);\n            }\n        }, 1);\n    };\n\n    updateMaze = (walls, visitedNodes) => {\n        this.setState({ walls, visitedNodes });\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <Loader\n                    loading={this.state.loading}\n                    interactionDone={this.state.interactionDone}\n                />\n                <NavBar\n                    selectedAlgorithmId={this.state.selectedAlgorithmId}\n                    selectedSpeedId={this.state.selectedSpeedId}\n                    selectedMazeId={this.state.selectedMazeId}\n                    onAlgorithmChanged={this.setAlgorithmId}\n                    onSpeedChanged={this.setSpeedId}\n                    onMazeChanged={this.setMazeId}\n                    startWalking={this.startWalking}\n                    clearPath={this.clearPath}\n                    destructWalls={this.destructWalls}\n                    resetMesh={this.resetMesh}\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    speed={this.state.speed}\n                    onMazeCreated={this.updateMaze}\n                    startLoading={this.startLoading}\n                    stopLoading={this.stopLoading}\n                />\n\n                <Grid\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    walls={this.state.walls}\n                    visitedNodes={this.state.visitedNodes}\n                    interactionDone={this.state.interactionDone}\n                    setNodeAsSource={this.setNodeAsSource}\n                    setNodeAsTarget={this.setNodeAsTarget}\n                    updateWalls={this.updateWalls}\n                />\n                <Legend />\n                <Insights\n                    totalNodes={this.state.rows * this.state.columns}\n                    walls={this.state.walls.length}\n                    numberOfVisitedNodes={this.state.numberOfVisitedNodes}\n                    pathLength={this.state.pathLength}\n                    timeTaken={this.state.timeTaken}\n                    targetReached={this.state.targetReached}\n                />\n                <Copyright />\n                {this.state.rows !== 0 && this.state.columns !== 0 ? (\n                    window.innerWidth > 950 && !this.state.interactionDone ? (\n                        <Interact\n                            startLoading={this.startLoading}\n                            stopLoading={this.stopLoading}\n                            rows={this.state.rows}\n                            columns={this.state.columns}\n                        />\n                    ) : null\n                ) : null}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.Fragment>\n        <App />\n    </React.Fragment>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}