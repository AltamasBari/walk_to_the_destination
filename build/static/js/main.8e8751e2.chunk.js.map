{"version":3,"sources":["components/Node/node_state.jsx","logo.svg","components/NavBar/NavItem/navitem.jsx","components/Node/position.jsx","algorithms/mazeGeneratingAlgorithms/binary_tree.js","components/NavBar/navbar.jsx","components/Node/node.jsx","components/Legend/legend.jsx","components/Grid/grid.jsx","components/Insights/insights.jsx","components/Copyright/copyright.jsx","algorithms/node.js","algorithms/dijkstra.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NODE_UNVISITED","NODE_VISITED","NODE_IS_WALL","NODE_IS_SOURCE","NODE_IS_TARGET","NODE_FALLS_IN_PATH","NODE_IS_VISITING","NavItem","state","description","getSelectedOptionDescription","props","selectedOption","options","handleHover","option","setState","this","onChanged","hasDescription","undefined","optionNamesContainerWidth","selectedOptionObject","getSelectedOption","className","style","width","map","key","id","textAlign","onMouseEnter","onMouseLeave","onClick","speed","name","left","filter","Component","Position","x","y","generateBinaryTreeMaze","rows","columns","source","target","walls","i","push","j","Math","round","random","NavBar","algorithms","href","title","mazes","speeds","selectedMazeId","constructMaze","console","log","wall","setTimeout","nodeDom","document","querySelector","classList","remove","add","length","onMazeCreated","generateMaze","type","wallsInOrder","setMazeId","selectedAlgorithmId","algorithm","maze","selectedSpeedId","onAlgorithmChanged","onSpeedChanged","startWalking","Fragment","src","logo","height","alt","loading","data-toggle","data-target","aria-controls","aria-expanded","aria-label","showAlgorithmOptionsContainer","getSelectedAlgorithm","showMazeOptionsContainer","getSelectedMaze","showSpeedOptionsContainer","getSelectedSpeed","NodeState","require","Node","nodeState","position","onMouseDown","onMouseUp","getNodeStateClass","data-x","data-y","classes","Legend","disabled","Grid","isMousePressed","movingSource","movingTarget","toggleWall","setNodeAsSource","setNodeAsTarget","visitedNodes","some","paddingX","window","innerWidth","paddingY","innerHeight","nodes","decideNodeState","handleMouseDown","handleMouseUp","handleMouseEnter","handleMouseLeave","paddingTop","paddingRight","paddingBottom","paddingLeft","Insights","insights","Copyright","distance","Infinity","mesh","unvisitedNodes","isEqual","a","b","JSON","stringify","getNeighbours","node","neighbours","getPreviousNodeInPath","currNode","prevNode","min","performDijkstra","row","forEach","initialiseMesh","minDist","getVisitedNodes","path","unshift","getNodesInPath","App","setAlgorithmId","setSpeedId","contains","k","alert","updateMaze","s","createElement","async","crossOrigin","body","appendChild","gridHeight","gridWidth","parseInt","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e8751e2.chunk.js","sourcesContent":["module.exports = {\n    NODE_UNVISITED: 0,\n    NODE_VISITED: 1,\n    NODE_IS_WALL: -1,\n    NODE_IS_SOURCE: 10,\n    NODE_IS_TARGET: 100,\n    NODE_FALLS_IN_PATH: 50,\n    NODE_IS_VISITING: 2,\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass NavItem extends Component {\n    state = {\n        description: this.getSelectedOptionDescription(\n            this.props.selectedOption,\n            this.props.options\n        ),\n    };\n\n    handleHover = (option) => {\n        this.setState({ description: option.description });\n    };\n\n    render() {\n        const { options, selectedOption, onChanged } = this.props;\n        const hasDescription =\n            options[0].description === undefined ? false : true;\n        const optionNamesContainerWidth = hasDescription ? \"30%\" : \"100%\";\n        let selectedOptionObject = this.getSelectedOption(\n            selectedOption,\n            options\n        );\n\n        return (\n            <div className=\"options-container\">\n                <div\n                    className=\"option-names-container\"\n                    style={{ width: optionNamesContainerWidth }}\n                >\n                    {options.map((option) => (\n                        <button\n                            key={option.id}\n                            style={{\n                                textAlign: hasDescription ? \"right\" : \"center\",\n                            }}\n                            className={\n                                option.id === selectedOption ? \"active\" : \"\"\n                            }\n                            onMouseEnter={() => this.handleHover(option)}\n                            onMouseLeave={() =>\n                                this.handleHover(selectedOptionObject)\n                            }\n                            onClick={() =>\n                                onChanged(\n                                    option.id,\n                                    option.speed === undefined\n                                        ? null\n                                        : option.speed\n                                )\n                            }\n                        >\n                            {option.name}\n                        </button>\n                    ))}\n                </div>\n                {hasDescription ? (\n                    <div\n                        className=\"option-description-container\"\n                        style={{\n                            width: \"60%\",\n                            left: optionNamesContainerWidth,\n                        }}\n                    >\n                        {this.state.description}\n                    </div>\n                ) : null}\n            </div>\n        );\n    }\n\n    getSelectedOption(selectedOption, options) {\n        const option = options.filter((option) => option.id === selectedOption);\n        return option[0];\n    }\n    getSelectedOptionDescription(selectedOption, options) {\n        const option = this.getSelectedOption(selectedOption, options);\n        return option === undefined ? null : option.description;\n    }\n}\n\nexport default NavItem;\n","function Position(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nexport default Position;\n","import Position from \"../../components/Node/position\";\n\nconst generateBinaryTreeMaze = (rows, columns, source, target) => {\n    const walls = [];\n    for (let i = 1; i <= rows; i++) {\n        walls.push(new Position(i, 1));\n        walls.push(new Position(i, columns));\n    }\n\n    for (let j = 2; j < columns; j++) {\n        walls.push(new Position(1, j));\n        walls.push(new Position(rows, j));\n    }\n\n    for (let i = 3; i < rows; i += 2) {\n        for (let j = 3; j < columns; j += 2) {\n            walls.push(new Position(i, j));\n            if (Math.round(Math.random())) {\n                walls.push(new Position(i - 1, j));\n            } else {\n                walls.push(new Position(i, j - 1));\n            }\n        }\n    }\n    return walls;\n};\n\nexport default generateBinaryTreeMaze;\n","import React, { Component } from \"react\";\nimport \"./navbar.css\";\nimport logo from \"../../logo.svg\";\nimport NavItem from \"./NavItem/navitem\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport generateBinaryTreeMaze from \"../../algorithms/mazeGeneratingAlgorithms/binary_tree\";\n\nclass NavBar extends Component {\n    state = {\n        algorithms: [\n            {\n                id: \"algo-dijkstra\",\n                name: \"Dijkstra's\",\n                description: (\n                    <div>\n                        <p>\n                            Let the node at which we are starting be called the\n                            <b>initial node</b>. Let the\n                            <b>\n                                distance of node\n                                <i>Y</i>\n                            </b>\n                            be the distance from the <b> initial node</b>\n                            to\n                            <i>Y</i>. Dijkstra's algorithm will assign some\n                            initial distance values and will try to improve them\n                            step by step.\n                        </p>\n                        <ol>\n                            <li>\n                                Mark all nodes unvisited. Create a set of all\n                                the unvisited nodes called the\n                                <i>unvisited set</i>.\n                            </li>\n                            <li>\n                                Assign to every node a tentative distance value:\n                                set it to zero for our initial node and to\n                                infinity for all other nodes. Set the initial\n                                node as current.\n                            </li>\n                            <li>\n                                For the current node, consider all of its\n                                unvisited neighbours and calculate their\n                                <i>tentative</i>\n                                distances through the current node. Compare the\n                                newly calculated\n                                <i>tentative</i>\n                                distance to the current assigned value and\n                                assign the smaller one. For example, if the\n                                current node\n                                <i>A</i>\n                                is marked with a distance of 6, and the edge\n                                connecting it with a neighbour\n                                <i>B</i>\n                                has length 2, then the distance to\n                                <i>B</i>\n                                through\n                                <i>A</i>\n                                will be 6 + 2 = 8. If B was previously marked\n                                with a distance greater than 8 then change it to\n                                8. Otherwise, the current value will be kept.\n                            </li>\n                            <li>\n                                When we are done considering all of the\n                                unvisited neighbours of the current node, mark\n                                the current node as visited and remove it from\n                                the\n                                <i>unvisited set</i>. A visited node will never\n                                be checked again.\n                            </li>\n                            <li>\n                                If the destination node has been marked visited\n                                (when planning a route between two specific\n                                nodes) or if the smallest tentative distance\n                                among the nodes in the\n                                <i>unvisited set</i>\n                                is infinity (when planning a complete traversal;\n                                occurs when there is no connection between the\n                                initial node and remaining unvisited nodes),\n                                then stop. The algorithm has finished.\n                            </li>\n                            <li>\n                                Otherwise, select the unvisited node that is\n                                marked with the smallest tentative distance, set\n                                it as the new \"current node\", and go back to\n                                step 3.\n                            </li>\n                        </ol>\n                        <p>\n                            When planning a route, it is actually not necessary\n                            to wait until the destination node is \"visited\" as\n                            above: the algorithm can stop once the destination\n                            node has the smallest tentative distance among all\n                            \"unvisited\" nodes (and thus could be selected as the\n                            next \"current\").\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-a*\",\n                name: \"A*\",\n                description: (\n                    <div>\n                        <p>\n                            We create two lists – <i>Open List</i> and{\" \"}\n                            <i>Closed List</i>\n                            (just like Dijkstra Algorithm)\n                        </p>\n                        <p>\n                            1. Initialize the open list\n                            <br />\n                            2. Initialize the closed list put the starting node\n                            on the open list (you can leave its{\" \"}\n                            <strong>f</strong> at zero)\n                            <br />\n                            3. while the open list is not empty <br />\n                            a) find the node with the least <strong>\n                                f\n                            </strong>{\" \"}\n                            on the open list, call it \"q\" <br />\n                            b) pop q off the open list <br />\n                            c) generate q's 8 successors and set their parents\n                            to q <br />\n                            d) for each successor <br />\n                            i) if successor is the goal, stop search successor.\n                            <strong>g</strong> = q.<strong>g</strong> + distance\n                            between successor and q successor.<strong>h</strong>{\" \"}\n                            = distance from goal to successor (This can be done\n                            using many ways, we will discuss three heuristics-\n                            Manhattan, Diagonal and Euclidean Heuristics)\n                            successor.<strong>f</strong> = successor.\n                            <strong>g</strong> + successor.<strong>h</strong>\n                            <br />\n                            ii) if a node with the same position as successor is\n                            in the OPEN list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor <br />\n                            iii) if a node with the same position as successor\n                            is in the CLOSED list which has a lower{\" \"}\n                            <strong>f</strong> than successor, skip this\n                            successor otherwise, add the node to the open list\n                            end (for loop) e) push q on the closed list end\n                            (while loop){\" \"}\n                        </p>\n                    </div>\n                ),\n            },\n            {\n                id: \"algo-greedy\",\n                name: \"Greedy\",\n                description: (\n                    <div>\n                        <p>\n                            A<b>greedy algorithm</b>\n                            is any algorithm that follows the problem-solving\n                            heuristic of making the locally optimal choice at\n                            each stage. In many problems, a greedy strategy does\n                            not usually produce an optimal solution, but\n                            nonetheless a greedy heuristic may yield locally\n                            optimal solutions that approximate a globally\n                            optimal solution in a reasonable amount of time.\n                        </p>\n                        <p>\n                            For example, a greedy strategy for the\n                            <a\n                                href=\"/wiki/Travelling_salesman_problem\"\n                                title=\"Travelling salesman problem\"\n                            >\n                                travelling salesman problem\n                            </a>\n                            (which is of a high computational complexity) is the\n                            following heuristic: \"At each step of the journey,\n                            visit the nearest unvisited city.\" This heuristic\n                            does not intend to find a best solution, but it\n                            terminates in a reasonable number of steps; finding\n                            an optimal solution to such a complex problem\n                            typically requires unreasonably many steps. In\n                            mathematical optimization, greedy algorithms\n                            optimally solve combinatorial problems having the\n                            properties of\n                            <a href=\"/wiki/Matroid\" title=\"Matroid\">\n                                matroids\n                            </a>\n                            , and give constant-factor approximations to\n                            optimization problems with submodular structure.\n                        </p>\n                    </div>\n                ),\n            },\n        ],\n        mazes: [\n            { id: \"maze-none\", name: \"Create\" },\n            { id: \"maze-binary-tree\", name: \"Binary Tree\" },\n        ],\n        speeds: [\n            { id: \"speed-faster\", name: \"Faster\", speed: 15 },\n            { id: \"speed-fast\", name: \"Fast\", speed: 30 },\n            { id: \"speed-normal\", name: \"Normal\", speed: 45 },\n            { id: \"speed-slow\", name: \"Slow\", speed: 60 },\n            { id: \"speed-slower\", name: \"Slower\", speed: 75 },\n        ],\n        selectedMazeId: \"maze-none\",\n    };\n\n    constructMaze = (walls) => {\n        console.log({ walls });\n        let i = 0;\n        for (i = 0; i < walls.length; i++) {\n            const wall = walls[i];\n            setTimeout(() => {\n                const nodeDom = document.querySelector(\n                    `#node-${wall.x}-${wall.y}`\n                );\n                nodeDom.classList.remove(\"node-unvisited\");\n                nodeDom.classList.add(\"node-wall\");\n            }, 20 * i);\n        }\n        setTimeout(() => {\n            this.props.onMazeCreated(walls, []);\n        }, this.props.speed * i);\n    };\n\n    generateMaze = (type) => {\n        switch (type) {\n            case \"maze-binary-tree\":\n                console.log(\"Generate Maze : \", type);\n                const wallsInOrder = generateBinaryTreeMaze(\n                    this.props.rows,\n                    this.props.columns,\n                    this.props.source,\n                    this.props.target\n                );\n                this.constructMaze(wallsInOrder);\n                break;\n            case \"maze-none\":\n            default:\n                this.props.onMazeCreated([], []);\n                break;\n        }\n    };\n\n    setMazeId = (selectedMazeId) => {\n        this.setState({ selectedMazeId });\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.remove(\"show\");\n        this.generateMaze(selectedMazeId);\n    };\n\n    showAlgorithmOptionsContainer() {\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showMazeOptionsContainer() {\n        const dom = document.querySelector(\".maze-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    showSpeedOptionsContainer() {\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.add(\"show\");\n    }\n\n    getSelectedAlgorithm(selectedAlgorithmId) {\n        const algorithm = this.state.algorithms.filter(\n            (algorithm) => algorithm.id === selectedAlgorithmId\n        );\n        return algorithm[0];\n    }\n\n    getSelectedMaze(selectedMazeId) {\n        const maze = this.state.mazes.filter(\n            (maze) => maze.id === selectedMazeId\n        );\n        return maze[0];\n    }\n\n    getSelectedSpeed(selectedSpeedId) {\n        const speed = this.state.speeds.filter(\n            (speed) => speed.id === selectedSpeedId\n        );\n        return speed[0];\n    }\n\n    render() {\n        const {\n            selectedAlgorithmId,\n            selectedSpeedId,\n            onAlgorithmChanged,\n            onSpeedChanged,\n            startWalking,\n        } = this.props;\n        return (\n            <React.Fragment>\n                <nav className=\"navbar navbar-expand-lg navbar-custom navbar-dark text-light pl-1\">\n                    <span className=\"navbar-brand mb-0\">\n                        <img\n                            src={logo}\n                            width=\"30\"\n                            height=\"30\"\n                            className=\"d-inline-block align-top\"\n                            alt=\"\"\n                            loading=\"lazy\"\n                            onClick={() => startWalking()}\n                        />\n                        <span>Walk to the Destination</span>\n                    </span>\n                    <button\n                        className=\"navbar-toggler\"\n                        type=\"button\"\n                        data-toggle=\"collapse\"\n                        data-target=\"#navbarNav\"\n                        aria-controls=\"navbarNav\"\n                        aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\"\n                    >\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item active ml-2\">\n                                <button\n                                    className=\"btn-algorithm my-1\"\n                                    onClick={this.showAlgorithmOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedAlgorithm(\n                                                selectedAlgorithmId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Algorithm\n                                    <i className=\"fas fa-check-double ml-1\"></i>\n                                </button>\n                            </li>\n                            <li className=\"nav-item active ml-2\">\n                                <button\n                                    className=\"btn-maze my-1\"\n                                    onClick={this.showMazeOptionsContainer}\n                                >\n                                    <span>\n                                        {\n                                            this.getSelectedMaze(\n                                                this.state.selectedMazeId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    Maze\n                                    <i className=\"fab fa-magento ml-1\"></i>\n                                </button>\n                            </li>\n                            <li className=\"nav-item active ml-2\">\n                                <button\n                                    className=\"btn-speed my-1\"\n                                    onClick={this.showSpeedOptionsContainer}\n                                >\n                                    Speed :{\" \"}\n                                    <span>\n                                        {\n                                            this.getSelectedSpeed(\n                                                selectedSpeedId\n                                            ).name\n                                        }\n                                    </span>{\" \"}\n                                    <i className=\"fas fa-tachometer-alt\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n                <div className=\"algorithm-options-container\">\n                    <NavItem\n                        options={this.state.algorithms}\n                        selectedOption={selectedAlgorithmId}\n                        onChanged={onAlgorithmChanged}\n                    />\n                </div>\n                <div className=\"maze-options-container\">\n                    <NavItem\n                        options={this.state.mazes}\n                        selectedOption={this.state.selectedMazeId}\n                        onChanged={this.setMazeId}\n                    />\n                </div>\n                <div className=\"speed-options-container\">\n                    <NavItem\n                        options={this.state.speeds}\n                        selectedOption={selectedSpeedId}\n                        onChanged={onSpeedChanged}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport \"./node.css\";\n\nconst NodeState = require(\"./node_state\");\nclass Node extends Component {\n    render() {\n        const {\n            nodeState,\n            position,\n            onMouseDown,\n            onMouseUp,\n            onMouseEnter,\n            onMouseLeave,\n        } = this.props;\n        if (onMouseEnter === undefined) {\n            return (\n                <div className={this.getNodeStateClass(nodeState)}>\n                    {/* <div></div> */}\n                </div>\n            );\n        } else {\n            return (\n                <div\n                    className={this.getNodeStateClass(nodeState)}\n                    id={`node-${position.x}-${position.y}`}\n                    data-x={position.x}\n                    data-y={position.y}\n                    onMouseDown={() => onMouseDown(nodeState, position)}\n                    onMouseUp={() => onMouseUp(nodeState, position)}\n                    onMouseEnter={() => onMouseEnter(nodeState, position)}\n                    onMouseLeave={() => onMouseLeave(nodeState, position)}\n                >\n                    {/* <div></div> */}\n                </div>\n            );\n        }\n    }\n\n    getNodeStateClass(nodeState) {\n        let classes = \"node node-\";\n        switch (nodeState) {\n            case NodeState.NODE_UNVISITED:\n                classes += \"unvisited\";\n                break;\n            case NodeState.NODE_VISITED:\n                classes += \"visited\";\n                break;\n            case NodeState.NODE_IS_WALL:\n                classes += \"wall\";\n                break;\n            case NodeState.NODE_IS_SOURCE:\n                classes += \"source\";\n                break;\n            case NodeState.NODE_IS_TARGET:\n                classes += \"target\";\n                break;\n            default:\n                classes += \"unvisited\";\n                break;\n        }\n        return classes;\n    }\n}\n\nexport default Node;\n","import React from \"react\";\nimport \"./legend.css\";\nimport Node from \"../Node/node\";\nimport Position from \"../Node/position\";\nconst NodeState = require(\"../Node/node_state\");\n\nconst Legend = () => {\n    return (\n        <section className=\"legend-container\">\n            <ul>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_UNVISITED}\n                            position={new Position(-1, -1)}\n                            disabled\n                        />\n                        <span className=\"ml-2\">Unvisited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_VISITED}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Visited</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_WALL}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Wall</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_SOURCE}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Source</span>\n                    </div>\n                </li>\n                <li>\n                    <div>\n                        <Node\n                            nodeState={NodeState.NODE_IS_TARGET}\n                            position={new Position(-1, -1)}\n                        />\n                        <span className=\"ml-2\">Target</span>\n                    </div>\n                </li>\n            </ul>\n        </section>\n    );\n};\n\nexport default Legend;\n","import React, { Component } from \"react\";\nimport Node from \"../Node/node\";\nimport NodeState from \"../Node/node_state\";\nimport Position from \"../Node/position\";\nimport \"./grid.css\";\n\nclass Grid extends Component {\n    state = {\n        isMousePressed: false,\n        movingSource: false,\n        movingTarget: false,\n    };\n\n    handleMouseUp(nodeState, position) {\n        this.setState({ isMousePressed: false });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseUp | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: false });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: false });\n        } else {\n            // do nothing\n        }\n    }\n    handleMouseDown(nodeState, position) {\n        this.setState({ isMousePressed: true });\n        // console.log(\n        //     `(${position.x}, ${position.y}) : mouseDown | pressed=${this.state.isMousePressed}`\n        // );\n        if (nodeState === NodeState.NODE_IS_SOURCE) {\n            this.setState({ movingSource: true });\n        } else if (nodeState === NodeState.NODE_IS_TARGET) {\n            this.setState({ movingTarget: true });\n        } else {\n            this.props.toggleWall(position);\n        }\n    }\n    handleMouseEnter(nodeState, position) {\n        if (this.state.isMousePressed) {\n            // console.log(\n            //     `(${position.x}, ${position.y}) : mouseEnter | pressed=${this.state.isMousePressed}`\n            // );\n            if (this.state.movingSource) {\n                // TODO: change nodeState to source\n                this.props.setNodeAsSource(position);\n            } else if (this.state.movingTarget) {\n                // TODO: change nodeState to target\n                this.props.setNodeAsTarget(position);\n            } else {\n                // TODO: toggleWall()\n                // console.log(position);\n                this.props.toggleWall(position);\n            }\n        }\n    }\n    handleMouseLeave(nodeState, position) {\n        // if (this.state.isMousePressed) {\n        //     console.log(\n        //         `(${position.x}, ${position.y}) : mouseLeave | pressed=${this.state.isMousePressed}`\n        //     );\n        //     if (nodeState === NodeState.NODE_IS_SOURCE) {\n        //         // TODO: change nodeState to unvisited\n        //     } else if (nodeState === NodeState.NODE_IS_TARGET) {\n        //         // TODO: change nodestate to unvisited\n        //     } else {\n        //         // do nothing\n        //     }\n        // }\n    }\n\n    decideNodeState(x, y, source, target, walls, visitedNodes) {\n        if (x === source.x && y === source.y) {\n            return NodeState.NODE_IS_SOURCE;\n        } else if (x === target.x && y === target.y) {\n            return NodeState.NODE_IS_TARGET;\n        } else if (\n            walls.some((position) => position.x === x && position.y === y)\n        ) {\n            return NodeState.NODE_IS_WALL;\n        } else if (\n            visitedNodes.some(\n                (position) => position.x === x && position.y === y\n            )\n        ) {\n            return NodeState.NODE_VISITED;\n        }\n        return NodeState.NODE_UNVISITED;\n    }\n\n    render() {\n        const {\n            rows,\n            columns,\n            source,\n            target,\n            walls,\n            visitedNodes,\n        } = this.props;\n        const paddingX = (window.innerWidth - columns * 20) / 2;\n        const paddingY = (window.innerHeight - 190 - rows * 20) / 2;\n        const nodes = [];\n\n        for (var x = 1; x <= rows; x++) {\n            for (var y = 1; y <= columns; y++) {\n                const key = \"node-\" + x + \"-\" + y;\n                const nodeState = this.decideNodeState(\n                    x,\n                    y,\n                    source,\n                    target,\n                    walls,\n                    visitedNodes\n                );\n\n                nodes.push(\n                    <Node\n                        key={key}\n                        position={new Position(x, y)}\n                        id={key}\n                        nodeState={nodeState}\n                        onMouseDown={(nodeState, position) =>\n                            this.handleMouseDown(nodeState, position)\n                        }\n                        onMouseUp={(nodeState, position) =>\n                            this.handleMouseUp(nodeState, position)\n                        }\n                        onMouseEnter={(nodeState, position) =>\n                            this.handleMouseEnter(nodeState, position)\n                        }\n                        onMouseLeave={(nodeState, position) =>\n                            this.handleMouseLeave(nodeState, position)\n                        }\n                    />\n                );\n            }\n        }\n        return (\n            <section\n                className=\"grid-container\"\n                style={{\n                    paddingTop: paddingY,\n                    paddingRight: paddingX,\n                    paddingBottom: paddingY,\n                    paddingLeft: paddingX,\n                }}\n            >\n                {nodes}\n            </section>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport \"./insigts.css\";\n\nconst Insights = (props) => {\n    const { insights } = props;\n    return (\n        <section className=\"insights-container\">\n            <div>\n                <p>{insights}</p>\n            </div>\n        </section>\n    );\n};\n\nexport default Insights;\n","import React from \"react\";\nimport \"./copyright.css\";\nconst Copyright = () => {\n    return (\n        <section className=\"copyright-container\">\n            <div className=\"github-links\">\n                <a href=\"https://github.com/shantanu0323\">\n                    <i className=\"fab fa-github-square\"></i>\n                </a>\n            </div>\n            <div className=\"copyright\">\n                Made with <i className=\"fas fa-heart text-danger\"></i> by{\" \"}\n                <a href=\"https://shantanu0323.github.io\">Shantanu Pramanik</a>\n            </div>\n            <div className=\"social-links\">\n                <a href=\"https://www.linkedin.com/in/shantanu-pramanik/\">\n                    <i className=\"fab fa-linkedin\"></i>\n                </a>\n                <a href=\"https://www.facebook.com/shantanu.pramanik1\">\n                    <i className=\"fab fa-facebook-square\"></i>\n                </a>\n                <a href=\"https://www.twitter.com/shantanu0323/\">\n                    <i className=\"fab fa-twitter-square\"></i>\n                </a>\n                <a href=\"https://www.instagram.com/shantanu0323/\">\n                    <i className=\"fab fa-instagram-square\"></i>\n                </a>\n            </div>\n        </section>\n    );\n};\n\nexport default Copyright;\n","import NodeState from \"../components/Node/node_state\";\n\nexport default class Node {\n    constructor(\n        position,\n        distance = Infinity,\n        nodeState = NodeState.NODE_UNVISITED\n    ) {\n        this.position = position;\n        this.distance = distance;\n        this.nodeState = nodeState;\n    }\n}\n","import Node from \"./node\";\nimport NodeState from \"../components/Node/node_state\";\nimport Position from \"../components/Node/position\";\n\nconst mesh = [];\nlet unvisitedNodes = [];\n\nconst isEqual = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\n\nconst initialiseMesh = (rows, columns, source, target, walls) => {\n    window.rows = rows;\n    window.columns = columns;\n    for (let i = 1; i <= window.rows; i++) {\n        const row = [];\n        for (let j = 1; j <= window.columns; j++) {\n            const node = new Node(new Position(i, j));\n            if (isEqual(node.position, source)) {\n                node.nodeState = NodeState.NODE_IS_SOURCE;\n                node.distance = 0;\n            } else if (isEqual(node.position, target)) {\n                node.nodeState = NodeState.NODE_IS_TARGET;\n            }\n            unvisitedNodes.push(node);\n            row[j] = node;\n        }\n        mesh[i] = row;\n    }\n    walls.forEach((position) => {\n        mesh[position.x][position.y].nodeState = NodeState.NODE_IS_WALL;\n    });\n};\n\nconst getNeighbours = (node) => {\n    const neighbours = [];\n    if (\n        node.position.x >= 1 &&\n        node.position.x <= window.rows &&\n        node.position.y >= 1 &&\n        node.position.y + 1 <= window.columns\n    ) {\n        neighbours.push(mesh[node.position.x][node.position.y + 1]);\n    }\n    if (\n        node.position.x >= 1 &&\n        node.position.x + 1 <= window.rows &&\n        node.position.y >= 1 &&\n        node.position.y <= window.columns\n    ) {\n        neighbours.push(mesh[node.position.x + 1][node.position.y]);\n    }\n    if (\n        node.position.x >= 1 &&\n        node.position.x <= window.rows &&\n        node.position.y - 1 >= 1 &&\n        node.position.y <= window.columns\n    ) {\n        neighbours.push(mesh[node.position.x][node.position.y - 1]);\n    }\n    if (\n        node.position.x - 1 >= 1 &&\n        node.position.x <= window.rows &&\n        node.position.y >= 1 &&\n        node.position.y <= window.columns\n    ) {\n        neighbours.push(mesh[node.position.x - 1][node.position.y]);\n    }\n\n    return neighbours.filter(\n        (node) => node.nodeState !== NodeState.NODE_IS_WALL\n    );\n};\n\nconst getPreviousNodeInPath = (currNode) => {\n    const neighbours = getNeighbours(currNode).filter(\n        (node) =>\n            mesh[node.position.x][node.position.y].nodeState ===\n            NodeState.NODE_VISITED\n    );\n    let min = Infinity;\n    let prevNode;\n    for (let i = 0; i < neighbours.length; i++) {\n        const node = neighbours[i];\n        if (node.distance < min) {\n            min = node.distance;\n            prevNode = node;\n        }\n    }\n    return prevNode;\n};\n\nconst getNodesInPath = (visitedNodes) => {\n    const path = [];\n    let currNode = visitedNodes[visitedNodes.length - 1]; // target\n    while (currNode.distance > 1) {\n        currNode = getPreviousNodeInPath(currNode);\n        path.unshift(currNode);\n    }\n    return path;\n};\n\nconst getVisitedNodes = (target) => {\n    const visitedNodes = [];\n\n    while (unvisitedNodes.length > 0) {\n        let minDist = Infinity;\n        let currNode = undefined;\n        for (let i = 0; i < unvisitedNodes.length; i++) {\n            if (unvisitedNodes[i].distance < minDist) {\n                minDist = unvisitedNodes[i].distance;\n                currNode = unvisitedNodes[i];\n            }\n        }\n        if (currNode === undefined) {\n            console.log(\"Target NOT Reachable\");\n            break;\n        }\n\n        visitedNodes.push(currNode);\n        unvisitedNodes = unvisitedNodes.filter(\n            (node) => !isEqual(node.position, currNode.position)\n        );\n        if (isEqual(currNode.position, target)) {\n            console.log(\"TARGET REACHED\");\n            break;\n        }\n        currNode.nodeState =\n            currNode.nodeState === NodeState.NODE_IS_SOURCE\n                ? NodeState.NODE_IS_SOURCE\n                : NodeState.NODE_VISITED;\n\n        getNeighbours(currNode).forEach((node) => {\n            const alt = currNode.distance + 1;\n            node.distance = alt < node.distance ? alt : node.distance;\n        });\n    }\n\n    return visitedNodes;\n};\n\nconst performDijkstra = (rows, columns, source, target, walls) => {\n    // initialise and fetch the graph\n    initialiseMesh(rows, columns, source, target, walls);\n\n    // perform dijkstra(graph, source, target) on the graph and get the visited nodes in order\n    const visitedNodes = getVisitedNodes(target);\n    const path = getNodesInPath(visitedNodes);\n    return { visitedNodes, path };\n};\n\nexport default performDijkstra;\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/NavBar/navbar\";\nimport Legend from \"./components/Legend/legend\";\nimport Grid from \"./components/Grid/grid\";\nimport Position from \"./components/Node/position.jsx\";\nimport Insights from \"./components/Insights/insights\";\nimport Copyright from \"./components/Copyright/copyright\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport performDijkstra from \"./algorithms/dijkstra\";\n\nclass App extends Component {\n    componentDidMount() {\n        // Include the FontAwesome Library\n        const s = document.createElement(\"script\");\n        s.type = \"text/javascript\";\n        s.async = true;\n        s.crossOrigin = \"anonymous\";\n        s.src = \"https://kit.fontawesome.com/f7fe82406d.js\";\n        document.body.appendChild(s);\n\n        const gridHeight = window.innerHeight - 190;\n        const gridWidth = window.innerWidth;\n\n        const rows = parseInt((gridHeight - 40) / 20);\n\n        const columns = parseInt((gridWidth - 40) / 20);\n        const source = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.25 * columns)\n        );\n        const target = new Position(\n            parseInt(0.5 * rows),\n            parseInt(0.75 * columns)\n        );\n        this.setState({ rows, columns, source, target });\n    }\n\n    state = {\n        selectedAlgorithmId: \"algo-dijkstra\",\n        selectedSpeedId: \"speed-fast\",\n        speed: 15,\n        rows: 0,\n        columns: 0,\n        source: new Position(-1, -1),\n        target: new Position(-1, -1),\n        walls: [],\n        visitedNodes: [],\n    };\n\n    setAlgorithmId = (selectedAlgorithmId) => {\n        this.setState({ selectedAlgorithmId });\n        const dom = document.querySelector(\".algorithm-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setSpeedId = (selectedSpeedId, speed) => {\n        this.setState({ selectedSpeedId, speed });\n        const dom = document.querySelector(\".speed-options-container\");\n        dom.classList.remove(\"show\");\n    };\n\n    setNodeAsSource = (position) => {\n        // console.log(`SOURCE: ${position}`);\n        if (\n            !(\n                position.x === this.state.target.x &&\n                position.y === this.state.target.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ source: position, walls });\n        }\n    };\n\n    setNodeAsTarget = (position) => {\n        // console.log(`TARGET: ${position}`);\n        if (\n            !(\n                position.x === this.state.source.x &&\n                position.y === this.state.source.y\n            )\n        ) {\n            let walls = this.state.walls;\n            if (\n                walls.some(\n                    (node) => node.x === position.x && node.y === position.y\n                )\n            ) {\n                walls = this.state.walls.filter(\n                    (node) => !(node.x === position.x && node.y === position.y)\n                );\n            }\n            this.setState({ target: position, walls });\n        }\n    };\n\n    toggleWall = (position) => {\n        // console.log(position);\n        let walls = this.state.walls;\n        if (\n            walls.some((node) => node.x === position.x && node.y === position.y)\n        ) {\n            // Node is a wall -> change to unvisited\n            walls = walls.filter(\n                (node) => !(node.x === position.x && node.y === position.y)\n            );\n        } else {\n            walls.push(position);\n        }\n        this.setState({ walls });\n    };\n\n    startWalking = () => {\n        for (let i = 1; i <= this.state.rows; i++) {\n            for (let j = 1; j <= this.state.columns; j++) {\n                const nodeDom = document.querySelector(`#node-${i}-${j}`);\n                if (\n                    nodeDom.classList.contains(\"node-visited\") ||\n                    nodeDom.classList.contains(\"node-path\")\n                ) {\n                    nodeDom.classList.remove(\"node-visited\");\n                    nodeDom.classList.remove(\"node-path\");\n                    nodeDom.classList.add(\"node-unvisited\");\n                }\n            }\n        }\n        setTimeout(() => {\n            console.log(\"START WALKING\");\n            const { visitedNodes, path } = performDijkstra(\n                this.state.rows,\n                this.state.columns,\n                this.state.source,\n                this.state.target,\n                this.state.walls\n            );\n            for (let i = 0; i < visitedNodes.length; i++) {\n                setTimeout(() => {\n                    const nodeDom = document.querySelector(\n                        `#node-${visitedNodes[i].position.x}-${visitedNodes[i].position.y}`\n                    );\n                    if (nodeDom.classList.contains(\"node-unvisited\")) {\n                        nodeDom.classList.remove(\"node-unvisited\");\n                        nodeDom.classList.add(\"node-visited\");\n                    }\n                    if (i === visitedNodes.length - 1)\n                        setTimeout(() => {\n                            if (\n                                visitedNodes[i].position.x ===\n                                    this.state.target.x &&\n                                visitedNodes[i].position.y ===\n                                    this.state.target.y\n                            ) {\n                                for (let k = 0; k < path.length; k++) {\n                                    setTimeout(() => {\n                                        const node = path[k];\n                                        const nodeDom = document.querySelector(\n                                            `#node-${node.position.x}-${node.position.y}`\n                                        );\n                                        nodeDom.classList.remove(\n                                            \"node-visited\"\n                                        );\n                                        nodeDom.classList.add(\"node-path\");\n                                    }, this.state.speed * k);\n                                }\n                            } else {\n                                alert(\"Target NOT Reachable\");\n                            }\n                        }, this.state.speed + 500);\n                }, this.state.speed * i);\n            }\n        }, 500);\n    };\n\n    updateMaze = (walls, visitedNodes) => {\n        this.setState({ walls, visitedNodes });\n    };\n\n    render() {\n        return (\n            <React.Fragment>\n                <NavBar\n                    selectedAlgorithmId={this.state.selectedAlgorithmId}\n                    selectedSpeedId={this.state.selectedSpeedId}\n                    onAlgorithmChanged={this.setAlgorithmId}\n                    onSpeedChanged={this.setSpeedId}\n                    startWalking={this.startWalking}\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    speed={this.state.speed}\n                    onMazeCreated={this.updateMaze}\n                />\n                <Legend />\n                <Grid\n                    rows={this.state.rows}\n                    columns={this.state.columns}\n                    source={this.state.source}\n                    target={this.state.target}\n                    walls={this.state.walls}\n                    visitedNodes={this.state.visitedNodes}\n                    setNodeAsSource={this.setNodeAsSource}\n                    setNodeAsTarget={this.setNodeAsTarget}\n                    toggleWall={this.toggleWall}\n                />\n                <Insights insights=\"Insights\" />\n                <Copyright />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.Fragment>\n        <App />\n    </React.Fragment>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}